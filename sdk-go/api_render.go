/*
Pogodoc API

API for Pogodoc document and template management service. Provides endpoints for rendering documents, managing templates, generating previews, and handling API tokens.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RenderAPIService RenderAPI service
type RenderAPIService service

type ApiDocumentsImmediateRenderPostRequest struct {
	ctx context.Context
	ApiService *RenderAPIService
	documentsImmediateRenderPostRequest *DocumentsImmediateRenderPostRequest
}

func (r ApiDocumentsImmediateRenderPostRequest) DocumentsImmediateRenderPostRequest(documentsImmediateRenderPostRequest DocumentsImmediateRenderPostRequest) ApiDocumentsImmediateRenderPostRequest {
	r.documentsImmediateRenderPostRequest = &documentsImmediateRenderPostRequest
	return r
}

func (r ApiDocumentsImmediateRenderPostRequest) Execute() (*DocumentsImmediateRenderPost200Response, *http.Response, error) {
	return r.ApiService.DocumentsImmediateRenderPostExecute(r)
}

/*
DocumentsImmediateRenderPost Immediate Render

Combines initialization and rendering in one step. Creates a job, uploads template/data directly, starts rendering, and adds the document to Strapi. Requires subscription check.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDocumentsImmediateRenderPostRequest
*/
func (a *RenderAPIService) DocumentsImmediateRenderPost(ctx context.Context) ApiDocumentsImmediateRenderPostRequest {
	return ApiDocumentsImmediateRenderPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DocumentsImmediateRenderPost200Response
func (a *RenderAPIService) DocumentsImmediateRenderPostExecute(r ApiDocumentsImmediateRenderPostRequest) (*DocumentsImmediateRenderPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DocumentsImmediateRenderPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RenderAPIService.DocumentsImmediateRenderPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/documents/immediate-render"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.documentsImmediateRenderPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDocumentsInitPostRequest struct {
	ctx context.Context
	ApiService *RenderAPIService
	documentsInitPostRequest *DocumentsInitPostRequest
}

func (r ApiDocumentsInitPostRequest) DocumentsInitPostRequest(documentsInitPostRequest DocumentsInitPostRequest) ApiDocumentsInitPostRequest {
	r.documentsInitPostRequest = &documentsInitPostRequest
	return r
}

func (r ApiDocumentsInitPostRequest) Execute() (*DocumentsInitPost200Response, *http.Response, error) {
	return r.ApiService.DocumentsInitPostExecute(r)
}

/*
DocumentsInitPost Initialize Render Job

Creates a new render job with a unique ID, sets up S3 storage for template and data files, and generates presigned upload URLs if needed. Requires subscription check.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDocumentsInitPostRequest
*/
func (a *RenderAPIService) DocumentsInitPost(ctx context.Context) ApiDocumentsInitPostRequest {
	return ApiDocumentsInitPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DocumentsInitPost200Response
func (a *RenderAPIService) DocumentsInitPostExecute(r ApiDocumentsInitPostRequest) (*DocumentsInitPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DocumentsInitPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RenderAPIService.DocumentsInitPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/documents/init"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.documentsInitPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDocumentsJobIdRenderPostRequest struct {
	ctx context.Context
	ApiService *RenderAPIService
	jobId string
	documentsJobIdRenderPostRequest *DocumentsJobIdRenderPostRequest
}

func (r ApiDocumentsJobIdRenderPostRequest) DocumentsJobIdRenderPostRequest(documentsJobIdRenderPostRequest DocumentsJobIdRenderPostRequest) ApiDocumentsJobIdRenderPostRequest {
	r.documentsJobIdRenderPostRequest = &documentsJobIdRenderPostRequest
	return r
}

func (r ApiDocumentsJobIdRenderPostRequest) Execute() (*DocumentsJobIdRenderPost200Response, *http.Response, error) {
	return r.ApiService.DocumentsJobIdRenderPostExecute(r)
}

/*
DocumentsJobIdRenderPost Start Render Job

Takes a previously initialized job, updates its status to in-progress, and triggers the rendering process using Puppeteer. Can optionally wait for render completion.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param jobId
 @return ApiDocumentsJobIdRenderPostRequest
*/
func (a *RenderAPIService) DocumentsJobIdRenderPost(ctx context.Context, jobId string) ApiDocumentsJobIdRenderPostRequest {
	return ApiDocumentsJobIdRenderPostRequest{
		ApiService: a,
		ctx: ctx,
		jobId: jobId,
	}
}

// Execute executes the request
//  @return DocumentsJobIdRenderPost200Response
func (a *RenderAPIService) DocumentsJobIdRenderPostExecute(r ApiDocumentsJobIdRenderPostRequest) (*DocumentsJobIdRenderPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DocumentsJobIdRenderPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RenderAPIService.DocumentsJobIdRenderPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/documents/{jobId}/render"
	localVarPath = strings.Replace(localVarPath, "{"+"jobId"+"}", url.PathEscape(parameterValueToString(r.jobId, "jobId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.documentsJobIdRenderPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDocumentsRenderPreviewPostRequest struct {
	ctx context.Context
	ApiService *RenderAPIService
	templateId *string
	templatesTemplateIdRenderPreviewsPostRequest *TemplatesTemplateIdRenderPreviewsPostRequest
}

func (r ApiDocumentsRenderPreviewPostRequest) TemplateId(templateId string) ApiDocumentsRenderPreviewPostRequest {
	r.templateId = &templateId
	return r
}

func (r ApiDocumentsRenderPreviewPostRequest) TemplatesTemplateIdRenderPreviewsPostRequest(templatesTemplateIdRenderPreviewsPostRequest TemplatesTemplateIdRenderPreviewsPostRequest) ApiDocumentsRenderPreviewPostRequest {
	r.templatesTemplateIdRenderPreviewsPostRequest = &templatesTemplateIdRenderPreviewsPostRequest
	return r
}

func (r ApiDocumentsRenderPreviewPostRequest) Execute() (*TemplatesTemplateIdRenderPreviewsPost200ResponsePngPreview, *http.Response, error) {
	return r.ApiService.DocumentsRenderPreviewPostExecute(r)
}

/*
DocumentsRenderPreviewPost Generate Document Preview

Generates a preview by creating a single-page render job, processing it immediately, and returning the output URL. Used for template visualization.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDocumentsRenderPreviewPostRequest
*/
func (a *RenderAPIService) DocumentsRenderPreviewPost(ctx context.Context) ApiDocumentsRenderPreviewPostRequest {
	return ApiDocumentsRenderPreviewPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TemplatesTemplateIdRenderPreviewsPost200ResponsePngPreview
func (a *RenderAPIService) DocumentsRenderPreviewPostExecute(r ApiDocumentsRenderPreviewPostRequest) (*TemplatesTemplateIdRenderPreviewsPost200ResponsePngPreview, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TemplatesTemplateIdRenderPreviewsPost200ResponsePngPreview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RenderAPIService.DocumentsRenderPreviewPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/documents/render-preview"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.templateId == nil {
		return localVarReturnValue, nil, reportError("templateId is required and must be specified")
	}
	if r.templatesTemplateIdRenderPreviewsPostRequest == nil {
		return localVarReturnValue, nil, reportError("templatesTemplateIdRenderPreviewsPostRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "templateId", r.templateId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.templatesTemplateIdRenderPreviewsPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiJobsJobIdGetRequest struct {
	ctx context.Context
	ApiService *RenderAPIService
	jobId string
}

func (r ApiJobsJobIdGetRequest) Execute() (*JobsJobIdGet200Response, *http.Response, error) {
	return r.ApiService.JobsJobIdGetExecute(r)
}

/*
JobsJobIdGet Get Job Status

Fetches detailed job information from S3 storage including job status, template ID, target format, and output details if available.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param jobId
 @return ApiJobsJobIdGetRequest
*/
func (a *RenderAPIService) JobsJobIdGet(ctx context.Context, jobId string) ApiJobsJobIdGetRequest {
	return ApiJobsJobIdGetRequest{
		ApiService: a,
		ctx: ctx,
		jobId: jobId,
	}
}

// Execute executes the request
//  @return JobsJobIdGet200Response
func (a *RenderAPIService) JobsJobIdGetExecute(r ApiJobsJobIdGetRequest) (*JobsJobIdGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobsJobIdGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RenderAPIService.JobsJobIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/jobs/{jobId}"
	localVarPath = strings.Replace(localVarPath, "{"+"jobId"+"}", url.PathEscape(parameterValueToString(r.jobId, "jobId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
