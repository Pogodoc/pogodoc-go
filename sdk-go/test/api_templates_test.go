/*
Pogodoc API

Testing TemplatesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_TemplatesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TemplatesAPIService TemplatesInitGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TemplatesAPI.TemplatesInitGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TemplatesAPIService TemplatesTemplateIdClonePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.TemplatesAPI.TemplatesTemplateIdClonePost(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TemplatesAPIService TemplatesTemplateIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.TemplatesAPI.TemplatesTemplateIdDelete(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TemplatesAPIService TemplatesTemplateIdIndexHtmlGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.TemplatesAPI.TemplatesTemplateIdIndexHtmlGet(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TemplatesAPIService TemplatesTemplateIdIndexHtmlPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.TemplatesAPI.TemplatesTemplateIdIndexHtmlPost(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TemplatesAPIService TemplatesTemplateIdPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.TemplatesAPI.TemplatesTemplateIdPost(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TemplatesAPIService TemplatesTemplateIdPresignedUrlGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.TemplatesAPI.TemplatesTemplateIdPresignedUrlGet(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TemplatesAPIService TemplatesTemplateIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.TemplatesAPI.TemplatesTemplateIdPut(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TemplatesAPIService TemplatesTemplateIdRenderPreviewsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.TemplatesAPI.TemplatesTemplateIdRenderPreviewsPost(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TemplatesAPIService TemplatesTemplateIdUnzipPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.TemplatesAPI.TemplatesTemplateIdUnzipPost(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
