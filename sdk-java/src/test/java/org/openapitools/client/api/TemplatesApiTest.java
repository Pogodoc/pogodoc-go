/*
 * Pogodoc API
 * API for Pogodoc document and template management service. Provides endpoints for rendering documents, managing templates, generating previews, and handling API tokens.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.TemplatesInitGet200Response;
import org.openapitools.client.model.TemplatesTemplateIdClonePost200Response;
import org.openapitools.client.model.TemplatesTemplateIdIndexHtmlGet200Response;
import org.openapitools.client.model.TemplatesTemplateIdPostRequest;
import org.openapitools.client.model.TemplatesTemplateIdPresignedUrlGet200Response;
import org.openapitools.client.model.TemplatesTemplateIdPut200Response;
import org.openapitools.client.model.TemplatesTemplateIdPutRequest;
import org.openapitools.client.model.TemplatesTemplateIdRenderPreviewsPost200Response;
import org.openapitools.client.model.TemplatesTemplateIdRenderPreviewsPostRequest;
import org.openapitools.client.model.TemplatesTemplateIdUnzipPostRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TemplatesApi
 */
@Disabled
public class TemplatesApiTest {

    private final TemplatesApi api = new TemplatesApi();

    /**
     * Initialize Template Creation
     *
     * Initializes template creation by generating a unique ID and providing a presigned URL for template ZIP upload. Sets unfinished tag for tracking incomplete templates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void templatesInitGetTest() throws ApiException {
        TemplatesInitGet200Response response = api.templatesInitGet();
        // TODO: test validations
    }

    /**
     * Clone Template
     *
     * Creates a new template by duplicating an existing template&#39;s content and metadata. Includes copying preview files and template index.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void templatesTemplateIdClonePostTest() throws ApiException {
        String templateId = null;
        TemplatesTemplateIdClonePost200Response response = api.templatesTemplateIdClonePost(templateId);
        // TODO: test validations
    }

    /**
     * Delete Template
     *
     * Deletes a template from Strapi and associated S3 storage. Removes all associated files and metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void templatesTemplateIdDeleteTest() throws ApiException {
        String templateId = null;
        Object response = api.templatesTemplateIdDelete(templateId);
        // TODO: test validations
    }

    /**
     * Get Template Index HTML
     *
     * Retrieves the template index.html file from S3 storage. Used for rendering the template in the browser.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void templatesTemplateIdIndexHtmlGetTest() throws ApiException {
        String templateId = null;
        TemplatesTemplateIdIndexHtmlGet200Response response = api.templatesTemplateIdIndexHtmlGet(templateId);
        // TODO: test validations
    }

    /**
     * Upload Template Index HTML
     *
     * Uploads the template index.html file to S3 storage. Used for rendering the template in the browser.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void templatesTemplateIdIndexHtmlPostTest() throws ApiException {
        String templateId = null;
        TemplatesTemplateIdIndexHtmlGet200Response templatesTemplateIdIndexHtmlGet200Response = null;
        Object response = api.templatesTemplateIdIndexHtmlPost(templateId, templatesTemplateIdIndexHtmlGet200Response);
        // TODO: test validations
    }

    /**
     * Save New Template
     *
     * Finalizes template creation by saving template info to Strapi, copying preview files to permanent storage, and creating template index. Removes unfinished tag upon completion.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void templatesTemplateIdPostTest() throws ApiException {
        String templateId = null;
        TemplatesTemplateIdPostRequest templatesTemplateIdPostRequest = null;
        Object response = api.templatesTemplateIdPost(templateId, templatesTemplateIdPostRequest);
        // TODO: test validations
    }

    /**
     * Generate Presigned URL
     *
     * Generates a presigned URL for template access. Used for downloading template files from S3 storage.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void templatesTemplateIdPresignedUrlGetTest() throws ApiException {
        String templateId = null;
        TemplatesTemplateIdPresignedUrlGet200Response response = api.templatesTemplateIdPresignedUrlGet(templateId);
        // TODO: test validations
    }

    /**
     * Update Template
     *
     * Updates template content, handles S3 storage cleanup for old content, updates template metadata in Strapi, and manages preview files. Removes unfinished tags after successful update.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void templatesTemplateIdPutTest() throws ApiException {
        String templateId = null;
        TemplatesTemplateIdPutRequest templatesTemplateIdPutRequest = null;
        TemplatesTemplateIdPut200Response response = api.templatesTemplateIdPut(templateId, templatesTemplateIdPutRequest);
        // TODO: test validations
    }

    /**
     * Generate Template Previews
     *
     * Creates both PNG and PDF preview files for template visualization. Generates previews in parallel and returns URLs for both formats.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void templatesTemplateIdRenderPreviewsPostTest() throws ApiException {
        String templateId = null;
        TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest = null;
        TemplatesTemplateIdRenderPreviewsPost200Response response = api.templatesTemplateIdRenderPreviewsPost(templateId, templatesTemplateIdRenderPreviewsPostRequest);
        // TODO: test validations
    }

    /**
     * Extract Template Files
     *
     * Extracts contents from an uploaded template ZIP file and stores individual files in the appropriate S3 storage structure.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void templatesTemplateIdUnzipPostTest() throws ApiException {
        String templateId = null;
        TemplatesTemplateIdUnzipPostRequest templatesTemplateIdUnzipPostRequest = null;
        Object response = api.templatesTemplateIdUnzipPost(templateId, templatesTemplateIdUnzipPostRequest);
        // TODO: test validations
    }

}
