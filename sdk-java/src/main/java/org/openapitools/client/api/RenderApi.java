/*
 * Pogodoc API
 * API for Pogodoc document and template management service. Provides endpoints for rendering documents, managing templates, generating previews, and handling API tokens.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DocumentsImmediateRenderPost200Response;
import org.openapitools.client.model.DocumentsImmediateRenderPostRequest;
import org.openapitools.client.model.DocumentsInitPost200Response;
import org.openapitools.client.model.DocumentsInitPostRequest;
import org.openapitools.client.model.DocumentsJobIdRenderPost200Response;
import org.openapitools.client.model.DocumentsJobIdRenderPostRequest;
import org.openapitools.client.model.JobsJobIdGet200Response;
import org.openapitools.client.model.TemplatesTemplateIdRenderPreviewsPost200ResponsePngPreview;
import org.openapitools.client.model.TemplatesTemplateIdRenderPreviewsPostRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RenderApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RenderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RenderApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for documentsImmediateRenderPost
     * @param documentsImmediateRenderPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentsImmediateRenderPostCall(@javax.annotation.Nullable DocumentsImmediateRenderPostRequest documentsImmediateRenderPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = documentsImmediateRenderPostRequest;

        // create path and map variables
        String localVarPath = "/documents/immediate-render";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentsImmediateRenderPostValidateBeforeCall(@javax.annotation.Nullable DocumentsImmediateRenderPostRequest documentsImmediateRenderPostRequest, final ApiCallback _callback) throws ApiException {
        return documentsImmediateRenderPostCall(documentsImmediateRenderPostRequest, _callback);

    }

    /**
     * Immediate Render
     * Combines initialization and rendering in one step. Creates a job, uploads template/data directly, starts rendering, and adds the document to Strapi. Requires subscription check.
     * @param documentsImmediateRenderPostRequest  (optional)
     * @return DocumentsImmediateRenderPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public DocumentsImmediateRenderPost200Response documentsImmediateRenderPost(@javax.annotation.Nullable DocumentsImmediateRenderPostRequest documentsImmediateRenderPostRequest) throws ApiException {
        ApiResponse<DocumentsImmediateRenderPost200Response> localVarResp = documentsImmediateRenderPostWithHttpInfo(documentsImmediateRenderPostRequest);
        return localVarResp.getData();
    }

    /**
     * Immediate Render
     * Combines initialization and rendering in one step. Creates a job, uploads template/data directly, starts rendering, and adds the document to Strapi. Requires subscription check.
     * @param documentsImmediateRenderPostRequest  (optional)
     * @return ApiResponse&lt;DocumentsImmediateRenderPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentsImmediateRenderPost200Response> documentsImmediateRenderPostWithHttpInfo(@javax.annotation.Nullable DocumentsImmediateRenderPostRequest documentsImmediateRenderPostRequest) throws ApiException {
        okhttp3.Call localVarCall = documentsImmediateRenderPostValidateBeforeCall(documentsImmediateRenderPostRequest, null);
        Type localVarReturnType = new TypeToken<DocumentsImmediateRenderPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Immediate Render (asynchronously)
     * Combines initialization and rendering in one step. Creates a job, uploads template/data directly, starts rendering, and adds the document to Strapi. Requires subscription check.
     * @param documentsImmediateRenderPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentsImmediateRenderPostAsync(@javax.annotation.Nullable DocumentsImmediateRenderPostRequest documentsImmediateRenderPostRequest, final ApiCallback<DocumentsImmediateRenderPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentsImmediateRenderPostValidateBeforeCall(documentsImmediateRenderPostRequest, _callback);
        Type localVarReturnType = new TypeToken<DocumentsImmediateRenderPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentsInitPost
     * @param documentsInitPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentsInitPostCall(@javax.annotation.Nullable DocumentsInitPostRequest documentsInitPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = documentsInitPostRequest;

        // create path and map variables
        String localVarPath = "/documents/init";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentsInitPostValidateBeforeCall(@javax.annotation.Nullable DocumentsInitPostRequest documentsInitPostRequest, final ApiCallback _callback) throws ApiException {
        return documentsInitPostCall(documentsInitPostRequest, _callback);

    }

    /**
     * Initialize Render Job
     * Creates a new render job with a unique ID, sets up S3 storage for template and data files, and generates presigned upload URLs if needed. Requires subscription check.
     * @param documentsInitPostRequest  (optional)
     * @return DocumentsInitPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public DocumentsInitPost200Response documentsInitPost(@javax.annotation.Nullable DocumentsInitPostRequest documentsInitPostRequest) throws ApiException {
        ApiResponse<DocumentsInitPost200Response> localVarResp = documentsInitPostWithHttpInfo(documentsInitPostRequest);
        return localVarResp.getData();
    }

    /**
     * Initialize Render Job
     * Creates a new render job with a unique ID, sets up S3 storage for template and data files, and generates presigned upload URLs if needed. Requires subscription check.
     * @param documentsInitPostRequest  (optional)
     * @return ApiResponse&lt;DocumentsInitPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentsInitPost200Response> documentsInitPostWithHttpInfo(@javax.annotation.Nullable DocumentsInitPostRequest documentsInitPostRequest) throws ApiException {
        okhttp3.Call localVarCall = documentsInitPostValidateBeforeCall(documentsInitPostRequest, null);
        Type localVarReturnType = new TypeToken<DocumentsInitPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initialize Render Job (asynchronously)
     * Creates a new render job with a unique ID, sets up S3 storage for template and data files, and generates presigned upload URLs if needed. Requires subscription check.
     * @param documentsInitPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentsInitPostAsync(@javax.annotation.Nullable DocumentsInitPostRequest documentsInitPostRequest, final ApiCallback<DocumentsInitPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentsInitPostValidateBeforeCall(documentsInitPostRequest, _callback);
        Type localVarReturnType = new TypeToken<DocumentsInitPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentsJobIdRenderPost
     * @param jobId  (required)
     * @param documentsJobIdRenderPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentsJobIdRenderPostCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable DocumentsJobIdRenderPostRequest documentsJobIdRenderPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = documentsJobIdRenderPostRequest;

        // create path and map variables
        String localVarPath = "/documents/{jobId}/render"
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentsJobIdRenderPostValidateBeforeCall(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable DocumentsJobIdRenderPostRequest documentsJobIdRenderPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling documentsJobIdRenderPost(Async)");
        }

        return documentsJobIdRenderPostCall(jobId, documentsJobIdRenderPostRequest, _callback);

    }

    /**
     * Start Render Job
     * Takes a previously initialized job, updates its status to in-progress, and triggers the rendering process using Puppeteer. Can optionally wait for render completion.
     * @param jobId  (required)
     * @param documentsJobIdRenderPostRequest  (optional)
     * @return DocumentsJobIdRenderPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public DocumentsJobIdRenderPost200Response documentsJobIdRenderPost(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable DocumentsJobIdRenderPostRequest documentsJobIdRenderPostRequest) throws ApiException {
        ApiResponse<DocumentsJobIdRenderPost200Response> localVarResp = documentsJobIdRenderPostWithHttpInfo(jobId, documentsJobIdRenderPostRequest);
        return localVarResp.getData();
    }

    /**
     * Start Render Job
     * Takes a previously initialized job, updates its status to in-progress, and triggers the rendering process using Puppeteer. Can optionally wait for render completion.
     * @param jobId  (required)
     * @param documentsJobIdRenderPostRequest  (optional)
     * @return ApiResponse&lt;DocumentsJobIdRenderPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentsJobIdRenderPost200Response> documentsJobIdRenderPostWithHttpInfo(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable DocumentsJobIdRenderPostRequest documentsJobIdRenderPostRequest) throws ApiException {
        okhttp3.Call localVarCall = documentsJobIdRenderPostValidateBeforeCall(jobId, documentsJobIdRenderPostRequest, null);
        Type localVarReturnType = new TypeToken<DocumentsJobIdRenderPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start Render Job (asynchronously)
     * Takes a previously initialized job, updates its status to in-progress, and triggers the rendering process using Puppeteer. Can optionally wait for render completion.
     * @param jobId  (required)
     * @param documentsJobIdRenderPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentsJobIdRenderPostAsync(@javax.annotation.Nonnull String jobId, @javax.annotation.Nullable DocumentsJobIdRenderPostRequest documentsJobIdRenderPostRequest, final ApiCallback<DocumentsJobIdRenderPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentsJobIdRenderPostValidateBeforeCall(jobId, documentsJobIdRenderPostRequest, _callback);
        Type localVarReturnType = new TypeToken<DocumentsJobIdRenderPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentsRenderPreviewPost
     * @param templateId  (required)
     * @param templatesTemplateIdRenderPreviewsPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentsRenderPreviewPostCall(@javax.annotation.Nonnull String templateId, @javax.annotation.Nonnull TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = templatesTemplateIdRenderPreviewsPostRequest;

        // create path and map variables
        String localVarPath = "/documents/render-preview";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (templateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateId", templateId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentsRenderPreviewPostValidateBeforeCall(@javax.annotation.Nonnull String templateId, @javax.annotation.Nonnull TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling documentsRenderPreviewPost(Async)");
        }

        // verify the required parameter 'templatesTemplateIdRenderPreviewsPostRequest' is set
        if (templatesTemplateIdRenderPreviewsPostRequest == null) {
            throw new ApiException("Missing the required parameter 'templatesTemplateIdRenderPreviewsPostRequest' when calling documentsRenderPreviewPost(Async)");
        }

        return documentsRenderPreviewPostCall(templateId, templatesTemplateIdRenderPreviewsPostRequest, _callback);

    }

    /**
     * Generate Document Preview
     * Generates a preview by creating a single-page render job, processing it immediately, and returning the output URL. Used for template visualization.
     * @param templateId  (required)
     * @param templatesTemplateIdRenderPreviewsPostRequest  (required)
     * @return TemplatesTemplateIdRenderPreviewsPost200ResponsePngPreview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public TemplatesTemplateIdRenderPreviewsPost200ResponsePngPreview documentsRenderPreviewPost(@javax.annotation.Nonnull String templateId, @javax.annotation.Nonnull TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest) throws ApiException {
        ApiResponse<TemplatesTemplateIdRenderPreviewsPost200ResponsePngPreview> localVarResp = documentsRenderPreviewPostWithHttpInfo(templateId, templatesTemplateIdRenderPreviewsPostRequest);
        return localVarResp.getData();
    }

    /**
     * Generate Document Preview
     * Generates a preview by creating a single-page render job, processing it immediately, and returning the output URL. Used for template visualization.
     * @param templateId  (required)
     * @param templatesTemplateIdRenderPreviewsPostRequest  (required)
     * @return ApiResponse&lt;TemplatesTemplateIdRenderPreviewsPost200ResponsePngPreview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplatesTemplateIdRenderPreviewsPost200ResponsePngPreview> documentsRenderPreviewPostWithHttpInfo(@javax.annotation.Nonnull String templateId, @javax.annotation.Nonnull TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest) throws ApiException {
        okhttp3.Call localVarCall = documentsRenderPreviewPostValidateBeforeCall(templateId, templatesTemplateIdRenderPreviewsPostRequest, null);
        Type localVarReturnType = new TypeToken<TemplatesTemplateIdRenderPreviewsPost200ResponsePngPreview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate Document Preview (asynchronously)
     * Generates a preview by creating a single-page render job, processing it immediately, and returning the output URL. Used for template visualization.
     * @param templateId  (required)
     * @param templatesTemplateIdRenderPreviewsPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentsRenderPreviewPostAsync(@javax.annotation.Nonnull String templateId, @javax.annotation.Nonnull TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest, final ApiCallback<TemplatesTemplateIdRenderPreviewsPost200ResponsePngPreview> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentsRenderPreviewPostValidateBeforeCall(templateId, templatesTemplateIdRenderPreviewsPostRequest, _callback);
        Type localVarReturnType = new TypeToken<TemplatesTemplateIdRenderPreviewsPost200ResponsePngPreview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsJobIdGet
     * @param jobId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsJobIdGetCall(@javax.annotation.Nonnull String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}"
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsJobIdGetValidateBeforeCall(@javax.annotation.Nonnull String jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsJobIdGet(Async)");
        }

        return jobsJobIdGetCall(jobId, _callback);

    }

    /**
     * Get Job Status
     * Fetches detailed job information from S3 storage including job status, template ID, target format, and output details if available.
     * @param jobId  (required)
     * @return JobsJobIdGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public JobsJobIdGet200Response jobsJobIdGet(@javax.annotation.Nonnull String jobId) throws ApiException {
        ApiResponse<JobsJobIdGet200Response> localVarResp = jobsJobIdGetWithHttpInfo(jobId);
        return localVarResp.getData();
    }

    /**
     * Get Job Status
     * Fetches detailed job information from S3 storage including job status, template ID, target format, and output details if available.
     * @param jobId  (required)
     * @return ApiResponse&lt;JobsJobIdGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobsJobIdGet200Response> jobsJobIdGetWithHttpInfo(@javax.annotation.Nonnull String jobId) throws ApiException {
        okhttp3.Call localVarCall = jobsJobIdGetValidateBeforeCall(jobId, null);
        Type localVarReturnType = new TypeToken<JobsJobIdGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Job Status (asynchronously)
     * Fetches detailed job information from S3 storage including job status, template ID, target format, and output details if available.
     * @param jobId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsJobIdGetAsync(@javax.annotation.Nonnull String jobId, final ApiCallback<JobsJobIdGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsJobIdGetValidateBeforeCall(jobId, _callback);
        Type localVarReturnType = new TypeToken<JobsJobIdGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
