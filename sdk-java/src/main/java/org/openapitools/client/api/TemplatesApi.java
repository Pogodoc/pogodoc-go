/*
 * Pogodoc API
 * API for Pogodoc document and template management service. Provides endpoints for rendering documents, managing templates, generating previews, and handling API tokens.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.TemplatesInitGet200Response;
import org.openapitools.client.model.TemplatesTemplateIdClonePost200Response;
import org.openapitools.client.model.TemplatesTemplateIdIndexHtmlGet200Response;
import org.openapitools.client.model.TemplatesTemplateIdPostRequest;
import org.openapitools.client.model.TemplatesTemplateIdPresignedUrlGet200Response;
import org.openapitools.client.model.TemplatesTemplateIdPut200Response;
import org.openapitools.client.model.TemplatesTemplateIdPutRequest;
import org.openapitools.client.model.TemplatesTemplateIdRenderPreviewsPost200Response;
import org.openapitools.client.model.TemplatesTemplateIdRenderPreviewsPostRequest;
import org.openapitools.client.model.TemplatesTemplateIdUnzipPostRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TemplatesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TemplatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TemplatesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for templatesInitGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesInitGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/init";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatesInitGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return templatesInitGetCall(_callback);

    }

    /**
     * Initialize Template Creation
     * Initializes template creation by generating a unique ID and providing a presigned URL for template ZIP upload. Sets unfinished tag for tracking incomplete templates.
     * @return TemplatesInitGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public TemplatesInitGet200Response templatesInitGet() throws ApiException {
        ApiResponse<TemplatesInitGet200Response> localVarResp = templatesInitGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Initialize Template Creation
     * Initializes template creation by generating a unique ID and providing a presigned URL for template ZIP upload. Sets unfinished tag for tracking incomplete templates.
     * @return ApiResponse&lt;TemplatesInitGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplatesInitGet200Response> templatesInitGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = templatesInitGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TemplatesInitGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initialize Template Creation (asynchronously)
     * Initializes template creation by generating a unique ID and providing a presigned URL for template ZIP upload. Sets unfinished tag for tracking incomplete templates.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesInitGetAsync(final ApiCallback<TemplatesInitGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatesInitGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TemplatesInitGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templatesTemplateIdClonePost
     * @param templateId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesTemplateIdClonePostCall(@javax.annotation.Nonnull String templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{templateId}/clone"
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatesTemplateIdClonePostValidateBeforeCall(@javax.annotation.Nonnull String templateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling templatesTemplateIdClonePost(Async)");
        }

        return templatesTemplateIdClonePostCall(templateId, _callback);

    }

    /**
     * Clone Template
     * Creates a new template by duplicating an existing template&#39;s content and metadata. Includes copying preview files and template index.
     * @param templateId  (required)
     * @return TemplatesTemplateIdClonePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public TemplatesTemplateIdClonePost200Response templatesTemplateIdClonePost(@javax.annotation.Nonnull String templateId) throws ApiException {
        ApiResponse<TemplatesTemplateIdClonePost200Response> localVarResp = templatesTemplateIdClonePostWithHttpInfo(templateId);
        return localVarResp.getData();
    }

    /**
     * Clone Template
     * Creates a new template by duplicating an existing template&#39;s content and metadata. Includes copying preview files and template index.
     * @param templateId  (required)
     * @return ApiResponse&lt;TemplatesTemplateIdClonePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplatesTemplateIdClonePost200Response> templatesTemplateIdClonePostWithHttpInfo(@javax.annotation.Nonnull String templateId) throws ApiException {
        okhttp3.Call localVarCall = templatesTemplateIdClonePostValidateBeforeCall(templateId, null);
        Type localVarReturnType = new TypeToken<TemplatesTemplateIdClonePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clone Template (asynchronously)
     * Creates a new template by duplicating an existing template&#39;s content and metadata. Includes copying preview files and template index.
     * @param templateId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesTemplateIdClonePostAsync(@javax.annotation.Nonnull String templateId, final ApiCallback<TemplatesTemplateIdClonePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatesTemplateIdClonePostValidateBeforeCall(templateId, _callback);
        Type localVarReturnType = new TypeToken<TemplatesTemplateIdClonePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templatesTemplateIdDelete
     * @param templateId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesTemplateIdDeleteCall(@javax.annotation.Nonnull String templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{templateId}"
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatesTemplateIdDeleteValidateBeforeCall(@javax.annotation.Nonnull String templateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling templatesTemplateIdDelete(Async)");
        }

        return templatesTemplateIdDeleteCall(templateId, _callback);

    }

    /**
     * Delete Template
     * Deletes a template from Strapi and associated S3 storage. Removes all associated files and metadata.
     * @param templateId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public Object templatesTemplateIdDelete(@javax.annotation.Nonnull String templateId) throws ApiException {
        ApiResponse<Object> localVarResp = templatesTemplateIdDeleteWithHttpInfo(templateId);
        return localVarResp.getData();
    }

    /**
     * Delete Template
     * Deletes a template from Strapi and associated S3 storage. Removes all associated files and metadata.
     * @param templateId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> templatesTemplateIdDeleteWithHttpInfo(@javax.annotation.Nonnull String templateId) throws ApiException {
        okhttp3.Call localVarCall = templatesTemplateIdDeleteValidateBeforeCall(templateId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Template (asynchronously)
     * Deletes a template from Strapi and associated S3 storage. Removes all associated files and metadata.
     * @param templateId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesTemplateIdDeleteAsync(@javax.annotation.Nonnull String templateId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatesTemplateIdDeleteValidateBeforeCall(templateId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templatesTemplateIdIndexHtmlGet
     * @param templateId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesTemplateIdIndexHtmlGetCall(@javax.annotation.Nonnull String templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{templateId}/index-html"
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatesTemplateIdIndexHtmlGetValidateBeforeCall(@javax.annotation.Nonnull String templateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling templatesTemplateIdIndexHtmlGet(Async)");
        }

        return templatesTemplateIdIndexHtmlGetCall(templateId, _callback);

    }

    /**
     * Get Template Index HTML
     * Retrieves the template index.html file from S3 storage. Used for rendering the template in the browser.
     * @param templateId  (required)
     * @return TemplatesTemplateIdIndexHtmlGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public TemplatesTemplateIdIndexHtmlGet200Response templatesTemplateIdIndexHtmlGet(@javax.annotation.Nonnull String templateId) throws ApiException {
        ApiResponse<TemplatesTemplateIdIndexHtmlGet200Response> localVarResp = templatesTemplateIdIndexHtmlGetWithHttpInfo(templateId);
        return localVarResp.getData();
    }

    /**
     * Get Template Index HTML
     * Retrieves the template index.html file from S3 storage. Used for rendering the template in the browser.
     * @param templateId  (required)
     * @return ApiResponse&lt;TemplatesTemplateIdIndexHtmlGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplatesTemplateIdIndexHtmlGet200Response> templatesTemplateIdIndexHtmlGetWithHttpInfo(@javax.annotation.Nonnull String templateId) throws ApiException {
        okhttp3.Call localVarCall = templatesTemplateIdIndexHtmlGetValidateBeforeCall(templateId, null);
        Type localVarReturnType = new TypeToken<TemplatesTemplateIdIndexHtmlGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Template Index HTML (asynchronously)
     * Retrieves the template index.html file from S3 storage. Used for rendering the template in the browser.
     * @param templateId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesTemplateIdIndexHtmlGetAsync(@javax.annotation.Nonnull String templateId, final ApiCallback<TemplatesTemplateIdIndexHtmlGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatesTemplateIdIndexHtmlGetValidateBeforeCall(templateId, _callback);
        Type localVarReturnType = new TypeToken<TemplatesTemplateIdIndexHtmlGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templatesTemplateIdIndexHtmlPost
     * @param templateId  (required)
     * @param templatesTemplateIdIndexHtmlGet200Response  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesTemplateIdIndexHtmlPostCall(@javax.annotation.Nonnull String templateId, @javax.annotation.Nonnull TemplatesTemplateIdIndexHtmlGet200Response templatesTemplateIdIndexHtmlGet200Response, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = templatesTemplateIdIndexHtmlGet200Response;

        // create path and map variables
        String localVarPath = "/templates/{templateId}/index-html"
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatesTemplateIdIndexHtmlPostValidateBeforeCall(@javax.annotation.Nonnull String templateId, @javax.annotation.Nonnull TemplatesTemplateIdIndexHtmlGet200Response templatesTemplateIdIndexHtmlGet200Response, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling templatesTemplateIdIndexHtmlPost(Async)");
        }

        // verify the required parameter 'templatesTemplateIdIndexHtmlGet200Response' is set
        if (templatesTemplateIdIndexHtmlGet200Response == null) {
            throw new ApiException("Missing the required parameter 'templatesTemplateIdIndexHtmlGet200Response' when calling templatesTemplateIdIndexHtmlPost(Async)");
        }

        return templatesTemplateIdIndexHtmlPostCall(templateId, templatesTemplateIdIndexHtmlGet200Response, _callback);

    }

    /**
     * Upload Template Index HTML
     * Uploads the template index.html file to S3 storage. Used for rendering the template in the browser.
     * @param templateId  (required)
     * @param templatesTemplateIdIndexHtmlGet200Response  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public Object templatesTemplateIdIndexHtmlPost(@javax.annotation.Nonnull String templateId, @javax.annotation.Nonnull TemplatesTemplateIdIndexHtmlGet200Response templatesTemplateIdIndexHtmlGet200Response) throws ApiException {
        ApiResponse<Object> localVarResp = templatesTemplateIdIndexHtmlPostWithHttpInfo(templateId, templatesTemplateIdIndexHtmlGet200Response);
        return localVarResp.getData();
    }

    /**
     * Upload Template Index HTML
     * Uploads the template index.html file to S3 storage. Used for rendering the template in the browser.
     * @param templateId  (required)
     * @param templatesTemplateIdIndexHtmlGet200Response  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> templatesTemplateIdIndexHtmlPostWithHttpInfo(@javax.annotation.Nonnull String templateId, @javax.annotation.Nonnull TemplatesTemplateIdIndexHtmlGet200Response templatesTemplateIdIndexHtmlGet200Response) throws ApiException {
        okhttp3.Call localVarCall = templatesTemplateIdIndexHtmlPostValidateBeforeCall(templateId, templatesTemplateIdIndexHtmlGet200Response, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload Template Index HTML (asynchronously)
     * Uploads the template index.html file to S3 storage. Used for rendering the template in the browser.
     * @param templateId  (required)
     * @param templatesTemplateIdIndexHtmlGet200Response  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesTemplateIdIndexHtmlPostAsync(@javax.annotation.Nonnull String templateId, @javax.annotation.Nonnull TemplatesTemplateIdIndexHtmlGet200Response templatesTemplateIdIndexHtmlGet200Response, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatesTemplateIdIndexHtmlPostValidateBeforeCall(templateId, templatesTemplateIdIndexHtmlGet200Response, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templatesTemplateIdPost
     * @param templateId  (required)
     * @param templatesTemplateIdPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesTemplateIdPostCall(@javax.annotation.Nonnull String templateId, @javax.annotation.Nonnull TemplatesTemplateIdPostRequest templatesTemplateIdPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = templatesTemplateIdPostRequest;

        // create path and map variables
        String localVarPath = "/templates/{templateId}"
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatesTemplateIdPostValidateBeforeCall(@javax.annotation.Nonnull String templateId, @javax.annotation.Nonnull TemplatesTemplateIdPostRequest templatesTemplateIdPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling templatesTemplateIdPost(Async)");
        }

        // verify the required parameter 'templatesTemplateIdPostRequest' is set
        if (templatesTemplateIdPostRequest == null) {
            throw new ApiException("Missing the required parameter 'templatesTemplateIdPostRequest' when calling templatesTemplateIdPost(Async)");
        }

        return templatesTemplateIdPostCall(templateId, templatesTemplateIdPostRequest, _callback);

    }

    /**
     * Save New Template
     * Finalizes template creation by saving template info to Strapi, copying preview files to permanent storage, and creating template index. Removes unfinished tag upon completion.
     * @param templateId  (required)
     * @param templatesTemplateIdPostRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public Object templatesTemplateIdPost(@javax.annotation.Nonnull String templateId, @javax.annotation.Nonnull TemplatesTemplateIdPostRequest templatesTemplateIdPostRequest) throws ApiException {
        ApiResponse<Object> localVarResp = templatesTemplateIdPostWithHttpInfo(templateId, templatesTemplateIdPostRequest);
        return localVarResp.getData();
    }

    /**
     * Save New Template
     * Finalizes template creation by saving template info to Strapi, copying preview files to permanent storage, and creating template index. Removes unfinished tag upon completion.
     * @param templateId  (required)
     * @param templatesTemplateIdPostRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> templatesTemplateIdPostWithHttpInfo(@javax.annotation.Nonnull String templateId, @javax.annotation.Nonnull TemplatesTemplateIdPostRequest templatesTemplateIdPostRequest) throws ApiException {
        okhttp3.Call localVarCall = templatesTemplateIdPostValidateBeforeCall(templateId, templatesTemplateIdPostRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save New Template (asynchronously)
     * Finalizes template creation by saving template info to Strapi, copying preview files to permanent storage, and creating template index. Removes unfinished tag upon completion.
     * @param templateId  (required)
     * @param templatesTemplateIdPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesTemplateIdPostAsync(@javax.annotation.Nonnull String templateId, @javax.annotation.Nonnull TemplatesTemplateIdPostRequest templatesTemplateIdPostRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatesTemplateIdPostValidateBeforeCall(templateId, templatesTemplateIdPostRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templatesTemplateIdPresignedUrlGet
     * @param templateId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesTemplateIdPresignedUrlGetCall(@javax.annotation.Nonnull String templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{templateId}/presigned-url"
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatesTemplateIdPresignedUrlGetValidateBeforeCall(@javax.annotation.Nonnull String templateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling templatesTemplateIdPresignedUrlGet(Async)");
        }

        return templatesTemplateIdPresignedUrlGetCall(templateId, _callback);

    }

    /**
     * Generate Presigned URL
     * Generates a presigned URL for template access. Used for downloading template files from S3 storage.
     * @param templateId  (required)
     * @return TemplatesTemplateIdPresignedUrlGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public TemplatesTemplateIdPresignedUrlGet200Response templatesTemplateIdPresignedUrlGet(@javax.annotation.Nonnull String templateId) throws ApiException {
        ApiResponse<TemplatesTemplateIdPresignedUrlGet200Response> localVarResp = templatesTemplateIdPresignedUrlGetWithHttpInfo(templateId);
        return localVarResp.getData();
    }

    /**
     * Generate Presigned URL
     * Generates a presigned URL for template access. Used for downloading template files from S3 storage.
     * @param templateId  (required)
     * @return ApiResponse&lt;TemplatesTemplateIdPresignedUrlGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplatesTemplateIdPresignedUrlGet200Response> templatesTemplateIdPresignedUrlGetWithHttpInfo(@javax.annotation.Nonnull String templateId) throws ApiException {
        okhttp3.Call localVarCall = templatesTemplateIdPresignedUrlGetValidateBeforeCall(templateId, null);
        Type localVarReturnType = new TypeToken<TemplatesTemplateIdPresignedUrlGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate Presigned URL (asynchronously)
     * Generates a presigned URL for template access. Used for downloading template files from S3 storage.
     * @param templateId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesTemplateIdPresignedUrlGetAsync(@javax.annotation.Nonnull String templateId, final ApiCallback<TemplatesTemplateIdPresignedUrlGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatesTemplateIdPresignedUrlGetValidateBeforeCall(templateId, _callback);
        Type localVarReturnType = new TypeToken<TemplatesTemplateIdPresignedUrlGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templatesTemplateIdPut
     * @param templateId  (required)
     * @param templatesTemplateIdPutRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesTemplateIdPutCall(@javax.annotation.Nonnull String templateId, @javax.annotation.Nullable TemplatesTemplateIdPutRequest templatesTemplateIdPutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = templatesTemplateIdPutRequest;

        // create path and map variables
        String localVarPath = "/templates/{templateId}"
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatesTemplateIdPutValidateBeforeCall(@javax.annotation.Nonnull String templateId, @javax.annotation.Nullable TemplatesTemplateIdPutRequest templatesTemplateIdPutRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling templatesTemplateIdPut(Async)");
        }

        return templatesTemplateIdPutCall(templateId, templatesTemplateIdPutRequest, _callback);

    }

    /**
     * Update Template
     * Updates template content, handles S3 storage cleanup for old content, updates template metadata in Strapi, and manages preview files. Removes unfinished tags after successful update.
     * @param templateId  (required)
     * @param templatesTemplateIdPutRequest  (optional)
     * @return TemplatesTemplateIdPut200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public TemplatesTemplateIdPut200Response templatesTemplateIdPut(@javax.annotation.Nonnull String templateId, @javax.annotation.Nullable TemplatesTemplateIdPutRequest templatesTemplateIdPutRequest) throws ApiException {
        ApiResponse<TemplatesTemplateIdPut200Response> localVarResp = templatesTemplateIdPutWithHttpInfo(templateId, templatesTemplateIdPutRequest);
        return localVarResp.getData();
    }

    /**
     * Update Template
     * Updates template content, handles S3 storage cleanup for old content, updates template metadata in Strapi, and manages preview files. Removes unfinished tags after successful update.
     * @param templateId  (required)
     * @param templatesTemplateIdPutRequest  (optional)
     * @return ApiResponse&lt;TemplatesTemplateIdPut200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplatesTemplateIdPut200Response> templatesTemplateIdPutWithHttpInfo(@javax.annotation.Nonnull String templateId, @javax.annotation.Nullable TemplatesTemplateIdPutRequest templatesTemplateIdPutRequest) throws ApiException {
        okhttp3.Call localVarCall = templatesTemplateIdPutValidateBeforeCall(templateId, templatesTemplateIdPutRequest, null);
        Type localVarReturnType = new TypeToken<TemplatesTemplateIdPut200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Template (asynchronously)
     * Updates template content, handles S3 storage cleanup for old content, updates template metadata in Strapi, and manages preview files. Removes unfinished tags after successful update.
     * @param templateId  (required)
     * @param templatesTemplateIdPutRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesTemplateIdPutAsync(@javax.annotation.Nonnull String templateId, @javax.annotation.Nullable TemplatesTemplateIdPutRequest templatesTemplateIdPutRequest, final ApiCallback<TemplatesTemplateIdPut200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatesTemplateIdPutValidateBeforeCall(templateId, templatesTemplateIdPutRequest, _callback);
        Type localVarReturnType = new TypeToken<TemplatesTemplateIdPut200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templatesTemplateIdRenderPreviewsPost
     * @param templateId  (required)
     * @param templatesTemplateIdRenderPreviewsPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesTemplateIdRenderPreviewsPostCall(@javax.annotation.Nonnull String templateId, @javax.annotation.Nonnull TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = templatesTemplateIdRenderPreviewsPostRequest;

        // create path and map variables
        String localVarPath = "/templates/{templateId}/render-previews"
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatesTemplateIdRenderPreviewsPostValidateBeforeCall(@javax.annotation.Nonnull String templateId, @javax.annotation.Nonnull TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling templatesTemplateIdRenderPreviewsPost(Async)");
        }

        // verify the required parameter 'templatesTemplateIdRenderPreviewsPostRequest' is set
        if (templatesTemplateIdRenderPreviewsPostRequest == null) {
            throw new ApiException("Missing the required parameter 'templatesTemplateIdRenderPreviewsPostRequest' when calling templatesTemplateIdRenderPreviewsPost(Async)");
        }

        return templatesTemplateIdRenderPreviewsPostCall(templateId, templatesTemplateIdRenderPreviewsPostRequest, _callback);

    }

    /**
     * Generate Template Previews
     * Creates both PNG and PDF preview files for template visualization. Generates previews in parallel and returns URLs for both formats.
     * @param templateId  (required)
     * @param templatesTemplateIdRenderPreviewsPostRequest  (required)
     * @return TemplatesTemplateIdRenderPreviewsPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public TemplatesTemplateIdRenderPreviewsPost200Response templatesTemplateIdRenderPreviewsPost(@javax.annotation.Nonnull String templateId, @javax.annotation.Nonnull TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest) throws ApiException {
        ApiResponse<TemplatesTemplateIdRenderPreviewsPost200Response> localVarResp = templatesTemplateIdRenderPreviewsPostWithHttpInfo(templateId, templatesTemplateIdRenderPreviewsPostRequest);
        return localVarResp.getData();
    }

    /**
     * Generate Template Previews
     * Creates both PNG and PDF preview files for template visualization. Generates previews in parallel and returns URLs for both formats.
     * @param templateId  (required)
     * @param templatesTemplateIdRenderPreviewsPostRequest  (required)
     * @return ApiResponse&lt;TemplatesTemplateIdRenderPreviewsPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplatesTemplateIdRenderPreviewsPost200Response> templatesTemplateIdRenderPreviewsPostWithHttpInfo(@javax.annotation.Nonnull String templateId, @javax.annotation.Nonnull TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest) throws ApiException {
        okhttp3.Call localVarCall = templatesTemplateIdRenderPreviewsPostValidateBeforeCall(templateId, templatesTemplateIdRenderPreviewsPostRequest, null);
        Type localVarReturnType = new TypeToken<TemplatesTemplateIdRenderPreviewsPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate Template Previews (asynchronously)
     * Creates both PNG and PDF preview files for template visualization. Generates previews in parallel and returns URLs for both formats.
     * @param templateId  (required)
     * @param templatesTemplateIdRenderPreviewsPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesTemplateIdRenderPreviewsPostAsync(@javax.annotation.Nonnull String templateId, @javax.annotation.Nonnull TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest, final ApiCallback<TemplatesTemplateIdRenderPreviewsPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatesTemplateIdRenderPreviewsPostValidateBeforeCall(templateId, templatesTemplateIdRenderPreviewsPostRequest, _callback);
        Type localVarReturnType = new TypeToken<TemplatesTemplateIdRenderPreviewsPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templatesTemplateIdUnzipPost
     * @param templateId  (required)
     * @param templatesTemplateIdUnzipPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesTemplateIdUnzipPostCall(@javax.annotation.Nonnull String templateId, @javax.annotation.Nonnull TemplatesTemplateIdUnzipPostRequest templatesTemplateIdUnzipPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = templatesTemplateIdUnzipPostRequest;

        // create path and map variables
        String localVarPath = "/templates/{templateId}/unzip"
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatesTemplateIdUnzipPostValidateBeforeCall(@javax.annotation.Nonnull String templateId, @javax.annotation.Nonnull TemplatesTemplateIdUnzipPostRequest templatesTemplateIdUnzipPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling templatesTemplateIdUnzipPost(Async)");
        }

        // verify the required parameter 'templatesTemplateIdUnzipPostRequest' is set
        if (templatesTemplateIdUnzipPostRequest == null) {
            throw new ApiException("Missing the required parameter 'templatesTemplateIdUnzipPostRequest' when calling templatesTemplateIdUnzipPost(Async)");
        }

        return templatesTemplateIdUnzipPostCall(templateId, templatesTemplateIdUnzipPostRequest, _callback);

    }

    /**
     * Extract Template Files
     * Extracts contents from an uploaded template ZIP file and stores individual files in the appropriate S3 storage structure.
     * @param templateId  (required)
     * @param templatesTemplateIdUnzipPostRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public Object templatesTemplateIdUnzipPost(@javax.annotation.Nonnull String templateId, @javax.annotation.Nonnull TemplatesTemplateIdUnzipPostRequest templatesTemplateIdUnzipPostRequest) throws ApiException {
        ApiResponse<Object> localVarResp = templatesTemplateIdUnzipPostWithHttpInfo(templateId, templatesTemplateIdUnzipPostRequest);
        return localVarResp.getData();
    }

    /**
     * Extract Template Files
     * Extracts contents from an uploaded template ZIP file and stores individual files in the appropriate S3 storage structure.
     * @param templateId  (required)
     * @param templatesTemplateIdUnzipPostRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> templatesTemplateIdUnzipPostWithHttpInfo(@javax.annotation.Nonnull String templateId, @javax.annotation.Nonnull TemplatesTemplateIdUnzipPostRequest templatesTemplateIdUnzipPostRequest) throws ApiException {
        okhttp3.Call localVarCall = templatesTemplateIdUnzipPostValidateBeforeCall(templateId, templatesTemplateIdUnzipPostRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Extract Template Files (asynchronously)
     * Extracts contents from an uploaded template ZIP file and stores individual files in the appropriate S3 storage structure.
     * @param templateId  (required)
     * @param templatesTemplateIdUnzipPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesTemplateIdUnzipPostAsync(@javax.annotation.Nonnull String templateId, @javax.annotation.Nonnull TemplatesTemplateIdUnzipPostRequest templatesTemplateIdUnzipPostRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatesTemplateIdUnzipPostValidateBeforeCall(templateId, templatesTemplateIdUnzipPostRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
