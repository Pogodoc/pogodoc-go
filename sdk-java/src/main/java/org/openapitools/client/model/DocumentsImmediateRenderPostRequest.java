/*
 * Pogodoc API
 * API for Pogodoc document and template management service. Provides endpoints for rendering documents, managing templates, generating previews, and handling API tokens.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.DocumentsInitPostRequestAllOfTarget;
import org.openapitools.client.model.TemplatesTemplateIdPutRequestAllOfTemplateInfoType;
import org.openapitools.client.model.TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DocumentsImmediateRenderPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-02T10:51:10.425208+02:00[Europe/Skopje]", comments = "Generator version: 7.13.0")
public class DocumentsImmediateRenderPostRequest {
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  @javax.annotation.Nonnull
  private Map<String, Object> data = new HashMap<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private TemplatesTemplateIdPutRequestAllOfTemplateInfoType type;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  @javax.annotation.Nonnull
  private DocumentsInitPostRequestAllOfTarget target;

  public static final String SERIALIZED_NAME_TEMPLATE_ID = "templateId";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  @javax.annotation.Nullable
  private String templateId;

  public static final String SERIALIZED_NAME_FORMAT_OPTS = "formatOpts";
  @SerializedName(SERIALIZED_NAME_FORMAT_OPTS)
  @javax.annotation.Nullable
  private TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts formatOpts;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  @javax.annotation.Nullable
  private String template;

  public DocumentsImmediateRenderPostRequest() {
  }

  public DocumentsImmediateRenderPostRequest data(@javax.annotation.Nonnull Map<String, Object> data) {
    this.data = data;
    return this;
  }

  public DocumentsImmediateRenderPostRequest putDataItem(String key, Object dataItem) {
    if (this.data == null) {
      this.data = new HashMap<>();
    }
    this.data.put(key, dataItem);
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nonnull
  public Map<String, Object> getData() {
    return data;
  }

  public void setData(@javax.annotation.Nonnull Map<String, Object> data) {
    this.data = data;
  }


  public DocumentsImmediateRenderPostRequest type(@javax.annotation.Nonnull TemplatesTemplateIdPutRequestAllOfTemplateInfoType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TemplatesTemplateIdPutRequestAllOfTemplateInfoType getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull TemplatesTemplateIdPutRequestAllOfTemplateInfoType type) {
    this.type = type;
  }


  public DocumentsImmediateRenderPostRequest target(@javax.annotation.Nonnull DocumentsInitPostRequestAllOfTarget target) {
    this.target = target;
    return this;
  }

  /**
   * Get target
   * @return target
   */
  @javax.annotation.Nonnull
  public DocumentsInitPostRequestAllOfTarget getTarget() {
    return target;
  }

  public void setTarget(@javax.annotation.Nonnull DocumentsInitPostRequestAllOfTarget target) {
    this.target = target;
  }


  public DocumentsImmediateRenderPostRequest templateId(@javax.annotation.Nullable String templateId) {
    this.templateId = templateId;
    return this;
  }

  /**
   * Get templateId
   * @return templateId
   */
  @javax.annotation.Nullable
  public String getTemplateId() {
    return templateId;
  }

  public void setTemplateId(@javax.annotation.Nullable String templateId) {
    this.templateId = templateId;
  }


  public DocumentsImmediateRenderPostRequest formatOpts(@javax.annotation.Nullable TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts formatOpts) {
    this.formatOpts = formatOpts;
    return this;
  }

  /**
   * Get formatOpts
   * @return formatOpts
   */
  @javax.annotation.Nullable
  public TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts getFormatOpts() {
    return formatOpts;
  }

  public void setFormatOpts(@javax.annotation.Nullable TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts formatOpts) {
    this.formatOpts = formatOpts;
  }


  public DocumentsImmediateRenderPostRequest template(@javax.annotation.Nullable String template) {
    this.template = template;
    return this;
  }

  /**
   * Get template
   * @return template
   */
  @javax.annotation.Nullable
  public String getTemplate() {
    return template;
  }

  public void setTemplate(@javax.annotation.Nullable String template) {
    this.template = template;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentsImmediateRenderPostRequest documentsImmediateRenderPostRequest = (DocumentsImmediateRenderPostRequest) o;
    return Objects.equals(this.data, documentsImmediateRenderPostRequest.data) &&
        Objects.equals(this.type, documentsImmediateRenderPostRequest.type) &&
        Objects.equals(this.target, documentsImmediateRenderPostRequest.target) &&
        Objects.equals(this.templateId, documentsImmediateRenderPostRequest.templateId) &&
        Objects.equals(this.formatOpts, documentsImmediateRenderPostRequest.formatOpts) &&
        Objects.equals(this.template, documentsImmediateRenderPostRequest.template);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, type, target, templateId, formatOpts, template);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentsImmediateRenderPostRequest {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    formatOpts: ").append(toIndentedString(formatOpts)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data");
    openapiFields.add("type");
    openapiFields.add("target");
    openapiFields.add("templateId");
    openapiFields.add("formatOpts");
    openapiFields.add("template");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("data");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("target");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentsImmediateRenderPostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentsImmediateRenderPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentsImmediateRenderPostRequest is not found in the empty JSON string", DocumentsImmediateRenderPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocumentsImmediateRenderPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentsImmediateRenderPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DocumentsImmediateRenderPostRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `type`
      TemplatesTemplateIdPutRequestAllOfTemplateInfoType.validateJsonElement(jsonObj.get("type"));
      // validate the required field `target`
      DocumentsInitPostRequestAllOfTarget.validateJsonElement(jsonObj.get("target"));
      if ((jsonObj.get("templateId") != null && !jsonObj.get("templateId").isJsonNull()) && !jsonObj.get("templateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateId").toString()));
      }
      // validate the optional field `formatOpts`
      if (jsonObj.get("formatOpts") != null && !jsonObj.get("formatOpts").isJsonNull()) {
        TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts.validateJsonElement(jsonObj.get("formatOpts"));
      }
      if ((jsonObj.get("template") != null && !jsonObj.get("template").isJsonNull()) && !jsonObj.get("template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentsImmediateRenderPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentsImmediateRenderPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentsImmediateRenderPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentsImmediateRenderPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentsImmediateRenderPostRequest>() {
           @Override
           public void write(JsonWriter out, DocumentsImmediateRenderPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentsImmediateRenderPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentsImmediateRenderPostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentsImmediateRenderPostRequest
   * @throws IOException if the JSON string is invalid with respect to DocumentsImmediateRenderPostRequest
   */
  public static DocumentsImmediateRenderPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentsImmediateRenderPostRequest.class);
  }

  /**
   * Convert an instance of DocumentsImmediateRenderPostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

