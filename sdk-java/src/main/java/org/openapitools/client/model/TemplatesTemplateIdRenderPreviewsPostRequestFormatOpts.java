/*
 * Pogodoc API
 * API for Pogodoc document and template management service. Provides endpoints for rendering documents, managing templates, generating previews, and handling API tokens.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.TemplatesTemplateIdRenderPreviewsPostRequestFormatOptsAllOfFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-02T10:51:10.425208+02:00[Europe/Skopje]", comments = "Generator version: 7.13.0")
public class TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts {
  public static final String SERIALIZED_NAME_FROM_PAGE = "fromPage";
  @SerializedName(SERIALIZED_NAME_FROM_PAGE)
  @javax.annotation.Nullable
  private BigDecimal fromPage;

  public static final String SERIALIZED_NAME_TO_PAGE = "toPage";
  @SerializedName(SERIALIZED_NAME_TO_PAGE)
  @javax.annotation.Nullable
  private BigDecimal toPage;

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  @javax.annotation.Nullable
  private TemplatesTemplateIdRenderPreviewsPostRequestFormatOptsAllOfFormat format;

  public static final String SERIALIZED_NAME_WAIT_FOR_SELECTOR = "waitForSelector";
  @SerializedName(SERIALIZED_NAME_WAIT_FOR_SELECTOR)
  @javax.annotation.Nullable
  private String waitForSelector;

  public TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts() {
  }

  public TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts fromPage(@javax.annotation.Nullable BigDecimal fromPage) {
    this.fromPage = fromPage;
    return this;
  }

  /**
   * Get fromPage
   * @return fromPage
   */
  @javax.annotation.Nullable
  public BigDecimal getFromPage() {
    return fromPage;
  }

  public void setFromPage(@javax.annotation.Nullable BigDecimal fromPage) {
    this.fromPage = fromPage;
  }


  public TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts toPage(@javax.annotation.Nullable BigDecimal toPage) {
    this.toPage = toPage;
    return this;
  }

  /**
   * Get toPage
   * @return toPage
   */
  @javax.annotation.Nullable
  public BigDecimal getToPage() {
    return toPage;
  }

  public void setToPage(@javax.annotation.Nullable BigDecimal toPage) {
    this.toPage = toPage;
  }


  public TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts format(@javax.annotation.Nullable TemplatesTemplateIdRenderPreviewsPostRequestFormatOptsAllOfFormat format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public TemplatesTemplateIdRenderPreviewsPostRequestFormatOptsAllOfFormat getFormat() {
    return format;
  }

  public void setFormat(@javax.annotation.Nullable TemplatesTemplateIdRenderPreviewsPostRequestFormatOptsAllOfFormat format) {
    this.format = format;
  }


  public TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts waitForSelector(@javax.annotation.Nullable String waitForSelector) {
    this.waitForSelector = waitForSelector;
    return this;
  }

  /**
   * Get waitForSelector
   * @return waitForSelector
   */
  @javax.annotation.Nullable
  public String getWaitForSelector() {
    return waitForSelector;
  }

  public void setWaitForSelector(@javax.annotation.Nullable String waitForSelector) {
    this.waitForSelector = waitForSelector;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts templatesTemplateIdRenderPreviewsPostRequestFormatOpts = (TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts) o;
    return Objects.equals(this.fromPage, templatesTemplateIdRenderPreviewsPostRequestFormatOpts.fromPage) &&
        Objects.equals(this.toPage, templatesTemplateIdRenderPreviewsPostRequestFormatOpts.toPage) &&
        Objects.equals(this.format, templatesTemplateIdRenderPreviewsPostRequestFormatOpts.format) &&
        Objects.equals(this.waitForSelector, templatesTemplateIdRenderPreviewsPostRequestFormatOpts.waitForSelector);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fromPage, toPage, format, waitForSelector);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts {\n");
    sb.append("    fromPage: ").append(toIndentedString(fromPage)).append("\n");
    sb.append("    toPage: ").append(toIndentedString(toPage)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    waitForSelector: ").append(toIndentedString(waitForSelector)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fromPage");
    openapiFields.add("toPage");
    openapiFields.add("format");
    openapiFields.add("waitForSelector");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts is not found in the empty JSON string", TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `format`
      if (jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) {
        TemplatesTemplateIdRenderPreviewsPostRequestFormatOptsAllOfFormat.validateJsonElement(jsonObj.get("format"));
      }
      if ((jsonObj.get("waitForSelector") != null && !jsonObj.get("waitForSelector").isJsonNull()) && !jsonObj.get("waitForSelector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `waitForSelector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("waitForSelector").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts.class));

       return (TypeAdapter<T>) new TypeAdapter<TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts>() {
           @Override
           public void write(JsonWriter out, TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts
   * @throws IOException if the JSON string is invalid with respect to TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts
   */
  public static TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts.class);
  }

  /**
   * Convert an instance of TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

