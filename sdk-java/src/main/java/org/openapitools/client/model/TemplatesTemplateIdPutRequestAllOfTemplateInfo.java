/*
 * Pogodoc API
 * API for Pogodoc document and template management service. Provides endpoints for rendering documents, managing templates, generating previews, and handling API tokens.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.TemplatesTemplateIdPutRequestAllOfTemplateInfoCategoriesInner;
import org.openapitools.client.model.TemplatesTemplateIdPutRequestAllOfTemplateInfoType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TemplatesTemplateIdPutRequestAllOfTemplateInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-02T10:51:10.425208+02:00[Europe/Skopje]", comments = "Generator version: 7.13.0")
public class TemplatesTemplateIdPutRequestAllOfTemplateInfo {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  @javax.annotation.Nonnull
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nonnull
  private String description;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private TemplatesTemplateIdPutRequestAllOfTemplateInfoType type;

  public static final String SERIALIZED_NAME_SAMPLE_DATA = "sampleData";
  @SerializedName(SERIALIZED_NAME_SAMPLE_DATA)
  @javax.annotation.Nonnull
  private Map<String, Object> sampleData = new HashMap<>();

  public static final String SERIALIZED_NAME_SOURCE_CODE = "sourceCode";
  @SerializedName(SERIALIZED_NAME_SOURCE_CODE)
  @javax.annotation.Nullable
  private String sourceCode;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  @javax.annotation.Nonnull
  private List<TemplatesTemplateIdPutRequestAllOfTemplateInfoCategoriesInner> categories = new ArrayList<>();

  public TemplatesTemplateIdPutRequestAllOfTemplateInfo() {
  }

  public TemplatesTemplateIdPutRequestAllOfTemplateInfo title(@javax.annotation.Nonnull String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(@javax.annotation.Nonnull String title) {
    this.title = title;
  }


  public TemplatesTemplateIdPutRequestAllOfTemplateInfo description(@javax.annotation.Nonnull String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nonnull String description) {
    this.description = description;
  }


  public TemplatesTemplateIdPutRequestAllOfTemplateInfo type(@javax.annotation.Nonnull TemplatesTemplateIdPutRequestAllOfTemplateInfoType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TemplatesTemplateIdPutRequestAllOfTemplateInfoType getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull TemplatesTemplateIdPutRequestAllOfTemplateInfoType type) {
    this.type = type;
  }


  public TemplatesTemplateIdPutRequestAllOfTemplateInfo sampleData(@javax.annotation.Nonnull Map<String, Object> sampleData) {
    this.sampleData = sampleData;
    return this;
  }

  public TemplatesTemplateIdPutRequestAllOfTemplateInfo putSampleDataItem(String key, Object sampleDataItem) {
    if (this.sampleData == null) {
      this.sampleData = new HashMap<>();
    }
    this.sampleData.put(key, sampleDataItem);
    return this;
  }

  /**
   * Get sampleData
   * @return sampleData
   */
  @javax.annotation.Nonnull
  public Map<String, Object> getSampleData() {
    return sampleData;
  }

  public void setSampleData(@javax.annotation.Nonnull Map<String, Object> sampleData) {
    this.sampleData = sampleData;
  }


  public TemplatesTemplateIdPutRequestAllOfTemplateInfo sourceCode(@javax.annotation.Nullable String sourceCode) {
    this.sourceCode = sourceCode;
    return this;
  }

  /**
   * Get sourceCode
   * @return sourceCode
   */
  @javax.annotation.Nullable
  public String getSourceCode() {
    return sourceCode;
  }

  public void setSourceCode(@javax.annotation.Nullable String sourceCode) {
    this.sourceCode = sourceCode;
  }


  public TemplatesTemplateIdPutRequestAllOfTemplateInfo categories(@javax.annotation.Nonnull List<TemplatesTemplateIdPutRequestAllOfTemplateInfoCategoriesInner> categories) {
    this.categories = categories;
    return this;
  }

  public TemplatesTemplateIdPutRequestAllOfTemplateInfo addCategoriesItem(TemplatesTemplateIdPutRequestAllOfTemplateInfoCategoriesInner categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * Get categories
   * @return categories
   */
  @javax.annotation.Nonnull
  public List<TemplatesTemplateIdPutRequestAllOfTemplateInfoCategoriesInner> getCategories() {
    return categories;
  }

  public void setCategories(@javax.annotation.Nonnull List<TemplatesTemplateIdPutRequestAllOfTemplateInfoCategoriesInner> categories) {
    this.categories = categories;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplatesTemplateIdPutRequestAllOfTemplateInfo templatesTemplateIdPutRequestAllOfTemplateInfo = (TemplatesTemplateIdPutRequestAllOfTemplateInfo) o;
    return Objects.equals(this.title, templatesTemplateIdPutRequestAllOfTemplateInfo.title) &&
        Objects.equals(this.description, templatesTemplateIdPutRequestAllOfTemplateInfo.description) &&
        Objects.equals(this.type, templatesTemplateIdPutRequestAllOfTemplateInfo.type) &&
        Objects.equals(this.sampleData, templatesTemplateIdPutRequestAllOfTemplateInfo.sampleData) &&
        Objects.equals(this.sourceCode, templatesTemplateIdPutRequestAllOfTemplateInfo.sourceCode) &&
        Objects.equals(this.categories, templatesTemplateIdPutRequestAllOfTemplateInfo.categories);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, type, sampleData, sourceCode, categories);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplatesTemplateIdPutRequestAllOfTemplateInfo {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    sampleData: ").append(toIndentedString(sampleData)).append("\n");
    sb.append("    sourceCode: ").append(toIndentedString(sourceCode)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("type");
    openapiFields.add("sampleData");
    openapiFields.add("sourceCode");
    openapiFields.add("categories");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("sampleData");
    openapiRequiredFields.add("categories");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TemplatesTemplateIdPutRequestAllOfTemplateInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TemplatesTemplateIdPutRequestAllOfTemplateInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TemplatesTemplateIdPutRequestAllOfTemplateInfo is not found in the empty JSON string", TemplatesTemplateIdPutRequestAllOfTemplateInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TemplatesTemplateIdPutRequestAllOfTemplateInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TemplatesTemplateIdPutRequestAllOfTemplateInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TemplatesTemplateIdPutRequestAllOfTemplateInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `type`
      TemplatesTemplateIdPutRequestAllOfTemplateInfoType.validateJsonElement(jsonObj.get("type"));
      if ((jsonObj.get("sourceCode") != null && !jsonObj.get("sourceCode").isJsonNull()) && !jsonObj.get("sourceCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceCode").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }

      JsonArray jsonArraycategories = jsonObj.getAsJsonArray("categories");
      // validate the required field `categories` (array)
      for (int i = 0; i < jsonArraycategories.size(); i++) {
        TemplatesTemplateIdPutRequestAllOfTemplateInfoCategoriesInner.validateJsonElement(jsonArraycategories.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TemplatesTemplateIdPutRequestAllOfTemplateInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TemplatesTemplateIdPutRequestAllOfTemplateInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TemplatesTemplateIdPutRequestAllOfTemplateInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TemplatesTemplateIdPutRequestAllOfTemplateInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<TemplatesTemplateIdPutRequestAllOfTemplateInfo>() {
           @Override
           public void write(JsonWriter out, TemplatesTemplateIdPutRequestAllOfTemplateInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TemplatesTemplateIdPutRequestAllOfTemplateInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TemplatesTemplateIdPutRequestAllOfTemplateInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TemplatesTemplateIdPutRequestAllOfTemplateInfo
   * @throws IOException if the JSON string is invalid with respect to TemplatesTemplateIdPutRequestAllOfTemplateInfo
   */
  public static TemplatesTemplateIdPutRequestAllOfTemplateInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TemplatesTemplateIdPutRequestAllOfTemplateInfo.class);
  }

  /**
   * Convert an instance of TemplatesTemplateIdPutRequestAllOfTemplateInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

