/*
 * Pogodoc API
 * API for Pogodoc document and template management service. Provides endpoints for rendering documents, managing templates, generating previews, and handling API tokens.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DocumentsJobIdRenderPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-02T10:51:10.425208+02:00[Europe/Skopje]", comments = "Generator version: 7.13.0")
public class DocumentsJobIdRenderPostRequest {
  public static final String SERIALIZED_NAME_SHOULD_WAIT_FOR_RENDER_COMPLETION = "shouldWaitForRenderCompletion";
  @SerializedName(SERIALIZED_NAME_SHOULD_WAIT_FOR_RENDER_COMPLETION)
  @javax.annotation.Nullable
  private Boolean shouldWaitForRenderCompletion;

  public static final String SERIALIZED_NAME_UPLOAD_PRESIGNED_S3_URL = "uploadPresignedS3Url";
  @SerializedName(SERIALIZED_NAME_UPLOAD_PRESIGNED_S3_URL)
  @javax.annotation.Nullable
  private String uploadPresignedS3Url;

  public DocumentsJobIdRenderPostRequest() {
  }

  public DocumentsJobIdRenderPostRequest shouldWaitForRenderCompletion(@javax.annotation.Nullable Boolean shouldWaitForRenderCompletion) {
    this.shouldWaitForRenderCompletion = shouldWaitForRenderCompletion;
    return this;
  }

  /**
   * Get shouldWaitForRenderCompletion
   * @return shouldWaitForRenderCompletion
   */
  @javax.annotation.Nullable
  public Boolean getShouldWaitForRenderCompletion() {
    return shouldWaitForRenderCompletion;
  }

  public void setShouldWaitForRenderCompletion(@javax.annotation.Nullable Boolean shouldWaitForRenderCompletion) {
    this.shouldWaitForRenderCompletion = shouldWaitForRenderCompletion;
  }


  public DocumentsJobIdRenderPostRequest uploadPresignedS3Url(@javax.annotation.Nullable String uploadPresignedS3Url) {
    this.uploadPresignedS3Url = uploadPresignedS3Url;
    return this;
  }

  /**
   * Get uploadPresignedS3Url
   * @return uploadPresignedS3Url
   */
  @javax.annotation.Nullable
  public String getUploadPresignedS3Url() {
    return uploadPresignedS3Url;
  }

  public void setUploadPresignedS3Url(@javax.annotation.Nullable String uploadPresignedS3Url) {
    this.uploadPresignedS3Url = uploadPresignedS3Url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentsJobIdRenderPostRequest documentsJobIdRenderPostRequest = (DocumentsJobIdRenderPostRequest) o;
    return Objects.equals(this.shouldWaitForRenderCompletion, documentsJobIdRenderPostRequest.shouldWaitForRenderCompletion) &&
        Objects.equals(this.uploadPresignedS3Url, documentsJobIdRenderPostRequest.uploadPresignedS3Url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(shouldWaitForRenderCompletion, uploadPresignedS3Url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentsJobIdRenderPostRequest {\n");
    sb.append("    shouldWaitForRenderCompletion: ").append(toIndentedString(shouldWaitForRenderCompletion)).append("\n");
    sb.append("    uploadPresignedS3Url: ").append(toIndentedString(uploadPresignedS3Url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("shouldWaitForRenderCompletion");
    openapiFields.add("uploadPresignedS3Url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentsJobIdRenderPostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentsJobIdRenderPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentsJobIdRenderPostRequest is not found in the empty JSON string", DocumentsJobIdRenderPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocumentsJobIdRenderPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentsJobIdRenderPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("uploadPresignedS3Url") != null && !jsonObj.get("uploadPresignedS3Url").isJsonNull()) && !jsonObj.get("uploadPresignedS3Url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uploadPresignedS3Url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uploadPresignedS3Url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentsJobIdRenderPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentsJobIdRenderPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentsJobIdRenderPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentsJobIdRenderPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentsJobIdRenderPostRequest>() {
           @Override
           public void write(JsonWriter out, DocumentsJobIdRenderPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentsJobIdRenderPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentsJobIdRenderPostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentsJobIdRenderPostRequest
   * @throws IOException if the JSON string is invalid with respect to DocumentsJobIdRenderPostRequest
   */
  public static DocumentsJobIdRenderPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentsJobIdRenderPostRequest.class);
  }

  /**
   * Convert an instance of DocumentsJobIdRenderPostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

