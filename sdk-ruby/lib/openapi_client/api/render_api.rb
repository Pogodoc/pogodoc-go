=begin
#Pogodoc API

#API for Pogodoc document and template management service. Provides endpoints for rendering documents, managing templates, generating previews, and handling API tokens.

The version of the OpenAPI document: 0.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'cgi'

module OpenapiClient
  class RenderApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Immediate Render
    # Combines initialization and rendering in one step. Creates a job, uploads template/data directly, starts rendering, and adds the document to Strapi. Requires subscription check.
    # @param [Hash] opts the optional parameters
    # @option opts [DocumentsImmediateRenderPostRequest] :documents_immediate_render_post_request 
    # @return [DocumentsImmediateRenderPost200Response]
    def documents_immediate_render_post(opts = {})
      data, _status_code, _headers = documents_immediate_render_post_with_http_info(opts)
      data
    end

    # Immediate Render
    # Combines initialization and rendering in one step. Creates a job, uploads template/data directly, starts rendering, and adds the document to Strapi. Requires subscription check.
    # @param [Hash] opts the optional parameters
    # @option opts [DocumentsImmediateRenderPostRequest] :documents_immediate_render_post_request 
    # @return [Array<(DocumentsImmediateRenderPost200Response, Integer, Hash)>] DocumentsImmediateRenderPost200Response data, response status code and response headers
    def documents_immediate_render_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RenderApi.documents_immediate_render_post ...'
      end
      # resource path
      local_var_path = '/documents/immediate-render'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'documents_immediate_render_post_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentsImmediateRenderPost200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"RenderApi.documents_immediate_render_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RenderApi#documents_immediate_render_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initialize Render Job
    # Creates a new render job with a unique ID, sets up S3 storage for template and data files, and generates presigned upload URLs if needed. Requires subscription check.
    # @param [Hash] opts the optional parameters
    # @option opts [DocumentsInitPostRequest] :documents_init_post_request 
    # @return [DocumentsInitPost200Response]
    def documents_init_post(opts = {})
      data, _status_code, _headers = documents_init_post_with_http_info(opts)
      data
    end

    # Initialize Render Job
    # Creates a new render job with a unique ID, sets up S3 storage for template and data files, and generates presigned upload URLs if needed. Requires subscription check.
    # @param [Hash] opts the optional parameters
    # @option opts [DocumentsInitPostRequest] :documents_init_post_request 
    # @return [Array<(DocumentsInitPost200Response, Integer, Hash)>] DocumentsInitPost200Response data, response status code and response headers
    def documents_init_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RenderApi.documents_init_post ...'
      end
      # resource path
      local_var_path = '/documents/init'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'documents_init_post_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentsInitPost200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"RenderApi.documents_init_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RenderApi#documents_init_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start Render Job
    # Takes a previously initialized job, updates its status to in-progress, and triggers the rendering process using Puppeteer. Can optionally wait for render completion.
    # @param job_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [DocumentsJobIdRenderPostRequest] :documents_job_id_render_post_request 
    # @return [DocumentsJobIdRenderPost200Response]
    def documents_job_id_render_post(job_id, opts = {})
      data, _status_code, _headers = documents_job_id_render_post_with_http_info(job_id, opts)
      data
    end

    # Start Render Job
    # Takes a previously initialized job, updates its status to in-progress, and triggers the rendering process using Puppeteer. Can optionally wait for render completion.
    # @param job_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [DocumentsJobIdRenderPostRequest] :documents_job_id_render_post_request 
    # @return [Array<(DocumentsJobIdRenderPost200Response, Integer, Hash)>] DocumentsJobIdRenderPost200Response data, response status code and response headers
    def documents_job_id_render_post_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RenderApi.documents_job_id_render_post ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling RenderApi.documents_job_id_render_post"
      end
      # resource path
      local_var_path = '/documents/{jobId}/render'.sub('{' + 'jobId' + '}', CGI.escape(job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'documents_job_id_render_post_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'DocumentsJobIdRenderPost200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"RenderApi.documents_job_id_render_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RenderApi#documents_job_id_render_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate Document Preview
    # Generates a preview by creating a single-page render job, processing it immediately, and returning the output URL. Used for template visualization.
    # @param template_id [String] 
    # @param templates_template_id_render_previews_post_request [TemplatesTemplateIdRenderPreviewsPostRequest] 
    # @param [Hash] opts the optional parameters
    # @return [TemplatesTemplateIdRenderPreviewsPost200ResponsePngPreview]
    def documents_render_preview_post(template_id, templates_template_id_render_previews_post_request, opts = {})
      data, _status_code, _headers = documents_render_preview_post_with_http_info(template_id, templates_template_id_render_previews_post_request, opts)
      data
    end

    # Generate Document Preview
    # Generates a preview by creating a single-page render job, processing it immediately, and returning the output URL. Used for template visualization.
    # @param template_id [String] 
    # @param templates_template_id_render_previews_post_request [TemplatesTemplateIdRenderPreviewsPostRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TemplatesTemplateIdRenderPreviewsPost200ResponsePngPreview, Integer, Hash)>] TemplatesTemplateIdRenderPreviewsPost200ResponsePngPreview data, response status code and response headers
    def documents_render_preview_post_with_http_info(template_id, templates_template_id_render_previews_post_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RenderApi.documents_render_preview_post ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling RenderApi.documents_render_preview_post"
      end
      # verify the required parameter 'templates_template_id_render_previews_post_request' is set
      if @api_client.config.client_side_validation && templates_template_id_render_previews_post_request.nil?
        fail ArgumentError, "Missing the required parameter 'templates_template_id_render_previews_post_request' when calling RenderApi.documents_render_preview_post"
      end
      # resource path
      local_var_path = '/documents/render-preview'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'templateId'] = template_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(templates_template_id_render_previews_post_request)

      # return_type
      return_type = opts[:debug_return_type] || 'TemplatesTemplateIdRenderPreviewsPost200ResponsePngPreview'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"RenderApi.documents_render_preview_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RenderApi#documents_render_preview_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Job Status
    # Fetches detailed job information from S3 storage including job status, template ID, target format, and output details if available.
    # @param job_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [JobsJobIdGet200Response]
    def jobs_job_id_get(job_id, opts = {})
      data, _status_code, _headers = jobs_job_id_get_with_http_info(job_id, opts)
      data
    end

    # Get Job Status
    # Fetches detailed job information from S3 storage including job status, template ID, target format, and output details if available.
    # @param job_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(JobsJobIdGet200Response, Integer, Hash)>] JobsJobIdGet200Response data, response status code and response headers
    def jobs_job_id_get_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RenderApi.jobs_job_id_get ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling RenderApi.jobs_job_id_get"
      end
      # resource path
      local_var_path = '/jobs/{jobId}'.sub('{' + 'jobId' + '}', CGI.escape(job_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JobsJobIdGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"RenderApi.jobs_job_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RenderApi#jobs_job_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
