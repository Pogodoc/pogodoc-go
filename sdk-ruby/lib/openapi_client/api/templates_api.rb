=begin
#Pogodoc API

#API for Pogodoc document and template management service. Provides endpoints for rendering documents, managing templates, generating previews, and handling API tokens.

The version of the OpenAPI document: 0.1.0

Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'cgi'

module OpenapiClient
  class TemplatesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Initialize Template Creation
    # Initializes template creation by generating a unique ID and providing a presigned URL for template ZIP upload. Sets unfinished tag for tracking incomplete templates.
    # @param [Hash] opts the optional parameters
    # @return [TemplatesInitGet200Response]
    def templates_init_get(opts = {})
      data, _status_code, _headers = templates_init_get_with_http_info(opts)
      data
    end

    # Initialize Template Creation
    # Initializes template creation by generating a unique ID and providing a presigned URL for template ZIP upload. Sets unfinished tag for tracking incomplete templates.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TemplatesInitGet200Response, Integer, Hash)>] TemplatesInitGet200Response data, response status code and response headers
    def templates_init_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.templates_init_get ...'
      end
      # resource path
      local_var_path = '/templates/init'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TemplatesInitGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"TemplatesApi.templates_init_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#templates_init_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clone Template
    # Creates a new template by duplicating an existing template's content and metadata. Includes copying preview files and template index.
    # @param template_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [TemplatesTemplateIdClonePost200Response]
    def templates_template_id_clone_post(template_id, opts = {})
      data, _status_code, _headers = templates_template_id_clone_post_with_http_info(template_id, opts)
      data
    end

    # Clone Template
    # Creates a new template by duplicating an existing template&#39;s content and metadata. Includes copying preview files and template index.
    # @param template_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TemplatesTemplateIdClonePost200Response, Integer, Hash)>] TemplatesTemplateIdClonePost200Response data, response status code and response headers
    def templates_template_id_clone_post_with_http_info(template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.templates_template_id_clone_post ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling TemplatesApi.templates_template_id_clone_post"
      end
      # resource path
      local_var_path = '/templates/{templateId}/clone'.sub('{' + 'templateId' + '}', CGI.escape(template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TemplatesTemplateIdClonePost200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"TemplatesApi.templates_template_id_clone_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#templates_template_id_clone_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Template
    # Deletes a template from Strapi and associated S3 storage. Removes all associated files and metadata.
    # @param template_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def templates_template_id_delete(template_id, opts = {})
      data, _status_code, _headers = templates_template_id_delete_with_http_info(template_id, opts)
      data
    end

    # Delete Template
    # Deletes a template from Strapi and associated S3 storage. Removes all associated files and metadata.
    # @param template_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def templates_template_id_delete_with_http_info(template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.templates_template_id_delete ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling TemplatesApi.templates_template_id_delete"
      end
      # resource path
      local_var_path = '/templates/{templateId}'.sub('{' + 'templateId' + '}', CGI.escape(template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"TemplatesApi.templates_template_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#templates_template_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Template Index HTML
    # Retrieves the template index.html file from S3 storage. Used for rendering the template in the browser.
    # @param template_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [TemplatesTemplateIdIndexHtmlGet200Response]
    def templates_template_id_index_html_get(template_id, opts = {})
      data, _status_code, _headers = templates_template_id_index_html_get_with_http_info(template_id, opts)
      data
    end

    # Get Template Index HTML
    # Retrieves the template index.html file from S3 storage. Used for rendering the template in the browser.
    # @param template_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TemplatesTemplateIdIndexHtmlGet200Response, Integer, Hash)>] TemplatesTemplateIdIndexHtmlGet200Response data, response status code and response headers
    def templates_template_id_index_html_get_with_http_info(template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.templates_template_id_index_html_get ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling TemplatesApi.templates_template_id_index_html_get"
      end
      # resource path
      local_var_path = '/templates/{templateId}/index-html'.sub('{' + 'templateId' + '}', CGI.escape(template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TemplatesTemplateIdIndexHtmlGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"TemplatesApi.templates_template_id_index_html_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#templates_template_id_index_html_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload Template Index HTML
    # Uploads the template index.html file to S3 storage. Used for rendering the template in the browser.
    # @param template_id [String] 
    # @param templates_template_id_index_html_get200_response [TemplatesTemplateIdIndexHtmlGet200Response] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def templates_template_id_index_html_post(template_id, templates_template_id_index_html_get200_response, opts = {})
      data, _status_code, _headers = templates_template_id_index_html_post_with_http_info(template_id, templates_template_id_index_html_get200_response, opts)
      data
    end

    # Upload Template Index HTML
    # Uploads the template index.html file to S3 storage. Used for rendering the template in the browser.
    # @param template_id [String] 
    # @param templates_template_id_index_html_get200_response [TemplatesTemplateIdIndexHtmlGet200Response] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def templates_template_id_index_html_post_with_http_info(template_id, templates_template_id_index_html_get200_response, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.templates_template_id_index_html_post ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling TemplatesApi.templates_template_id_index_html_post"
      end
      # verify the required parameter 'templates_template_id_index_html_get200_response' is set
      if @api_client.config.client_side_validation && templates_template_id_index_html_get200_response.nil?
        fail ArgumentError, "Missing the required parameter 'templates_template_id_index_html_get200_response' when calling TemplatesApi.templates_template_id_index_html_post"
      end
      # resource path
      local_var_path = '/templates/{templateId}/index-html'.sub('{' + 'templateId' + '}', CGI.escape(template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(templates_template_id_index_html_get200_response)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"TemplatesApi.templates_template_id_index_html_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#templates_template_id_index_html_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save New Template
    # Finalizes template creation by saving template info to Strapi, copying preview files to permanent storage, and creating template index. Removes unfinished tag upon completion.
    # @param template_id [String] 
    # @param templates_template_id_post_request [TemplatesTemplateIdPostRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def templates_template_id_post(template_id, templates_template_id_post_request, opts = {})
      data, _status_code, _headers = templates_template_id_post_with_http_info(template_id, templates_template_id_post_request, opts)
      data
    end

    # Save New Template
    # Finalizes template creation by saving template info to Strapi, copying preview files to permanent storage, and creating template index. Removes unfinished tag upon completion.
    # @param template_id [String] 
    # @param templates_template_id_post_request [TemplatesTemplateIdPostRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def templates_template_id_post_with_http_info(template_id, templates_template_id_post_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.templates_template_id_post ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling TemplatesApi.templates_template_id_post"
      end
      # verify the required parameter 'templates_template_id_post_request' is set
      if @api_client.config.client_side_validation && templates_template_id_post_request.nil?
        fail ArgumentError, "Missing the required parameter 'templates_template_id_post_request' when calling TemplatesApi.templates_template_id_post"
      end
      # resource path
      local_var_path = '/templates/{templateId}'.sub('{' + 'templateId' + '}', CGI.escape(template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(templates_template_id_post_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"TemplatesApi.templates_template_id_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#templates_template_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate Presigned URL
    # Generates a presigned URL for template access. Used for downloading template files from S3 storage.
    # @param template_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [TemplatesTemplateIdPresignedUrlGet200Response]
    def templates_template_id_presigned_url_get(template_id, opts = {})
      data, _status_code, _headers = templates_template_id_presigned_url_get_with_http_info(template_id, opts)
      data
    end

    # Generate Presigned URL
    # Generates a presigned URL for template access. Used for downloading template files from S3 storage.
    # @param template_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TemplatesTemplateIdPresignedUrlGet200Response, Integer, Hash)>] TemplatesTemplateIdPresignedUrlGet200Response data, response status code and response headers
    def templates_template_id_presigned_url_get_with_http_info(template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.templates_template_id_presigned_url_get ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling TemplatesApi.templates_template_id_presigned_url_get"
      end
      # resource path
      local_var_path = '/templates/{templateId}/presigned-url'.sub('{' + 'templateId' + '}', CGI.escape(template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TemplatesTemplateIdPresignedUrlGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"TemplatesApi.templates_template_id_presigned_url_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#templates_template_id_presigned_url_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Template
    # Updates template content, handles S3 storage cleanup for old content, updates template metadata in Strapi, and manages preview files. Removes unfinished tags after successful update.
    # @param template_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [TemplatesTemplateIdPutRequest] :templates_template_id_put_request 
    # @return [TemplatesTemplateIdPut200Response]
    def templates_template_id_put(template_id, opts = {})
      data, _status_code, _headers = templates_template_id_put_with_http_info(template_id, opts)
      data
    end

    # Update Template
    # Updates template content, handles S3 storage cleanup for old content, updates template metadata in Strapi, and manages preview files. Removes unfinished tags after successful update.
    # @param template_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [TemplatesTemplateIdPutRequest] :templates_template_id_put_request 
    # @return [Array<(TemplatesTemplateIdPut200Response, Integer, Hash)>] TemplatesTemplateIdPut200Response data, response status code and response headers
    def templates_template_id_put_with_http_info(template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.templates_template_id_put ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling TemplatesApi.templates_template_id_put"
      end
      # resource path
      local_var_path = '/templates/{templateId}'.sub('{' + 'templateId' + '}', CGI.escape(template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'templates_template_id_put_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'TemplatesTemplateIdPut200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"TemplatesApi.templates_template_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#templates_template_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate Template Previews
    # Creates both PNG and PDF preview files for template visualization. Generates previews in parallel and returns URLs for both formats.
    # @param template_id [String] 
    # @param templates_template_id_render_previews_post_request [TemplatesTemplateIdRenderPreviewsPostRequest] 
    # @param [Hash] opts the optional parameters
    # @return [TemplatesTemplateIdRenderPreviewsPost200Response]
    def templates_template_id_render_previews_post(template_id, templates_template_id_render_previews_post_request, opts = {})
      data, _status_code, _headers = templates_template_id_render_previews_post_with_http_info(template_id, templates_template_id_render_previews_post_request, opts)
      data
    end

    # Generate Template Previews
    # Creates both PNG and PDF preview files for template visualization. Generates previews in parallel and returns URLs for both formats.
    # @param template_id [String] 
    # @param templates_template_id_render_previews_post_request [TemplatesTemplateIdRenderPreviewsPostRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TemplatesTemplateIdRenderPreviewsPost200Response, Integer, Hash)>] TemplatesTemplateIdRenderPreviewsPost200Response data, response status code and response headers
    def templates_template_id_render_previews_post_with_http_info(template_id, templates_template_id_render_previews_post_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.templates_template_id_render_previews_post ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling TemplatesApi.templates_template_id_render_previews_post"
      end
      # verify the required parameter 'templates_template_id_render_previews_post_request' is set
      if @api_client.config.client_side_validation && templates_template_id_render_previews_post_request.nil?
        fail ArgumentError, "Missing the required parameter 'templates_template_id_render_previews_post_request' when calling TemplatesApi.templates_template_id_render_previews_post"
      end
      # resource path
      local_var_path = '/templates/{templateId}/render-previews'.sub('{' + 'templateId' + '}', CGI.escape(template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(templates_template_id_render_previews_post_request)

      # return_type
      return_type = opts[:debug_return_type] || 'TemplatesTemplateIdRenderPreviewsPost200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"TemplatesApi.templates_template_id_render_previews_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#templates_template_id_render_previews_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Extract Template Files
    # Extracts contents from an uploaded template ZIP file and stores individual files in the appropriate S3 storage structure.
    # @param template_id [String] 
    # @param templates_template_id_unzip_post_request [TemplatesTemplateIdUnzipPostRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def templates_template_id_unzip_post(template_id, templates_template_id_unzip_post_request, opts = {})
      data, _status_code, _headers = templates_template_id_unzip_post_with_http_info(template_id, templates_template_id_unzip_post_request, opts)
      data
    end

    # Extract Template Files
    # Extracts contents from an uploaded template ZIP file and stores individual files in the appropriate S3 storage structure.
    # @param template_id [String] 
    # @param templates_template_id_unzip_post_request [TemplatesTemplateIdUnzipPostRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def templates_template_id_unzip_post_with_http_info(template_id, templates_template_id_unzip_post_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.templates_template_id_unzip_post ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling TemplatesApi.templates_template_id_unzip_post"
      end
      # verify the required parameter 'templates_template_id_unzip_post_request' is set
      if @api_client.config.client_side_validation && templates_template_id_unzip_post_request.nil?
        fail ArgumentError, "Missing the required parameter 'templates_template_id_unzip_post_request' when calling TemplatesApi.templates_template_id_unzip_post"
      end
      # resource path
      local_var_path = '/templates/{templateId}/unzip'.sub('{' + 'templateId' + '}', CGI.escape(template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(templates_template_id_unzip_post_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"TemplatesApi.templates_template_id_unzip_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#templates_template_id_unzip_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
