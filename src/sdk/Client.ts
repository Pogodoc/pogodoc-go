/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments.js";
import * as core from "./core/index.js";
import urlJoin from "url-join";
import * as errors from "./errors/index.js";
import { Templates } from "./api/resources/templates/client/Client.js";
import { Documents } from "./api/resources/documents/client/Client.js";
import { Tokens } from "./api/resources/tokens/client/Client.js";

export declare namespace PogodocApiClient {
    export interface Options {
        environment?: core.Supplier<environments.PogodocApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class PogodocApiClient {
    protected _templates: Templates | undefined;
    protected _documents: Documents | undefined;
    protected _tokens: Tokens | undefined;

    constructor(protected readonly _options: PogodocApiClient.Options = {}) {}

    public get templates(): Templates {
        return (this._templates ??= new Templates(this._options));
    }

    public get documents(): Documents {
        return (this._documents ??= new Documents(this._options));
    }

    public get tokens(): Tokens {
        return (this._tokens ??= new Tokens(this._options));
    }

    /**
     * @param {PogodocApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.postBoshe()
     */
    public postBoshe(requestOptions?: PogodocApiClient.RequestOptions): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__postBoshe(requestOptions));
    }

    private async __postBoshe(requestOptions?: PogodocApiClient.RequestOptions): Promise<core.WithRawResponse<void>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PogodocApiEnvironment.Default,
                "boshe",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PogodocApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PogodocApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PogodocApiTimeoutError("Timeout exceeded when calling POST /boshe.");
            case "unknown":
                throw new errors.PogodocApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
