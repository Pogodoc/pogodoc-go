/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as PogodocApi from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Documents {
    export interface Options {
        environment?: core.Supplier<environments.PogodocApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Documents {
    constructor(protected readonly _options: Documents.Options) {}

    /**
     * Creates a new render job with a unique ID, sets up S3 storage for template and data files, and generates presigned upload URLs if needed. Requires subscription check.
     *
     * @param {PogodocApi.InitializeRenderJobRequest} request
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.documents.initializeRenderJob({
     *         type: "docx",
     *         target: "pdf"
     *     })
     */
    public async initializeRenderJob(
        request: PogodocApi.InitializeRenderJobRequest,
        requestOptions?: Documents.RequestOptions,
    ): Promise<PogodocApi.InitializeRenderJobResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PogodocApiEnvironment.Default,
                "documents/init",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.InitializeRenderJobRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.InitializeRenderJobResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PogodocApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PogodocApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PogodocApiTimeoutError("Timeout exceeded when calling POST /documents/init.");
            case "unknown":
                throw new errors.PogodocApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Takes a previously initialized job, updates its status to in-progress, and triggers the rendering process using Puppeteer. Can optionally wait for render completion.
     *
     * @param {string} jobId
     * @param {PogodocApi.StartRenderJobRequest} request
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.documents.startRenderJob("jobId")
     */
    public async startRenderJob(
        jobId: string,
        request: PogodocApi.StartRenderJobRequest = {},
        requestOptions?: Documents.RequestOptions,
    ): Promise<PogodocApi.StartRenderJobResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PogodocApiEnvironment.Default,
                `documents/${encodeURIComponent(jobId)}/render`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.StartRenderJobRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.StartRenderJobResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PogodocApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PogodocApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PogodocApiTimeoutError(
                    "Timeout exceeded when calling POST /documents/{jobId}/render.",
                );
            case "unknown":
                throw new errors.PogodocApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Generates a preview by creating a single-page render job, processing it immediately, and returning the output URL. Used for template visualization.
     *
     * @param {PogodocApi.GenerateDocumentPreviewRequest} request
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.documents.generateDocumentPreview({
     *         templateId: "templateId",
     *         type: "docx",
     *         data: {
     *             "key": "value"
     *         }
     *     })
     */
    public async generateDocumentPreview(
        request: PogodocApi.GenerateDocumentPreviewRequest,
        requestOptions?: Documents.RequestOptions,
    ): Promise<PogodocApi.GenerateDocumentPreviewResponse> {
        const { templateId, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["templateId"] = templateId;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PogodocApiEnvironment.Default,
                "documents/render-preview",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            body: serializers.GenerateDocumentPreviewRequest.jsonOrThrow(_body, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.GenerateDocumentPreviewResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PogodocApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PogodocApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PogodocApiTimeoutError(
                    "Timeout exceeded when calling POST /documents/render-preview.",
                );
            case "unknown":
                throw new errors.PogodocApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Combines initialization and rendering in one step. Creates a job, uploads template/data directly, starts rendering, and adds the document to Strapi. Requires subscription check.
     *
     * @param {PogodocApi.StartImmediateRenderRequest} request
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.documents.startImmediateRender({
     *         startImmediateRenderRequestData: {
     *             "key": "value"
     *         },
     *         type: "docx",
     *         target: "pdf"
     *     })
     */
    public async startImmediateRender(
        request: PogodocApi.StartImmediateRenderRequest,
        requestOptions?: Documents.RequestOptions,
    ): Promise<PogodocApi.StartImmediateRenderResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PogodocApiEnvironment.Default,
                "documents/immediate-render",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.StartImmediateRenderRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.StartImmediateRenderResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PogodocApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PogodocApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PogodocApiTimeoutError(
                    "Timeout exceeded when calling POST /documents/immediate-render.",
                );
            case "unknown":
                throw new errors.PogodocApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Fetches detailed job information from S3 storage including job status, template ID, target format, and output details if available.
     *
     * @param {string} jobId
     * @param {Documents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.documents.getJobStatus("jobId")
     */
    public async getJobStatus(
        jobId: string,
        requestOptions?: Documents.RequestOptions,
    ): Promise<PogodocApi.GetJobStatusResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PogodocApiEnvironment.Default,
                `jobs/${encodeURIComponent(jobId)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.GetJobStatusResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PogodocApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PogodocApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PogodocApiTimeoutError("Timeout exceeded when calling GET /jobs/{jobId}.");
            case "unknown":
                throw new errors.PogodocApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
