<?php
/**
 * TemplatesApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Pogodoc API
 *
 * API for Pogodoc document and template management service. Provides endpoints for rendering documents, managing templates, generating previews, and handling API tokens.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * TemplatesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TemplatesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'templatesInitGet' => [
            'application/json',
        ],
        'templatesTemplateIdClonePost' => [
            'application/json',
        ],
        'templatesTemplateIdDelete' => [
            'application/json',
        ],
        'templatesTemplateIdIndexHtmlGet' => [
            'application/json',
        ],
        'templatesTemplateIdIndexHtmlPost' => [
            'application/json',
        ],
        'templatesTemplateIdPost' => [
            'application/json',
        ],
        'templatesTemplateIdPresignedUrlGet' => [
            'application/json',
        ],
        'templatesTemplateIdPut' => [
            'application/json',
        ],
        'templatesTemplateIdRenderPreviewsPost' => [
            'application/json',
        ],
        'templatesTemplateIdUnzipPost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation templatesInitGet
     *
     * Initialize Template Creation
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesInitGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TemplatesInitGet200Response
     */
    public function templatesInitGet(string $contentType = self::contentTypes['templatesInitGet'][0])
    {
        list($response) = $this->templatesInitGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation templatesInitGetWithHttpInfo
     *
     * Initialize Template Creation
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesInitGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TemplatesInitGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function templatesInitGetWithHttpInfo(string $contentType = self::contentTypes['templatesInitGet'][0])
    {
        $request = $this->templatesInitGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\TemplatesInitGet200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\TemplatesInitGet200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TemplatesInitGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation templatesInitGetAsync
     *
     * Initialize Template Creation
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesInitGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templatesInitGetAsync(string $contentType = self::contentTypes['templatesInitGet'][0])
    {
        return $this->templatesInitGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templatesInitGetAsyncWithHttpInfo
     *
     * Initialize Template Creation
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesInitGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templatesInitGetAsyncWithHttpInfo(string $contentType = self::contentTypes['templatesInitGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TemplatesInitGet200Response';
        $request = $this->templatesInitGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templatesInitGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesInitGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function templatesInitGetRequest(string $contentType = self::contentTypes['templatesInitGet'][0])
    {


        $resourcePath = '/templates/init';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (Api Token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation templatesTemplateIdClonePost
     *
     * Clone Template
     *
     * @param  string $template_id template_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdClonePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TemplatesTemplateIdClonePost200Response
     */
    public function templatesTemplateIdClonePost($template_id, string $contentType = self::contentTypes['templatesTemplateIdClonePost'][0])
    {
        list($response) = $this->templatesTemplateIdClonePostWithHttpInfo($template_id, $contentType);
        return $response;
    }

    /**
     * Operation templatesTemplateIdClonePostWithHttpInfo
     *
     * Clone Template
     *
     * @param  string $template_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdClonePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TemplatesTemplateIdClonePost200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function templatesTemplateIdClonePostWithHttpInfo($template_id, string $contentType = self::contentTypes['templatesTemplateIdClonePost'][0])
    {
        $request = $this->templatesTemplateIdClonePostRequest($template_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\TemplatesTemplateIdClonePost200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\TemplatesTemplateIdClonePost200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TemplatesTemplateIdClonePost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation templatesTemplateIdClonePostAsync
     *
     * Clone Template
     *
     * @param  string $template_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdClonePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templatesTemplateIdClonePostAsync($template_id, string $contentType = self::contentTypes['templatesTemplateIdClonePost'][0])
    {
        return $this->templatesTemplateIdClonePostAsyncWithHttpInfo($template_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templatesTemplateIdClonePostAsyncWithHttpInfo
     *
     * Clone Template
     *
     * @param  string $template_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdClonePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templatesTemplateIdClonePostAsyncWithHttpInfo($template_id, string $contentType = self::contentTypes['templatesTemplateIdClonePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TemplatesTemplateIdClonePost200Response';
        $request = $this->templatesTemplateIdClonePostRequest($template_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templatesTemplateIdClonePost'
     *
     * @param  string $template_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdClonePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function templatesTemplateIdClonePostRequest($template_id, string $contentType = self::contentTypes['templatesTemplateIdClonePost'][0])
    {

        // verify the required parameter 'template_id' is set
        if ($template_id === null || (is_array($template_id) && count($template_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $template_id when calling templatesTemplateIdClonePost'
            );
        }


        $resourcePath = '/templates/{templateId}/clone';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($template_id !== null) {
            $resourcePath = str_replace(
                '{' . 'templateId' . '}',
                ObjectSerializer::toPathValue($template_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (Api Token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation templatesTemplateIdDelete
     *
     * Delete Template
     *
     * @param  string $template_id template_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed
     */
    public function templatesTemplateIdDelete($template_id, string $contentType = self::contentTypes['templatesTemplateIdDelete'][0])
    {
        list($response) = $this->templatesTemplateIdDeleteWithHttpInfo($template_id, $contentType);
        return $response;
    }

    /**
     * Operation templatesTemplateIdDeleteWithHttpInfo
     *
     * Delete Template
     *
     * @param  string $template_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function templatesTemplateIdDeleteWithHttpInfo($template_id, string $contentType = self::contentTypes['templatesTemplateIdDelete'][0])
    {
        $request = $this->templatesTemplateIdDeleteRequest($template_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'mixed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation templatesTemplateIdDeleteAsync
     *
     * Delete Template
     *
     * @param  string $template_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templatesTemplateIdDeleteAsync($template_id, string $contentType = self::contentTypes['templatesTemplateIdDelete'][0])
    {
        return $this->templatesTemplateIdDeleteAsyncWithHttpInfo($template_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templatesTemplateIdDeleteAsyncWithHttpInfo
     *
     * Delete Template
     *
     * @param  string $template_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templatesTemplateIdDeleteAsyncWithHttpInfo($template_id, string $contentType = self::contentTypes['templatesTemplateIdDelete'][0])
    {
        $returnType = 'mixed';
        $request = $this->templatesTemplateIdDeleteRequest($template_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templatesTemplateIdDelete'
     *
     * @param  string $template_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function templatesTemplateIdDeleteRequest($template_id, string $contentType = self::contentTypes['templatesTemplateIdDelete'][0])
    {

        // verify the required parameter 'template_id' is set
        if ($template_id === null || (is_array($template_id) && count($template_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $template_id when calling templatesTemplateIdDelete'
            );
        }


        $resourcePath = '/templates/{templateId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($template_id !== null) {
            $resourcePath = str_replace(
                '{' . 'templateId' . '}',
                ObjectSerializer::toPathValue($template_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (Api Token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation templatesTemplateIdIndexHtmlGet
     *
     * Get Template Index HTML
     *
     * @param  string $template_id template_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdIndexHtmlGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TemplatesTemplateIdIndexHtmlGet200Response
     */
    public function templatesTemplateIdIndexHtmlGet($template_id, string $contentType = self::contentTypes['templatesTemplateIdIndexHtmlGet'][0])
    {
        list($response) = $this->templatesTemplateIdIndexHtmlGetWithHttpInfo($template_id, $contentType);
        return $response;
    }

    /**
     * Operation templatesTemplateIdIndexHtmlGetWithHttpInfo
     *
     * Get Template Index HTML
     *
     * @param  string $template_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdIndexHtmlGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TemplatesTemplateIdIndexHtmlGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function templatesTemplateIdIndexHtmlGetWithHttpInfo($template_id, string $contentType = self::contentTypes['templatesTemplateIdIndexHtmlGet'][0])
    {
        $request = $this->templatesTemplateIdIndexHtmlGetRequest($template_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\TemplatesTemplateIdIndexHtmlGet200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\TemplatesTemplateIdIndexHtmlGet200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TemplatesTemplateIdIndexHtmlGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation templatesTemplateIdIndexHtmlGetAsync
     *
     * Get Template Index HTML
     *
     * @param  string $template_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdIndexHtmlGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templatesTemplateIdIndexHtmlGetAsync($template_id, string $contentType = self::contentTypes['templatesTemplateIdIndexHtmlGet'][0])
    {
        return $this->templatesTemplateIdIndexHtmlGetAsyncWithHttpInfo($template_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templatesTemplateIdIndexHtmlGetAsyncWithHttpInfo
     *
     * Get Template Index HTML
     *
     * @param  string $template_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdIndexHtmlGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templatesTemplateIdIndexHtmlGetAsyncWithHttpInfo($template_id, string $contentType = self::contentTypes['templatesTemplateIdIndexHtmlGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TemplatesTemplateIdIndexHtmlGet200Response';
        $request = $this->templatesTemplateIdIndexHtmlGetRequest($template_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templatesTemplateIdIndexHtmlGet'
     *
     * @param  string $template_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdIndexHtmlGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function templatesTemplateIdIndexHtmlGetRequest($template_id, string $contentType = self::contentTypes['templatesTemplateIdIndexHtmlGet'][0])
    {

        // verify the required parameter 'template_id' is set
        if ($template_id === null || (is_array($template_id) && count($template_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $template_id when calling templatesTemplateIdIndexHtmlGet'
            );
        }


        $resourcePath = '/templates/{templateId}/index-html';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($template_id !== null) {
            $resourcePath = str_replace(
                '{' . 'templateId' . '}',
                ObjectSerializer::toPathValue($template_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (Api Token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation templatesTemplateIdIndexHtmlPost
     *
     * Upload Template Index HTML
     *
     * @param  string $template_id template_id (required)
     * @param  \OpenAPI\Client\Model\TemplatesTemplateIdIndexHtmlGet200Response $templates_template_id_index_html_get200_response templates_template_id_index_html_get200_response (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdIndexHtmlPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed
     */
    public function templatesTemplateIdIndexHtmlPost($template_id, $templates_template_id_index_html_get200_response, string $contentType = self::contentTypes['templatesTemplateIdIndexHtmlPost'][0])
    {
        list($response) = $this->templatesTemplateIdIndexHtmlPostWithHttpInfo($template_id, $templates_template_id_index_html_get200_response, $contentType);
        return $response;
    }

    /**
     * Operation templatesTemplateIdIndexHtmlPostWithHttpInfo
     *
     * Upload Template Index HTML
     *
     * @param  string $template_id (required)
     * @param  \OpenAPI\Client\Model\TemplatesTemplateIdIndexHtmlGet200Response $templates_template_id_index_html_get200_response (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdIndexHtmlPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function templatesTemplateIdIndexHtmlPostWithHttpInfo($template_id, $templates_template_id_index_html_get200_response, string $contentType = self::contentTypes['templatesTemplateIdIndexHtmlPost'][0])
    {
        $request = $this->templatesTemplateIdIndexHtmlPostRequest($template_id, $templates_template_id_index_html_get200_response, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'mixed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation templatesTemplateIdIndexHtmlPostAsync
     *
     * Upload Template Index HTML
     *
     * @param  string $template_id (required)
     * @param  \OpenAPI\Client\Model\TemplatesTemplateIdIndexHtmlGet200Response $templates_template_id_index_html_get200_response (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdIndexHtmlPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templatesTemplateIdIndexHtmlPostAsync($template_id, $templates_template_id_index_html_get200_response, string $contentType = self::contentTypes['templatesTemplateIdIndexHtmlPost'][0])
    {
        return $this->templatesTemplateIdIndexHtmlPostAsyncWithHttpInfo($template_id, $templates_template_id_index_html_get200_response, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templatesTemplateIdIndexHtmlPostAsyncWithHttpInfo
     *
     * Upload Template Index HTML
     *
     * @param  string $template_id (required)
     * @param  \OpenAPI\Client\Model\TemplatesTemplateIdIndexHtmlGet200Response $templates_template_id_index_html_get200_response (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdIndexHtmlPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templatesTemplateIdIndexHtmlPostAsyncWithHttpInfo($template_id, $templates_template_id_index_html_get200_response, string $contentType = self::contentTypes['templatesTemplateIdIndexHtmlPost'][0])
    {
        $returnType = 'mixed';
        $request = $this->templatesTemplateIdIndexHtmlPostRequest($template_id, $templates_template_id_index_html_get200_response, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templatesTemplateIdIndexHtmlPost'
     *
     * @param  string $template_id (required)
     * @param  \OpenAPI\Client\Model\TemplatesTemplateIdIndexHtmlGet200Response $templates_template_id_index_html_get200_response (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdIndexHtmlPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function templatesTemplateIdIndexHtmlPostRequest($template_id, $templates_template_id_index_html_get200_response, string $contentType = self::contentTypes['templatesTemplateIdIndexHtmlPost'][0])
    {

        // verify the required parameter 'template_id' is set
        if ($template_id === null || (is_array($template_id) && count($template_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $template_id when calling templatesTemplateIdIndexHtmlPost'
            );
        }

        // verify the required parameter 'templates_template_id_index_html_get200_response' is set
        if ($templates_template_id_index_html_get200_response === null || (is_array($templates_template_id_index_html_get200_response) && count($templates_template_id_index_html_get200_response) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $templates_template_id_index_html_get200_response when calling templatesTemplateIdIndexHtmlPost'
            );
        }


        $resourcePath = '/templates/{templateId}/index-html';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($template_id !== null) {
            $resourcePath = str_replace(
                '{' . 'templateId' . '}',
                ObjectSerializer::toPathValue($template_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($templates_template_id_index_html_get200_response)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($templates_template_id_index_html_get200_response));
            } else {
                $httpBody = $templates_template_id_index_html_get200_response;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (Api Token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation templatesTemplateIdPost
     *
     * Save New Template
     *
     * @param  string $template_id template_id (required)
     * @param  \OpenAPI\Client\Model\TemplatesTemplateIdPostRequest $templates_template_id_post_request templates_template_id_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed
     */
    public function templatesTemplateIdPost($template_id, $templates_template_id_post_request, string $contentType = self::contentTypes['templatesTemplateIdPost'][0])
    {
        list($response) = $this->templatesTemplateIdPostWithHttpInfo($template_id, $templates_template_id_post_request, $contentType);
        return $response;
    }

    /**
     * Operation templatesTemplateIdPostWithHttpInfo
     *
     * Save New Template
     *
     * @param  string $template_id (required)
     * @param  \OpenAPI\Client\Model\TemplatesTemplateIdPostRequest $templates_template_id_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function templatesTemplateIdPostWithHttpInfo($template_id, $templates_template_id_post_request, string $contentType = self::contentTypes['templatesTemplateIdPost'][0])
    {
        $request = $this->templatesTemplateIdPostRequest($template_id, $templates_template_id_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'mixed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation templatesTemplateIdPostAsync
     *
     * Save New Template
     *
     * @param  string $template_id (required)
     * @param  \OpenAPI\Client\Model\TemplatesTemplateIdPostRequest $templates_template_id_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templatesTemplateIdPostAsync($template_id, $templates_template_id_post_request, string $contentType = self::contentTypes['templatesTemplateIdPost'][0])
    {
        return $this->templatesTemplateIdPostAsyncWithHttpInfo($template_id, $templates_template_id_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templatesTemplateIdPostAsyncWithHttpInfo
     *
     * Save New Template
     *
     * @param  string $template_id (required)
     * @param  \OpenAPI\Client\Model\TemplatesTemplateIdPostRequest $templates_template_id_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templatesTemplateIdPostAsyncWithHttpInfo($template_id, $templates_template_id_post_request, string $contentType = self::contentTypes['templatesTemplateIdPost'][0])
    {
        $returnType = 'mixed';
        $request = $this->templatesTemplateIdPostRequest($template_id, $templates_template_id_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templatesTemplateIdPost'
     *
     * @param  string $template_id (required)
     * @param  \OpenAPI\Client\Model\TemplatesTemplateIdPostRequest $templates_template_id_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function templatesTemplateIdPostRequest($template_id, $templates_template_id_post_request, string $contentType = self::contentTypes['templatesTemplateIdPost'][0])
    {

        // verify the required parameter 'template_id' is set
        if ($template_id === null || (is_array($template_id) && count($template_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $template_id when calling templatesTemplateIdPost'
            );
        }

        // verify the required parameter 'templates_template_id_post_request' is set
        if ($templates_template_id_post_request === null || (is_array($templates_template_id_post_request) && count($templates_template_id_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $templates_template_id_post_request when calling templatesTemplateIdPost'
            );
        }


        $resourcePath = '/templates/{templateId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($template_id !== null) {
            $resourcePath = str_replace(
                '{' . 'templateId' . '}',
                ObjectSerializer::toPathValue($template_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($templates_template_id_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($templates_template_id_post_request));
            } else {
                $httpBody = $templates_template_id_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (Api Token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation templatesTemplateIdPresignedUrlGet
     *
     * Generate Presigned URL
     *
     * @param  string $template_id template_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdPresignedUrlGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TemplatesTemplateIdPresignedUrlGet200Response
     */
    public function templatesTemplateIdPresignedUrlGet($template_id, string $contentType = self::contentTypes['templatesTemplateIdPresignedUrlGet'][0])
    {
        list($response) = $this->templatesTemplateIdPresignedUrlGetWithHttpInfo($template_id, $contentType);
        return $response;
    }

    /**
     * Operation templatesTemplateIdPresignedUrlGetWithHttpInfo
     *
     * Generate Presigned URL
     *
     * @param  string $template_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdPresignedUrlGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TemplatesTemplateIdPresignedUrlGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function templatesTemplateIdPresignedUrlGetWithHttpInfo($template_id, string $contentType = self::contentTypes['templatesTemplateIdPresignedUrlGet'][0])
    {
        $request = $this->templatesTemplateIdPresignedUrlGetRequest($template_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\TemplatesTemplateIdPresignedUrlGet200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\TemplatesTemplateIdPresignedUrlGet200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TemplatesTemplateIdPresignedUrlGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation templatesTemplateIdPresignedUrlGetAsync
     *
     * Generate Presigned URL
     *
     * @param  string $template_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdPresignedUrlGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templatesTemplateIdPresignedUrlGetAsync($template_id, string $contentType = self::contentTypes['templatesTemplateIdPresignedUrlGet'][0])
    {
        return $this->templatesTemplateIdPresignedUrlGetAsyncWithHttpInfo($template_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templatesTemplateIdPresignedUrlGetAsyncWithHttpInfo
     *
     * Generate Presigned URL
     *
     * @param  string $template_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdPresignedUrlGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templatesTemplateIdPresignedUrlGetAsyncWithHttpInfo($template_id, string $contentType = self::contentTypes['templatesTemplateIdPresignedUrlGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TemplatesTemplateIdPresignedUrlGet200Response';
        $request = $this->templatesTemplateIdPresignedUrlGetRequest($template_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templatesTemplateIdPresignedUrlGet'
     *
     * @param  string $template_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdPresignedUrlGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function templatesTemplateIdPresignedUrlGetRequest($template_id, string $contentType = self::contentTypes['templatesTemplateIdPresignedUrlGet'][0])
    {

        // verify the required parameter 'template_id' is set
        if ($template_id === null || (is_array($template_id) && count($template_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $template_id when calling templatesTemplateIdPresignedUrlGet'
            );
        }


        $resourcePath = '/templates/{templateId}/presigned-url';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($template_id !== null) {
            $resourcePath = str_replace(
                '{' . 'templateId' . '}',
                ObjectSerializer::toPathValue($template_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (Api Token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation templatesTemplateIdPut
     *
     * Update Template
     *
     * @param  string $template_id template_id (required)
     * @param  \OpenAPI\Client\Model\TemplatesTemplateIdPutRequest|null $templates_template_id_put_request templates_template_id_put_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TemplatesTemplateIdPut200Response
     */
    public function templatesTemplateIdPut($template_id, $templates_template_id_put_request = null, string $contentType = self::contentTypes['templatesTemplateIdPut'][0])
    {
        list($response) = $this->templatesTemplateIdPutWithHttpInfo($template_id, $templates_template_id_put_request, $contentType);
        return $response;
    }

    /**
     * Operation templatesTemplateIdPutWithHttpInfo
     *
     * Update Template
     *
     * @param  string $template_id (required)
     * @param  \OpenAPI\Client\Model\TemplatesTemplateIdPutRequest|null $templates_template_id_put_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TemplatesTemplateIdPut200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function templatesTemplateIdPutWithHttpInfo($template_id, $templates_template_id_put_request = null, string $contentType = self::contentTypes['templatesTemplateIdPut'][0])
    {
        $request = $this->templatesTemplateIdPutRequest($template_id, $templates_template_id_put_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\TemplatesTemplateIdPut200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\TemplatesTemplateIdPut200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TemplatesTemplateIdPut200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation templatesTemplateIdPutAsync
     *
     * Update Template
     *
     * @param  string $template_id (required)
     * @param  \OpenAPI\Client\Model\TemplatesTemplateIdPutRequest|null $templates_template_id_put_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templatesTemplateIdPutAsync($template_id, $templates_template_id_put_request = null, string $contentType = self::contentTypes['templatesTemplateIdPut'][0])
    {
        return $this->templatesTemplateIdPutAsyncWithHttpInfo($template_id, $templates_template_id_put_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templatesTemplateIdPutAsyncWithHttpInfo
     *
     * Update Template
     *
     * @param  string $template_id (required)
     * @param  \OpenAPI\Client\Model\TemplatesTemplateIdPutRequest|null $templates_template_id_put_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templatesTemplateIdPutAsyncWithHttpInfo($template_id, $templates_template_id_put_request = null, string $contentType = self::contentTypes['templatesTemplateIdPut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TemplatesTemplateIdPut200Response';
        $request = $this->templatesTemplateIdPutRequest($template_id, $templates_template_id_put_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templatesTemplateIdPut'
     *
     * @param  string $template_id (required)
     * @param  \OpenAPI\Client\Model\TemplatesTemplateIdPutRequest|null $templates_template_id_put_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function templatesTemplateIdPutRequest($template_id, $templates_template_id_put_request = null, string $contentType = self::contentTypes['templatesTemplateIdPut'][0])
    {

        // verify the required parameter 'template_id' is set
        if ($template_id === null || (is_array($template_id) && count($template_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $template_id when calling templatesTemplateIdPut'
            );
        }



        $resourcePath = '/templates/{templateId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($template_id !== null) {
            $resourcePath = str_replace(
                '{' . 'templateId' . '}',
                ObjectSerializer::toPathValue($template_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($templates_template_id_put_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($templates_template_id_put_request));
            } else {
                $httpBody = $templates_template_id_put_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (Api Token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation templatesTemplateIdRenderPreviewsPost
     *
     * Generate Template Previews
     *
     * @param  string $template_id template_id (required)
     * @param  \OpenAPI\Client\Model\TemplatesTemplateIdRenderPreviewsPostRequest $templates_template_id_render_previews_post_request templates_template_id_render_previews_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdRenderPreviewsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TemplatesTemplateIdRenderPreviewsPost200Response
     */
    public function templatesTemplateIdRenderPreviewsPost($template_id, $templates_template_id_render_previews_post_request, string $contentType = self::contentTypes['templatesTemplateIdRenderPreviewsPost'][0])
    {
        list($response) = $this->templatesTemplateIdRenderPreviewsPostWithHttpInfo($template_id, $templates_template_id_render_previews_post_request, $contentType);
        return $response;
    }

    /**
     * Operation templatesTemplateIdRenderPreviewsPostWithHttpInfo
     *
     * Generate Template Previews
     *
     * @param  string $template_id (required)
     * @param  \OpenAPI\Client\Model\TemplatesTemplateIdRenderPreviewsPostRequest $templates_template_id_render_previews_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdRenderPreviewsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TemplatesTemplateIdRenderPreviewsPost200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function templatesTemplateIdRenderPreviewsPostWithHttpInfo($template_id, $templates_template_id_render_previews_post_request, string $contentType = self::contentTypes['templatesTemplateIdRenderPreviewsPost'][0])
    {
        $request = $this->templatesTemplateIdRenderPreviewsPostRequest($template_id, $templates_template_id_render_previews_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\TemplatesTemplateIdRenderPreviewsPost200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\TemplatesTemplateIdRenderPreviewsPost200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TemplatesTemplateIdRenderPreviewsPost200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation templatesTemplateIdRenderPreviewsPostAsync
     *
     * Generate Template Previews
     *
     * @param  string $template_id (required)
     * @param  \OpenAPI\Client\Model\TemplatesTemplateIdRenderPreviewsPostRequest $templates_template_id_render_previews_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdRenderPreviewsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templatesTemplateIdRenderPreviewsPostAsync($template_id, $templates_template_id_render_previews_post_request, string $contentType = self::contentTypes['templatesTemplateIdRenderPreviewsPost'][0])
    {
        return $this->templatesTemplateIdRenderPreviewsPostAsyncWithHttpInfo($template_id, $templates_template_id_render_previews_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templatesTemplateIdRenderPreviewsPostAsyncWithHttpInfo
     *
     * Generate Template Previews
     *
     * @param  string $template_id (required)
     * @param  \OpenAPI\Client\Model\TemplatesTemplateIdRenderPreviewsPostRequest $templates_template_id_render_previews_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdRenderPreviewsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templatesTemplateIdRenderPreviewsPostAsyncWithHttpInfo($template_id, $templates_template_id_render_previews_post_request, string $contentType = self::contentTypes['templatesTemplateIdRenderPreviewsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TemplatesTemplateIdRenderPreviewsPost200Response';
        $request = $this->templatesTemplateIdRenderPreviewsPostRequest($template_id, $templates_template_id_render_previews_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templatesTemplateIdRenderPreviewsPost'
     *
     * @param  string $template_id (required)
     * @param  \OpenAPI\Client\Model\TemplatesTemplateIdRenderPreviewsPostRequest $templates_template_id_render_previews_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdRenderPreviewsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function templatesTemplateIdRenderPreviewsPostRequest($template_id, $templates_template_id_render_previews_post_request, string $contentType = self::contentTypes['templatesTemplateIdRenderPreviewsPost'][0])
    {

        // verify the required parameter 'template_id' is set
        if ($template_id === null || (is_array($template_id) && count($template_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $template_id when calling templatesTemplateIdRenderPreviewsPost'
            );
        }

        // verify the required parameter 'templates_template_id_render_previews_post_request' is set
        if ($templates_template_id_render_previews_post_request === null || (is_array($templates_template_id_render_previews_post_request) && count($templates_template_id_render_previews_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $templates_template_id_render_previews_post_request when calling templatesTemplateIdRenderPreviewsPost'
            );
        }


        $resourcePath = '/templates/{templateId}/render-previews';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($template_id !== null) {
            $resourcePath = str_replace(
                '{' . 'templateId' . '}',
                ObjectSerializer::toPathValue($template_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($templates_template_id_render_previews_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($templates_template_id_render_previews_post_request));
            } else {
                $httpBody = $templates_template_id_render_previews_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (Api Token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation templatesTemplateIdUnzipPost
     *
     * Extract Template Files
     *
     * @param  string $template_id template_id (required)
     * @param  \OpenAPI\Client\Model\TemplatesTemplateIdUnzipPostRequest $templates_template_id_unzip_post_request templates_template_id_unzip_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdUnzipPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed
     */
    public function templatesTemplateIdUnzipPost($template_id, $templates_template_id_unzip_post_request, string $contentType = self::contentTypes['templatesTemplateIdUnzipPost'][0])
    {
        list($response) = $this->templatesTemplateIdUnzipPostWithHttpInfo($template_id, $templates_template_id_unzip_post_request, $contentType);
        return $response;
    }

    /**
     * Operation templatesTemplateIdUnzipPostWithHttpInfo
     *
     * Extract Template Files
     *
     * @param  string $template_id (required)
     * @param  \OpenAPI\Client\Model\TemplatesTemplateIdUnzipPostRequest $templates_template_id_unzip_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdUnzipPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function templatesTemplateIdUnzipPostWithHttpInfo($template_id, $templates_template_id_unzip_post_request, string $contentType = self::contentTypes['templatesTemplateIdUnzipPost'][0])
    {
        $request = $this->templatesTemplateIdUnzipPostRequest($template_id, $templates_template_id_unzip_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'mixed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation templatesTemplateIdUnzipPostAsync
     *
     * Extract Template Files
     *
     * @param  string $template_id (required)
     * @param  \OpenAPI\Client\Model\TemplatesTemplateIdUnzipPostRequest $templates_template_id_unzip_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdUnzipPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templatesTemplateIdUnzipPostAsync($template_id, $templates_template_id_unzip_post_request, string $contentType = self::contentTypes['templatesTemplateIdUnzipPost'][0])
    {
        return $this->templatesTemplateIdUnzipPostAsyncWithHttpInfo($template_id, $templates_template_id_unzip_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templatesTemplateIdUnzipPostAsyncWithHttpInfo
     *
     * Extract Template Files
     *
     * @param  string $template_id (required)
     * @param  \OpenAPI\Client\Model\TemplatesTemplateIdUnzipPostRequest $templates_template_id_unzip_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdUnzipPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templatesTemplateIdUnzipPostAsyncWithHttpInfo($template_id, $templates_template_id_unzip_post_request, string $contentType = self::contentTypes['templatesTemplateIdUnzipPost'][0])
    {
        $returnType = 'mixed';
        $request = $this->templatesTemplateIdUnzipPostRequest($template_id, $templates_template_id_unzip_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templatesTemplateIdUnzipPost'
     *
     * @param  string $template_id (required)
     * @param  \OpenAPI\Client\Model\TemplatesTemplateIdUnzipPostRequest $templates_template_id_unzip_post_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatesTemplateIdUnzipPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function templatesTemplateIdUnzipPostRequest($template_id, $templates_template_id_unzip_post_request, string $contentType = self::contentTypes['templatesTemplateIdUnzipPost'][0])
    {

        // verify the required parameter 'template_id' is set
        if ($template_id === null || (is_array($template_id) && count($template_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $template_id when calling templatesTemplateIdUnzipPost'
            );
        }

        // verify the required parameter 'templates_template_id_unzip_post_request' is set
        if ($templates_template_id_unzip_post_request === null || (is_array($templates_template_id_unzip_post_request) && count($templates_template_id_unzip_post_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $templates_template_id_unzip_post_request when calling templatesTemplateIdUnzipPost'
            );
        }


        $resourcePath = '/templates/{templateId}/unzip';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($template_id !== null) {
            $resourcePath = str_replace(
                '{' . 'templateId' . '}',
                ObjectSerializer::toPathValue($template_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($templates_template_id_unzip_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($templates_template_id_unzip_post_request));
            } else {
                $httpBody = $templates_template_id_unzip_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (Api Token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
