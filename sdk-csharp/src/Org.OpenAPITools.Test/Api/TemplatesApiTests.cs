/*
 * Pogodoc API
 *
 * API for Pogodoc document and template management service. Provides endpoints for rendering documents, managing templates, generating previews, and handling API tokens.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing TemplatesApi
    /// </summary>
    public sealed class TemplatesApiTests : ApiTestsBase
    {
        private readonly ITemplatesApi _instance;

        public TemplatesApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<ITemplatesApi>();
        }

        /// <summary>
        /// Test TemplatesInitGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TemplatesInitGetAsyncTest()
        {
            var response = await _instance.TemplatesInitGetAsync();
            var model = response.Ok();
            Assert.IsType<TemplatesInitGet200Response>(model);
        }

        /// <summary>
        /// Test TemplatesTemplateIdClonePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TemplatesTemplateIdClonePostAsyncTest()
        {
            string templateId = default!;
            var response = await _instance.TemplatesTemplateIdClonePostAsync(templateId);
            var model = response.Ok();
            Assert.IsType<TemplatesTemplateIdClonePost200Response>(model);
        }

        /// <summary>
        /// Test TemplatesTemplateIdDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TemplatesTemplateIdDeleteAsyncTest()
        {
            string templateId = default!;
            var response = await _instance.TemplatesTemplateIdDeleteAsync(templateId);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test TemplatesTemplateIdIndexHtmlGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TemplatesTemplateIdIndexHtmlGetAsyncTest()
        {
            string templateId = default!;
            var response = await _instance.TemplatesTemplateIdIndexHtmlGetAsync(templateId);
            var model = response.Ok();
            Assert.IsType<TemplatesTemplateIdIndexHtmlGet200Response>(model);
        }

        /// <summary>
        /// Test TemplatesTemplateIdIndexHtmlPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TemplatesTemplateIdIndexHtmlPostAsyncTest()
        {
            string templateId = default!;
            TemplatesTemplateIdIndexHtmlGet200Response templatesTemplateIdIndexHtmlGet200Response = default!;
            var response = await _instance.TemplatesTemplateIdIndexHtmlPostAsync(templateId, templatesTemplateIdIndexHtmlGet200Response);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test TemplatesTemplateIdPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TemplatesTemplateIdPostAsyncTest()
        {
            string templateId = default!;
            TemplatesTemplateIdPostRequest templatesTemplateIdPostRequest = default!;
            var response = await _instance.TemplatesTemplateIdPostAsync(templateId, templatesTemplateIdPostRequest);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test TemplatesTemplateIdPresignedUrlGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TemplatesTemplateIdPresignedUrlGetAsyncTest()
        {
            string templateId = default!;
            var response = await _instance.TemplatesTemplateIdPresignedUrlGetAsync(templateId);
            var model = response.Ok();
            Assert.IsType<TemplatesTemplateIdPresignedUrlGet200Response>(model);
        }

        /// <summary>
        /// Test TemplatesTemplateIdPut
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TemplatesTemplateIdPutAsyncTest()
        {
            string templateId = default!;
            Client.Option<TemplatesTemplateIdPutRequest> templatesTemplateIdPutRequest = default!;
            var response = await _instance.TemplatesTemplateIdPutAsync(templateId, templatesTemplateIdPutRequest);
            var model = response.Ok();
            Assert.IsType<TemplatesTemplateIdPut200Response>(model);
        }

        /// <summary>
        /// Test TemplatesTemplateIdRenderPreviewsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TemplatesTemplateIdRenderPreviewsPostAsyncTest()
        {
            string templateId = default!;
            TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest = default!;
            var response = await _instance.TemplatesTemplateIdRenderPreviewsPostAsync(templateId, templatesTemplateIdRenderPreviewsPostRequest);
            var model = response.Ok();
            Assert.IsType<TemplatesTemplateIdRenderPreviewsPost200Response>(model);
        }

        /// <summary>
        /// Test TemplatesTemplateIdUnzipPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TemplatesTemplateIdUnzipPostAsyncTest()
        {
            string templateId = default!;
            TemplatesTemplateIdUnzipPostRequest templatesTemplateIdUnzipPostRequest = default!;
            var response = await _instance.TemplatesTemplateIdUnzipPostAsync(templateId, templatesTemplateIdUnzipPostRequest);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }
    }
}
