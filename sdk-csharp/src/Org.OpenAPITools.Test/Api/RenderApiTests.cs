/*
 * Pogodoc API
 *
 * API for Pogodoc document and template management service. Provides endpoints for rendering documents, managing templates, generating previews, and handling API tokens.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing RenderApi
    /// </summary>
    public sealed class RenderApiTests : ApiTestsBase
    {
        private readonly IRenderApi _instance;

        public RenderApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IRenderApi>();
        }

        /// <summary>
        /// Test DocumentsImmediateRenderPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DocumentsImmediateRenderPostAsyncTest()
        {
            Client.Option<DocumentsImmediateRenderPostRequest> documentsImmediateRenderPostRequest = default!;
            var response = await _instance.DocumentsImmediateRenderPostAsync(documentsImmediateRenderPostRequest);
            var model = response.Ok();
            Assert.IsType<DocumentsImmediateRenderPost200Response>(model);
        }

        /// <summary>
        /// Test DocumentsInitPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DocumentsInitPostAsyncTest()
        {
            Client.Option<DocumentsInitPostRequest> documentsInitPostRequest = default!;
            var response = await _instance.DocumentsInitPostAsync(documentsInitPostRequest);
            var model = response.Ok();
            Assert.IsType<DocumentsInitPost200Response>(model);
        }

        /// <summary>
        /// Test DocumentsJobIdRenderPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DocumentsJobIdRenderPostAsyncTest()
        {
            string jobId = default!;
            Client.Option<DocumentsJobIdRenderPostRequest> documentsJobIdRenderPostRequest = default!;
            var response = await _instance.DocumentsJobIdRenderPostAsync(jobId, documentsJobIdRenderPostRequest);
            var model = response.Ok();
            Assert.IsType<DocumentsJobIdRenderPost200Response>(model);
        }

        /// <summary>
        /// Test DocumentsRenderPreviewPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DocumentsRenderPreviewPostAsyncTest()
        {
            string templateId = default!;
            TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest = default!;
            var response = await _instance.DocumentsRenderPreviewPostAsync(templateId, templatesTemplateIdRenderPreviewsPostRequest);
            var model = response.Ok();
            Assert.IsType<TemplatesTemplateIdRenderPreviewsPost200ResponsePngPreview>(model);
        }

        /// <summary>
        /// Test JobsJobIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task JobsJobIdGetAsyncTest()
        {
            string jobId = default!;
            var response = await _instance.JobsJobIdGetAsync(jobId);
            var model = response.Ok();
            Assert.IsType<JobsJobIdGet200Response>(model);
        }
    }
}
