// <auto-generated>
/*
 * Pogodoc API
 *
 * API for Pogodoc document and template management service. Provides endpoints for rendering documents, managing templates, generating previews, and handling API tokens.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IRenderApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        RenderApiEvents Events { get; }

        /// <summary>
        /// Immediate Render
        /// </summary>
        /// <remarks>
        /// Combines initialization and rendering in one step. Creates a job, uploads template/data directly, starts rendering, and adds the document to Strapi. Requires subscription check.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentsImmediateRenderPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDocumentsImmediateRenderPostApiResponse"/>&gt;</returns>
        Task<IDocumentsImmediateRenderPostApiResponse> DocumentsImmediateRenderPostAsync(Option<DocumentsImmediateRenderPostRequest> documentsImmediateRenderPostRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Immediate Render
        /// </summary>
        /// <remarks>
        /// Combines initialization and rendering in one step. Creates a job, uploads template/data directly, starts rendering, and adds the document to Strapi. Requires subscription check.
        /// </remarks>
        /// <param name="documentsImmediateRenderPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDocumentsImmediateRenderPostApiResponse"/>?&gt;</returns>
        Task<IDocumentsImmediateRenderPostApiResponse?> DocumentsImmediateRenderPostOrDefaultAsync(Option<DocumentsImmediateRenderPostRequest> documentsImmediateRenderPostRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Initialize Render Job
        /// </summary>
        /// <remarks>
        /// Creates a new render job with a unique ID, sets up S3 storage for template and data files, and generates presigned upload URLs if needed. Requires subscription check.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentsInitPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDocumentsInitPostApiResponse"/>&gt;</returns>
        Task<IDocumentsInitPostApiResponse> DocumentsInitPostAsync(Option<DocumentsInitPostRequest> documentsInitPostRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Initialize Render Job
        /// </summary>
        /// <remarks>
        /// Creates a new render job with a unique ID, sets up S3 storage for template and data files, and generates presigned upload URLs if needed. Requires subscription check.
        /// </remarks>
        /// <param name="documentsInitPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDocumentsInitPostApiResponse"/>?&gt;</returns>
        Task<IDocumentsInitPostApiResponse?> DocumentsInitPostOrDefaultAsync(Option<DocumentsInitPostRequest> documentsInitPostRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Start Render Job
        /// </summary>
        /// <remarks>
        /// Takes a previously initialized job, updates its status to in-progress, and triggers the rendering process using Puppeteer. Can optionally wait for render completion.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <param name="documentsJobIdRenderPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDocumentsJobIdRenderPostApiResponse"/>&gt;</returns>
        Task<IDocumentsJobIdRenderPostApiResponse> DocumentsJobIdRenderPostAsync(string jobId, Option<DocumentsJobIdRenderPostRequest> documentsJobIdRenderPostRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Start Render Job
        /// </summary>
        /// <remarks>
        /// Takes a previously initialized job, updates its status to in-progress, and triggers the rendering process using Puppeteer. Can optionally wait for render completion.
        /// </remarks>
        /// <param name="jobId"></param>
        /// <param name="documentsJobIdRenderPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDocumentsJobIdRenderPostApiResponse"/>?&gt;</returns>
        Task<IDocumentsJobIdRenderPostApiResponse?> DocumentsJobIdRenderPostOrDefaultAsync(string jobId, Option<DocumentsJobIdRenderPostRequest> documentsJobIdRenderPostRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Document Preview
        /// </summary>
        /// <remarks>
        /// Generates a preview by creating a single-page render job, processing it immediately, and returning the output URL. Used for template visualization.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdRenderPreviewsPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDocumentsRenderPreviewPostApiResponse"/>&gt;</returns>
        Task<IDocumentsRenderPreviewPostApiResponse> DocumentsRenderPreviewPostAsync(string templateId, TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Document Preview
        /// </summary>
        /// <remarks>
        /// Generates a preview by creating a single-page render job, processing it immediately, and returning the output URL. Used for template visualization.
        /// </remarks>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdRenderPreviewsPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDocumentsRenderPreviewPostApiResponse"/>?&gt;</returns>
        Task<IDocumentsRenderPreviewPostApiResponse?> DocumentsRenderPreviewPostOrDefaultAsync(string templateId, TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Job Status
        /// </summary>
        /// <remarks>
        /// Fetches detailed job information from S3 storage including job status, template ID, target format, and output details if available.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJobsJobIdGetApiResponse"/>&gt;</returns>
        Task<IJobsJobIdGetApiResponse> JobsJobIdGetAsync(string jobId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Job Status
        /// </summary>
        /// <remarks>
        /// Fetches detailed job information from S3 storage including job status, template ID, target format, and output details if available.
        /// </remarks>
        /// <param name="jobId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJobsJobIdGetApiResponse"/>?&gt;</returns>
        Task<IJobsJobIdGetApiResponse?> JobsJobIdGetOrDefaultAsync(string jobId, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDocumentsImmediateRenderPostApiResponse"/>
    /// </summary>
    public interface IDocumentsImmediateRenderPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.DocumentsImmediateRenderPost200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDocumentsInitPostApiResponse"/>
    /// </summary>
    public interface IDocumentsInitPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.DocumentsInitPost200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDocumentsJobIdRenderPostApiResponse"/>
    /// </summary>
    public interface IDocumentsJobIdRenderPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.DocumentsJobIdRenderPost200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDocumentsRenderPreviewPostApiResponse"/>
    /// </summary>
    public interface IDocumentsRenderPreviewPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.TemplatesTemplateIdRenderPreviewsPost200ResponsePngPreview?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IJobsJobIdGetApiResponse"/>
    /// </summary>
    public interface IJobsJobIdGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.JobsJobIdGet200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class RenderApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDocumentsImmediateRenderPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDocumentsImmediateRenderPost;

        internal void ExecuteOnDocumentsImmediateRenderPost(RenderApi.DocumentsImmediateRenderPostApiResponse apiResponse)
        {
            OnDocumentsImmediateRenderPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDocumentsImmediateRenderPost(Exception exception)
        {
            OnErrorDocumentsImmediateRenderPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDocumentsInitPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDocumentsInitPost;

        internal void ExecuteOnDocumentsInitPost(RenderApi.DocumentsInitPostApiResponse apiResponse)
        {
            OnDocumentsInitPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDocumentsInitPost(Exception exception)
        {
            OnErrorDocumentsInitPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDocumentsJobIdRenderPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDocumentsJobIdRenderPost;

        internal void ExecuteOnDocumentsJobIdRenderPost(RenderApi.DocumentsJobIdRenderPostApiResponse apiResponse)
        {
            OnDocumentsJobIdRenderPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDocumentsJobIdRenderPost(Exception exception)
        {
            OnErrorDocumentsJobIdRenderPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDocumentsRenderPreviewPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDocumentsRenderPreviewPost;

        internal void ExecuteOnDocumentsRenderPreviewPost(RenderApi.DocumentsRenderPreviewPostApiResponse apiResponse)
        {
            OnDocumentsRenderPreviewPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDocumentsRenderPreviewPost(Exception exception)
        {
            OnErrorDocumentsRenderPreviewPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnJobsJobIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorJobsJobIdGet;

        internal void ExecuteOnJobsJobIdGet(RenderApi.JobsJobIdGetApiResponse apiResponse)
        {
            OnJobsJobIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorJobsJobIdGet(Exception exception)
        {
            OnErrorJobsJobIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class RenderApi : IRenderApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<RenderApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public RenderApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="RenderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RenderApi(ILogger<RenderApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, RenderApiEvents renderApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<RenderApi>();
            HttpClient = httpClient;
            Events = renderApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatDocumentsImmediateRenderPost(Option<DocumentsImmediateRenderPostRequest> documentsImmediateRenderPostRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="documentsImmediateRenderPostRequest"></param>
        /// <returns></returns>
        private void ValidateDocumentsImmediateRenderPost(Option<DocumentsImmediateRenderPostRequest> documentsImmediateRenderPostRequest)
        {
            if (documentsImmediateRenderPostRequest.IsSet && documentsImmediateRenderPostRequest.Value == null)
                throw new ArgumentNullException(nameof(documentsImmediateRenderPostRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="documentsImmediateRenderPostRequest"></param>
        private void AfterDocumentsImmediateRenderPostDefaultImplementation(IDocumentsImmediateRenderPostApiResponse apiResponseLocalVar, Option<DocumentsImmediateRenderPostRequest> documentsImmediateRenderPostRequest)
        {
            bool suppressDefaultLog = false;
            AfterDocumentsImmediateRenderPost(ref suppressDefaultLog, apiResponseLocalVar, documentsImmediateRenderPostRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="documentsImmediateRenderPostRequest"></param>
        partial void AfterDocumentsImmediateRenderPost(ref bool suppressDefaultLog, IDocumentsImmediateRenderPostApiResponse apiResponseLocalVar, Option<DocumentsImmediateRenderPostRequest> documentsImmediateRenderPostRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="documentsImmediateRenderPostRequest"></param>
        private void OnErrorDocumentsImmediateRenderPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<DocumentsImmediateRenderPostRequest> documentsImmediateRenderPostRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDocumentsImmediateRenderPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, documentsImmediateRenderPostRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="documentsImmediateRenderPostRequest"></param>
        partial void OnErrorDocumentsImmediateRenderPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<DocumentsImmediateRenderPostRequest> documentsImmediateRenderPostRequest);

        /// <summary>
        /// Immediate Render Combines initialization and rendering in one step. Creates a job, uploads template/data directly, starts rendering, and adds the document to Strapi. Requires subscription check.
        /// </summary>
        /// <param name="documentsImmediateRenderPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDocumentsImmediateRenderPostApiResponse"/>&gt;</returns>
        public async Task<IDocumentsImmediateRenderPostApiResponse?> DocumentsImmediateRenderPostOrDefaultAsync(Option<DocumentsImmediateRenderPostRequest> documentsImmediateRenderPostRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DocumentsImmediateRenderPostAsync(documentsImmediateRenderPostRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Immediate Render Combines initialization and rendering in one step. Creates a job, uploads template/data directly, starts rendering, and adds the document to Strapi. Requires subscription check.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentsImmediateRenderPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDocumentsImmediateRenderPostApiResponse"/>&gt;</returns>
        public async Task<IDocumentsImmediateRenderPostApiResponse> DocumentsImmediateRenderPostAsync(Option<DocumentsImmediateRenderPostRequest> documentsImmediateRenderPostRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDocumentsImmediateRenderPost(documentsImmediateRenderPostRequest);

                FormatDocumentsImmediateRenderPost(documentsImmediateRenderPostRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/documents/immediate-render"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/documents/immediate-render");

                    if (documentsImmediateRenderPostRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (documentsImmediateRenderPostRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(documentsImmediateRenderPostRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DocumentsImmediateRenderPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DocumentsImmediateRenderPostApiResponse>();

                        DocumentsImmediateRenderPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/documents/immediate-render", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDocumentsImmediateRenderPostDefaultImplementation(apiResponseLocalVar, documentsImmediateRenderPostRequest);

                        Events.ExecuteOnDocumentsImmediateRenderPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDocumentsImmediateRenderPostDefaultImplementation(e, "/documents/immediate-render", uriBuilderLocalVar.Path, documentsImmediateRenderPostRequest);
                Events.ExecuteOnErrorDocumentsImmediateRenderPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DocumentsImmediateRenderPostApiResponse"/>
        /// </summary>
        public partial class DocumentsImmediateRenderPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IDocumentsImmediateRenderPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DocumentsImmediateRenderPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DocumentsImmediateRenderPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DocumentsImmediateRenderPostApiResponse(ILogger<DocumentsImmediateRenderPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.DocumentsImmediateRenderPost200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.DocumentsImmediateRenderPost200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.DocumentsImmediateRenderPost200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDocumentsInitPost(Option<DocumentsInitPostRequest> documentsInitPostRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="documentsInitPostRequest"></param>
        /// <returns></returns>
        private void ValidateDocumentsInitPost(Option<DocumentsInitPostRequest> documentsInitPostRequest)
        {
            if (documentsInitPostRequest.IsSet && documentsInitPostRequest.Value == null)
                throw new ArgumentNullException(nameof(documentsInitPostRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="documentsInitPostRequest"></param>
        private void AfterDocumentsInitPostDefaultImplementation(IDocumentsInitPostApiResponse apiResponseLocalVar, Option<DocumentsInitPostRequest> documentsInitPostRequest)
        {
            bool suppressDefaultLog = false;
            AfterDocumentsInitPost(ref suppressDefaultLog, apiResponseLocalVar, documentsInitPostRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="documentsInitPostRequest"></param>
        partial void AfterDocumentsInitPost(ref bool suppressDefaultLog, IDocumentsInitPostApiResponse apiResponseLocalVar, Option<DocumentsInitPostRequest> documentsInitPostRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="documentsInitPostRequest"></param>
        private void OnErrorDocumentsInitPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<DocumentsInitPostRequest> documentsInitPostRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDocumentsInitPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, documentsInitPostRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="documentsInitPostRequest"></param>
        partial void OnErrorDocumentsInitPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<DocumentsInitPostRequest> documentsInitPostRequest);

        /// <summary>
        /// Initialize Render Job Creates a new render job with a unique ID, sets up S3 storage for template and data files, and generates presigned upload URLs if needed. Requires subscription check.
        /// </summary>
        /// <param name="documentsInitPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDocumentsInitPostApiResponse"/>&gt;</returns>
        public async Task<IDocumentsInitPostApiResponse?> DocumentsInitPostOrDefaultAsync(Option<DocumentsInitPostRequest> documentsInitPostRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DocumentsInitPostAsync(documentsInitPostRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Initialize Render Job Creates a new render job with a unique ID, sets up S3 storage for template and data files, and generates presigned upload URLs if needed. Requires subscription check.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentsInitPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDocumentsInitPostApiResponse"/>&gt;</returns>
        public async Task<IDocumentsInitPostApiResponse> DocumentsInitPostAsync(Option<DocumentsInitPostRequest> documentsInitPostRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDocumentsInitPost(documentsInitPostRequest);

                FormatDocumentsInitPost(documentsInitPostRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/documents/init"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/documents/init");

                    if (documentsInitPostRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (documentsInitPostRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(documentsInitPostRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DocumentsInitPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DocumentsInitPostApiResponse>();

                        DocumentsInitPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/documents/init", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDocumentsInitPostDefaultImplementation(apiResponseLocalVar, documentsInitPostRequest);

                        Events.ExecuteOnDocumentsInitPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDocumentsInitPostDefaultImplementation(e, "/documents/init", uriBuilderLocalVar.Path, documentsInitPostRequest);
                Events.ExecuteOnErrorDocumentsInitPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DocumentsInitPostApiResponse"/>
        /// </summary>
        public partial class DocumentsInitPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IDocumentsInitPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DocumentsInitPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DocumentsInitPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DocumentsInitPostApiResponse(ILogger<DocumentsInitPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.DocumentsInitPost200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.DocumentsInitPost200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.DocumentsInitPost200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDocumentsJobIdRenderPost(ref string jobId, Option<DocumentsJobIdRenderPostRequest> documentsJobIdRenderPostRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="jobId"></param>
        /// <param name="documentsJobIdRenderPostRequest"></param>
        /// <returns></returns>
        private void ValidateDocumentsJobIdRenderPost(string jobId, Option<DocumentsJobIdRenderPostRequest> documentsJobIdRenderPostRequest)
        {
            if (jobId == null)
                throw new ArgumentNullException(nameof(jobId));

            if (documentsJobIdRenderPostRequest.IsSet && documentsJobIdRenderPostRequest.Value == null)
                throw new ArgumentNullException(nameof(documentsJobIdRenderPostRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="jobId"></param>
        /// <param name="documentsJobIdRenderPostRequest"></param>
        private void AfterDocumentsJobIdRenderPostDefaultImplementation(IDocumentsJobIdRenderPostApiResponse apiResponseLocalVar, string jobId, Option<DocumentsJobIdRenderPostRequest> documentsJobIdRenderPostRequest)
        {
            bool suppressDefaultLog = false;
            AfterDocumentsJobIdRenderPost(ref suppressDefaultLog, apiResponseLocalVar, jobId, documentsJobIdRenderPostRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="jobId"></param>
        /// <param name="documentsJobIdRenderPostRequest"></param>
        partial void AfterDocumentsJobIdRenderPost(ref bool suppressDefaultLog, IDocumentsJobIdRenderPostApiResponse apiResponseLocalVar, string jobId, Option<DocumentsJobIdRenderPostRequest> documentsJobIdRenderPostRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="jobId"></param>
        /// <param name="documentsJobIdRenderPostRequest"></param>
        private void OnErrorDocumentsJobIdRenderPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string jobId, Option<DocumentsJobIdRenderPostRequest> documentsJobIdRenderPostRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDocumentsJobIdRenderPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, jobId, documentsJobIdRenderPostRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="jobId"></param>
        /// <param name="documentsJobIdRenderPostRequest"></param>
        partial void OnErrorDocumentsJobIdRenderPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string jobId, Option<DocumentsJobIdRenderPostRequest> documentsJobIdRenderPostRequest);

        /// <summary>
        /// Start Render Job Takes a previously initialized job, updates its status to in-progress, and triggers the rendering process using Puppeteer. Can optionally wait for render completion.
        /// </summary>
        /// <param name="jobId"></param>
        /// <param name="documentsJobIdRenderPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDocumentsJobIdRenderPostApiResponse"/>&gt;</returns>
        public async Task<IDocumentsJobIdRenderPostApiResponse?> DocumentsJobIdRenderPostOrDefaultAsync(string jobId, Option<DocumentsJobIdRenderPostRequest> documentsJobIdRenderPostRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DocumentsJobIdRenderPostAsync(jobId, documentsJobIdRenderPostRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Start Render Job Takes a previously initialized job, updates its status to in-progress, and triggers the rendering process using Puppeteer. Can optionally wait for render completion.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <param name="documentsJobIdRenderPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDocumentsJobIdRenderPostApiResponse"/>&gt;</returns>
        public async Task<IDocumentsJobIdRenderPostApiResponse> DocumentsJobIdRenderPostAsync(string jobId, Option<DocumentsJobIdRenderPostRequest> documentsJobIdRenderPostRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDocumentsJobIdRenderPost(jobId, documentsJobIdRenderPostRequest);

                FormatDocumentsJobIdRenderPost(ref jobId, documentsJobIdRenderPostRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/documents/{jobId}/render"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/documents/{jobId}/render");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BjobId%7D", Uri.EscapeDataString(jobId.ToString()));

                    if (documentsJobIdRenderPostRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (documentsJobIdRenderPostRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(documentsJobIdRenderPostRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DocumentsJobIdRenderPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DocumentsJobIdRenderPostApiResponse>();

                        DocumentsJobIdRenderPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/documents/{jobId}/render", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDocumentsJobIdRenderPostDefaultImplementation(apiResponseLocalVar, jobId, documentsJobIdRenderPostRequest);

                        Events.ExecuteOnDocumentsJobIdRenderPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDocumentsJobIdRenderPostDefaultImplementation(e, "/documents/{jobId}/render", uriBuilderLocalVar.Path, jobId, documentsJobIdRenderPostRequest);
                Events.ExecuteOnErrorDocumentsJobIdRenderPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DocumentsJobIdRenderPostApiResponse"/>
        /// </summary>
        public partial class DocumentsJobIdRenderPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IDocumentsJobIdRenderPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DocumentsJobIdRenderPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DocumentsJobIdRenderPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DocumentsJobIdRenderPostApiResponse(ILogger<DocumentsJobIdRenderPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.DocumentsJobIdRenderPost200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.DocumentsJobIdRenderPost200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.DocumentsJobIdRenderPost200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDocumentsRenderPreviewPost(ref string templateId, TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdRenderPreviewsPostRequest"></param>
        /// <returns></returns>
        private void ValidateDocumentsRenderPreviewPost(string templateId, TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest)
        {
            if (templateId == null)
                throw new ArgumentNullException(nameof(templateId));

            if (templatesTemplateIdRenderPreviewsPostRequest == null)
                throw new ArgumentNullException(nameof(templatesTemplateIdRenderPreviewsPostRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdRenderPreviewsPostRequest"></param>
        private void AfterDocumentsRenderPreviewPostDefaultImplementation(IDocumentsRenderPreviewPostApiResponse apiResponseLocalVar, string templateId, TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest)
        {
            bool suppressDefaultLog = false;
            AfterDocumentsRenderPreviewPost(ref suppressDefaultLog, apiResponseLocalVar, templateId, templatesTemplateIdRenderPreviewsPostRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdRenderPreviewsPostRequest"></param>
        partial void AfterDocumentsRenderPreviewPost(ref bool suppressDefaultLog, IDocumentsRenderPreviewPostApiResponse apiResponseLocalVar, string templateId, TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdRenderPreviewsPostRequest"></param>
        private void OnErrorDocumentsRenderPreviewPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string templateId, TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDocumentsRenderPreviewPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, templateId, templatesTemplateIdRenderPreviewsPostRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdRenderPreviewsPostRequest"></param>
        partial void OnErrorDocumentsRenderPreviewPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string templateId, TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest);

        /// <summary>
        /// Generate Document Preview Generates a preview by creating a single-page render job, processing it immediately, and returning the output URL. Used for template visualization.
        /// </summary>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdRenderPreviewsPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDocumentsRenderPreviewPostApiResponse"/>&gt;</returns>
        public async Task<IDocumentsRenderPreviewPostApiResponse?> DocumentsRenderPreviewPostOrDefaultAsync(string templateId, TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DocumentsRenderPreviewPostAsync(templateId, templatesTemplateIdRenderPreviewsPostRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Generate Document Preview Generates a preview by creating a single-page render job, processing it immediately, and returning the output URL. Used for template visualization.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdRenderPreviewsPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDocumentsRenderPreviewPostApiResponse"/>&gt;</returns>
        public async Task<IDocumentsRenderPreviewPostApiResponse> DocumentsRenderPreviewPostAsync(string templateId, TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDocumentsRenderPreviewPost(templateId, templatesTemplateIdRenderPreviewsPostRequest);

                FormatDocumentsRenderPreviewPost(ref templateId, templatesTemplateIdRenderPreviewsPostRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/documents/render-preview"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/documents/render-preview");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["templateId"] = ClientUtils.ParameterToString(templateId);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (templatesTemplateIdRenderPreviewsPostRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(templatesTemplateIdRenderPreviewsPostRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DocumentsRenderPreviewPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DocumentsRenderPreviewPostApiResponse>();

                        DocumentsRenderPreviewPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/documents/render-preview", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDocumentsRenderPreviewPostDefaultImplementation(apiResponseLocalVar, templateId, templatesTemplateIdRenderPreviewsPostRequest);

                        Events.ExecuteOnDocumentsRenderPreviewPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDocumentsRenderPreviewPostDefaultImplementation(e, "/documents/render-preview", uriBuilderLocalVar.Path, templateId, templatesTemplateIdRenderPreviewsPostRequest);
                Events.ExecuteOnErrorDocumentsRenderPreviewPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DocumentsRenderPreviewPostApiResponse"/>
        /// </summary>
        public partial class DocumentsRenderPreviewPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IDocumentsRenderPreviewPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DocumentsRenderPreviewPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DocumentsRenderPreviewPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DocumentsRenderPreviewPostApiResponse(ILogger<DocumentsRenderPreviewPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.TemplatesTemplateIdRenderPreviewsPost200ResponsePngPreview? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.TemplatesTemplateIdRenderPreviewsPost200ResponsePngPreview>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.TemplatesTemplateIdRenderPreviewsPost200ResponsePngPreview? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatJobsJobIdGet(ref string jobId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="jobId"></param>
        /// <returns></returns>
        private void ValidateJobsJobIdGet(string jobId)
        {
            if (jobId == null)
                throw new ArgumentNullException(nameof(jobId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="jobId"></param>
        private void AfterJobsJobIdGetDefaultImplementation(IJobsJobIdGetApiResponse apiResponseLocalVar, string jobId)
        {
            bool suppressDefaultLog = false;
            AfterJobsJobIdGet(ref suppressDefaultLog, apiResponseLocalVar, jobId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="jobId"></param>
        partial void AfterJobsJobIdGet(ref bool suppressDefaultLog, IJobsJobIdGetApiResponse apiResponseLocalVar, string jobId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="jobId"></param>
        private void OnErrorJobsJobIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string jobId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorJobsJobIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, jobId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="jobId"></param>
        partial void OnErrorJobsJobIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string jobId);

        /// <summary>
        /// Get Job Status Fetches detailed job information from S3 storage including job status, template ID, target format, and output details if available.
        /// </summary>
        /// <param name="jobId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJobsJobIdGetApiResponse"/>&gt;</returns>
        public async Task<IJobsJobIdGetApiResponse?> JobsJobIdGetOrDefaultAsync(string jobId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await JobsJobIdGetAsync(jobId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Job Status Fetches detailed job information from S3 storage including job status, template ID, target format, and output details if available.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJobsJobIdGetApiResponse"/>&gt;</returns>
        public async Task<IJobsJobIdGetApiResponse> JobsJobIdGetAsync(string jobId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateJobsJobIdGet(jobId);

                FormatJobsJobIdGet(ref jobId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/jobs/{jobId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/jobs/{jobId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BjobId%7D", Uri.EscapeDataString(jobId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<JobsJobIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<JobsJobIdGetApiResponse>();

                        JobsJobIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/jobs/{jobId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterJobsJobIdGetDefaultImplementation(apiResponseLocalVar, jobId);

                        Events.ExecuteOnJobsJobIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorJobsJobIdGetDefaultImplementation(e, "/jobs/{jobId}", uriBuilderLocalVar.Path, jobId);
                Events.ExecuteOnErrorJobsJobIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="JobsJobIdGetApiResponse"/>
        /// </summary>
        public partial class JobsJobIdGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IJobsJobIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<JobsJobIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="JobsJobIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public JobsJobIdGetApiResponse(ILogger<JobsJobIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.JobsJobIdGet200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.JobsJobIdGet200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.JobsJobIdGet200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
