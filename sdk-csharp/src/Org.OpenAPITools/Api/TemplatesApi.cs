// <auto-generated>
/*
 * Pogodoc API
 *
 * API for Pogodoc document and template management service. Provides endpoints for rendering documents, managing templates, generating previews, and handling API tokens.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ITemplatesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        TemplatesApiEvents Events { get; }

        /// <summary>
        /// Initialize Template Creation
        /// </summary>
        /// <remarks>
        /// Initializes template creation by generating a unique ID and providing a presigned URL for template ZIP upload. Sets unfinished tag for tracking incomplete templates.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesInitGetApiResponse"/>&gt;</returns>
        Task<ITemplatesInitGetApiResponse> TemplatesInitGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Initialize Template Creation
        /// </summary>
        /// <remarks>
        /// Initializes template creation by generating a unique ID and providing a presigned URL for template ZIP upload. Sets unfinished tag for tracking incomplete templates.
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesInitGetApiResponse"/>?&gt;</returns>
        Task<ITemplatesInitGetApiResponse?> TemplatesInitGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Clone Template
        /// </summary>
        /// <remarks>
        /// Creates a new template by duplicating an existing template&#39;s content and metadata. Includes copying preview files and template index.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdClonePostApiResponse"/>&gt;</returns>
        Task<ITemplatesTemplateIdClonePostApiResponse> TemplatesTemplateIdClonePostAsync(string templateId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Clone Template
        /// </summary>
        /// <remarks>
        /// Creates a new template by duplicating an existing template&#39;s content and metadata. Includes copying preview files and template index.
        /// </remarks>
        /// <param name="templateId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdClonePostApiResponse"/>?&gt;</returns>
        Task<ITemplatesTemplateIdClonePostApiResponse?> TemplatesTemplateIdClonePostOrDefaultAsync(string templateId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Template
        /// </summary>
        /// <remarks>
        /// Deletes a template from Strapi and associated S3 storage. Removes all associated files and metadata.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdDeleteApiResponse"/>&gt;</returns>
        Task<ITemplatesTemplateIdDeleteApiResponse> TemplatesTemplateIdDeleteAsync(string templateId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Template
        /// </summary>
        /// <remarks>
        /// Deletes a template from Strapi and associated S3 storage. Removes all associated files and metadata.
        /// </remarks>
        /// <param name="templateId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdDeleteApiResponse"/>?&gt;</returns>
        Task<ITemplatesTemplateIdDeleteApiResponse?> TemplatesTemplateIdDeleteOrDefaultAsync(string templateId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Template Index HTML
        /// </summary>
        /// <remarks>
        /// Retrieves the template index.html file from S3 storage. Used for rendering the template in the browser.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdIndexHtmlGetApiResponse"/>&gt;</returns>
        Task<ITemplatesTemplateIdIndexHtmlGetApiResponse> TemplatesTemplateIdIndexHtmlGetAsync(string templateId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Template Index HTML
        /// </summary>
        /// <remarks>
        /// Retrieves the template index.html file from S3 storage. Used for rendering the template in the browser.
        /// </remarks>
        /// <param name="templateId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdIndexHtmlGetApiResponse"/>?&gt;</returns>
        Task<ITemplatesTemplateIdIndexHtmlGetApiResponse?> TemplatesTemplateIdIndexHtmlGetOrDefaultAsync(string templateId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Upload Template Index HTML
        /// </summary>
        /// <remarks>
        /// Uploads the template index.html file to S3 storage. Used for rendering the template in the browser.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdIndexHtmlGet200Response"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdIndexHtmlPostApiResponse"/>&gt;</returns>
        Task<ITemplatesTemplateIdIndexHtmlPostApiResponse> TemplatesTemplateIdIndexHtmlPostAsync(string templateId, TemplatesTemplateIdIndexHtmlGet200Response templatesTemplateIdIndexHtmlGet200Response, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Upload Template Index HTML
        /// </summary>
        /// <remarks>
        /// Uploads the template index.html file to S3 storage. Used for rendering the template in the browser.
        /// </remarks>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdIndexHtmlGet200Response"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdIndexHtmlPostApiResponse"/>?&gt;</returns>
        Task<ITemplatesTemplateIdIndexHtmlPostApiResponse?> TemplatesTemplateIdIndexHtmlPostOrDefaultAsync(string templateId, TemplatesTemplateIdIndexHtmlGet200Response templatesTemplateIdIndexHtmlGet200Response, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Save New Template
        /// </summary>
        /// <remarks>
        /// Finalizes template creation by saving template info to Strapi, copying preview files to permanent storage, and creating template index. Removes unfinished tag upon completion.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdPostApiResponse"/>&gt;</returns>
        Task<ITemplatesTemplateIdPostApiResponse> TemplatesTemplateIdPostAsync(string templateId, TemplatesTemplateIdPostRequest templatesTemplateIdPostRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Save New Template
        /// </summary>
        /// <remarks>
        /// Finalizes template creation by saving template info to Strapi, copying preview files to permanent storage, and creating template index. Removes unfinished tag upon completion.
        /// </remarks>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdPostApiResponse"/>?&gt;</returns>
        Task<ITemplatesTemplateIdPostApiResponse?> TemplatesTemplateIdPostOrDefaultAsync(string templateId, TemplatesTemplateIdPostRequest templatesTemplateIdPostRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Presigned URL
        /// </summary>
        /// <remarks>
        /// Generates a presigned URL for template access. Used for downloading template files from S3 storage.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdPresignedUrlGetApiResponse"/>&gt;</returns>
        Task<ITemplatesTemplateIdPresignedUrlGetApiResponse> TemplatesTemplateIdPresignedUrlGetAsync(string templateId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Presigned URL
        /// </summary>
        /// <remarks>
        /// Generates a presigned URL for template access. Used for downloading template files from S3 storage.
        /// </remarks>
        /// <param name="templateId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdPresignedUrlGetApiResponse"/>?&gt;</returns>
        Task<ITemplatesTemplateIdPresignedUrlGetApiResponse?> TemplatesTemplateIdPresignedUrlGetOrDefaultAsync(string templateId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Template
        /// </summary>
        /// <remarks>
        /// Updates template content, handles S3 storage cleanup for old content, updates template metadata in Strapi, and manages preview files. Removes unfinished tags after successful update.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdPutApiResponse"/>&gt;</returns>
        Task<ITemplatesTemplateIdPutApiResponse> TemplatesTemplateIdPutAsync(string templateId, Option<TemplatesTemplateIdPutRequest> templatesTemplateIdPutRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Template
        /// </summary>
        /// <remarks>
        /// Updates template content, handles S3 storage cleanup for old content, updates template metadata in Strapi, and manages preview files. Removes unfinished tags after successful update.
        /// </remarks>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdPutApiResponse"/>?&gt;</returns>
        Task<ITemplatesTemplateIdPutApiResponse?> TemplatesTemplateIdPutOrDefaultAsync(string templateId, Option<TemplatesTemplateIdPutRequest> templatesTemplateIdPutRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Template Previews
        /// </summary>
        /// <remarks>
        /// Creates both PNG and PDF preview files for template visualization. Generates previews in parallel and returns URLs for both formats.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdRenderPreviewsPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdRenderPreviewsPostApiResponse"/>&gt;</returns>
        Task<ITemplatesTemplateIdRenderPreviewsPostApiResponse> TemplatesTemplateIdRenderPreviewsPostAsync(string templateId, TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Template Previews
        /// </summary>
        /// <remarks>
        /// Creates both PNG and PDF preview files for template visualization. Generates previews in parallel and returns URLs for both formats.
        /// </remarks>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdRenderPreviewsPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdRenderPreviewsPostApiResponse"/>?&gt;</returns>
        Task<ITemplatesTemplateIdRenderPreviewsPostApiResponse?> TemplatesTemplateIdRenderPreviewsPostOrDefaultAsync(string templateId, TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Extract Template Files
        /// </summary>
        /// <remarks>
        /// Extracts contents from an uploaded template ZIP file and stores individual files in the appropriate S3 storage structure.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdUnzipPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdUnzipPostApiResponse"/>&gt;</returns>
        Task<ITemplatesTemplateIdUnzipPostApiResponse> TemplatesTemplateIdUnzipPostAsync(string templateId, TemplatesTemplateIdUnzipPostRequest templatesTemplateIdUnzipPostRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Extract Template Files
        /// </summary>
        /// <remarks>
        /// Extracts contents from an uploaded template ZIP file and stores individual files in the appropriate S3 storage structure.
        /// </remarks>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdUnzipPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdUnzipPostApiResponse"/>?&gt;</returns>
        Task<ITemplatesTemplateIdUnzipPostApiResponse?> TemplatesTemplateIdUnzipPostOrDefaultAsync(string templateId, TemplatesTemplateIdUnzipPostRequest templatesTemplateIdUnzipPostRequest, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ITemplatesInitGetApiResponse"/>
    /// </summary>
    public interface ITemplatesInitGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.TemplatesInitGet200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ITemplatesTemplateIdClonePostApiResponse"/>
    /// </summary>
    public interface ITemplatesTemplateIdClonePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.TemplatesTemplateIdClonePost200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ITemplatesTemplateIdDeleteApiResponse"/>
    /// </summary>
    public interface ITemplatesTemplateIdDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ITemplatesTemplateIdIndexHtmlGetApiResponse"/>
    /// </summary>
    public interface ITemplatesTemplateIdIndexHtmlGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.TemplatesTemplateIdIndexHtmlGet200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ITemplatesTemplateIdIndexHtmlPostApiResponse"/>
    /// </summary>
    public interface ITemplatesTemplateIdIndexHtmlPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ITemplatesTemplateIdPostApiResponse"/>
    /// </summary>
    public interface ITemplatesTemplateIdPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ITemplatesTemplateIdPresignedUrlGetApiResponse"/>
    /// </summary>
    public interface ITemplatesTemplateIdPresignedUrlGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.TemplatesTemplateIdPresignedUrlGet200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ITemplatesTemplateIdPutApiResponse"/>
    /// </summary>
    public interface ITemplatesTemplateIdPutApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.TemplatesTemplateIdPut200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ITemplatesTemplateIdRenderPreviewsPostApiResponse"/>
    /// </summary>
    public interface ITemplatesTemplateIdRenderPreviewsPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.TemplatesTemplateIdRenderPreviewsPost200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ITemplatesTemplateIdUnzipPostApiResponse"/>
    /// </summary>
    public interface ITemplatesTemplateIdUnzipPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class TemplatesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTemplatesInitGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTemplatesInitGet;

        internal void ExecuteOnTemplatesInitGet(TemplatesApi.TemplatesInitGetApiResponse apiResponse)
        {
            OnTemplatesInitGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTemplatesInitGet(Exception exception)
        {
            OnErrorTemplatesInitGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTemplatesTemplateIdClonePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTemplatesTemplateIdClonePost;

        internal void ExecuteOnTemplatesTemplateIdClonePost(TemplatesApi.TemplatesTemplateIdClonePostApiResponse apiResponse)
        {
            OnTemplatesTemplateIdClonePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTemplatesTemplateIdClonePost(Exception exception)
        {
            OnErrorTemplatesTemplateIdClonePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTemplatesTemplateIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTemplatesTemplateIdDelete;

        internal void ExecuteOnTemplatesTemplateIdDelete(TemplatesApi.TemplatesTemplateIdDeleteApiResponse apiResponse)
        {
            OnTemplatesTemplateIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTemplatesTemplateIdDelete(Exception exception)
        {
            OnErrorTemplatesTemplateIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTemplatesTemplateIdIndexHtmlGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTemplatesTemplateIdIndexHtmlGet;

        internal void ExecuteOnTemplatesTemplateIdIndexHtmlGet(TemplatesApi.TemplatesTemplateIdIndexHtmlGetApiResponse apiResponse)
        {
            OnTemplatesTemplateIdIndexHtmlGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTemplatesTemplateIdIndexHtmlGet(Exception exception)
        {
            OnErrorTemplatesTemplateIdIndexHtmlGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTemplatesTemplateIdIndexHtmlPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTemplatesTemplateIdIndexHtmlPost;

        internal void ExecuteOnTemplatesTemplateIdIndexHtmlPost(TemplatesApi.TemplatesTemplateIdIndexHtmlPostApiResponse apiResponse)
        {
            OnTemplatesTemplateIdIndexHtmlPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTemplatesTemplateIdIndexHtmlPost(Exception exception)
        {
            OnErrorTemplatesTemplateIdIndexHtmlPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTemplatesTemplateIdPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTemplatesTemplateIdPost;

        internal void ExecuteOnTemplatesTemplateIdPost(TemplatesApi.TemplatesTemplateIdPostApiResponse apiResponse)
        {
            OnTemplatesTemplateIdPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTemplatesTemplateIdPost(Exception exception)
        {
            OnErrorTemplatesTemplateIdPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTemplatesTemplateIdPresignedUrlGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTemplatesTemplateIdPresignedUrlGet;

        internal void ExecuteOnTemplatesTemplateIdPresignedUrlGet(TemplatesApi.TemplatesTemplateIdPresignedUrlGetApiResponse apiResponse)
        {
            OnTemplatesTemplateIdPresignedUrlGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTemplatesTemplateIdPresignedUrlGet(Exception exception)
        {
            OnErrorTemplatesTemplateIdPresignedUrlGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTemplatesTemplateIdPut;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTemplatesTemplateIdPut;

        internal void ExecuteOnTemplatesTemplateIdPut(TemplatesApi.TemplatesTemplateIdPutApiResponse apiResponse)
        {
            OnTemplatesTemplateIdPut?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTemplatesTemplateIdPut(Exception exception)
        {
            OnErrorTemplatesTemplateIdPut?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTemplatesTemplateIdRenderPreviewsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTemplatesTemplateIdRenderPreviewsPost;

        internal void ExecuteOnTemplatesTemplateIdRenderPreviewsPost(TemplatesApi.TemplatesTemplateIdRenderPreviewsPostApiResponse apiResponse)
        {
            OnTemplatesTemplateIdRenderPreviewsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTemplatesTemplateIdRenderPreviewsPost(Exception exception)
        {
            OnErrorTemplatesTemplateIdRenderPreviewsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTemplatesTemplateIdUnzipPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTemplatesTemplateIdUnzipPost;

        internal void ExecuteOnTemplatesTemplateIdUnzipPost(TemplatesApi.TemplatesTemplateIdUnzipPostApiResponse apiResponse)
        {
            OnTemplatesTemplateIdUnzipPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTemplatesTemplateIdUnzipPost(Exception exception)
        {
            OnErrorTemplatesTemplateIdUnzipPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class TemplatesApi : ITemplatesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<TemplatesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public TemplatesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplatesApi(ILogger<TemplatesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, TemplatesApiEvents templatesApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<TemplatesApi>();
            HttpClient = httpClient;
            Events = templatesApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterTemplatesInitGetDefaultImplementation(ITemplatesInitGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterTemplatesInitGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterTemplatesInitGet(ref bool suppressDefaultLog, ITemplatesInitGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorTemplatesInitGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTemplatesInitGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorTemplatesInitGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Initialize Template Creation Initializes template creation by generating a unique ID and providing a presigned URL for template ZIP upload. Sets unfinished tag for tracking incomplete templates.
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesInitGetApiResponse"/>&gt;</returns>
        public async Task<ITemplatesInitGetApiResponse?> TemplatesInitGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TemplatesInitGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Initialize Template Creation Initializes template creation by generating a unique ID and providing a presigned URL for template ZIP upload. Sets unfinished tag for tracking incomplete templates.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesInitGetApiResponse"/>&gt;</returns>
        public async Task<ITemplatesInitGetApiResponse> TemplatesInitGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/templates/init"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/templates/init");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TemplatesInitGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TemplatesInitGetApiResponse>();

                        TemplatesInitGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/templates/init", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTemplatesInitGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnTemplatesInitGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTemplatesInitGetDefaultImplementation(e, "/templates/init", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorTemplatesInitGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TemplatesInitGetApiResponse"/>
        /// </summary>
        public partial class TemplatesInitGetApiResponse : Org.OpenAPITools.Client.ApiResponse, ITemplatesInitGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TemplatesInitGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TemplatesInitGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TemplatesInitGetApiResponse(ILogger<TemplatesInitGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.TemplatesInitGet200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.TemplatesInitGet200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.TemplatesInitGet200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTemplatesTemplateIdClonePost(ref string templateId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="templateId"></param>
        /// <returns></returns>
        private void ValidateTemplatesTemplateIdClonePost(string templateId)
        {
            if (templateId == null)
                throw new ArgumentNullException(nameof(templateId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        private void AfterTemplatesTemplateIdClonePostDefaultImplementation(ITemplatesTemplateIdClonePostApiResponse apiResponseLocalVar, string templateId)
        {
            bool suppressDefaultLog = false;
            AfterTemplatesTemplateIdClonePost(ref suppressDefaultLog, apiResponseLocalVar, templateId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        partial void AfterTemplatesTemplateIdClonePost(ref bool suppressDefaultLog, ITemplatesTemplateIdClonePostApiResponse apiResponseLocalVar, string templateId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        private void OnErrorTemplatesTemplateIdClonePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string templateId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTemplatesTemplateIdClonePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, templateId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        partial void OnErrorTemplatesTemplateIdClonePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string templateId);

        /// <summary>
        /// Clone Template Creates a new template by duplicating an existing template&#39;s content and metadata. Includes copying preview files and template index.
        /// </summary>
        /// <param name="templateId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdClonePostApiResponse"/>&gt;</returns>
        public async Task<ITemplatesTemplateIdClonePostApiResponse?> TemplatesTemplateIdClonePostOrDefaultAsync(string templateId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TemplatesTemplateIdClonePostAsync(templateId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Clone Template Creates a new template by duplicating an existing template&#39;s content and metadata. Includes copying preview files and template index.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdClonePostApiResponse"/>&gt;</returns>
        public async Task<ITemplatesTemplateIdClonePostApiResponse> TemplatesTemplateIdClonePostAsync(string templateId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTemplatesTemplateIdClonePost(templateId);

                FormatTemplatesTemplateIdClonePost(ref templateId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/templates/{templateId}/clone"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/templates/{templateId}/clone");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtemplateId%7D", Uri.EscapeDataString(templateId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TemplatesTemplateIdClonePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TemplatesTemplateIdClonePostApiResponse>();

                        TemplatesTemplateIdClonePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/templates/{templateId}/clone", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTemplatesTemplateIdClonePostDefaultImplementation(apiResponseLocalVar, templateId);

                        Events.ExecuteOnTemplatesTemplateIdClonePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTemplatesTemplateIdClonePostDefaultImplementation(e, "/templates/{templateId}/clone", uriBuilderLocalVar.Path, templateId);
                Events.ExecuteOnErrorTemplatesTemplateIdClonePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TemplatesTemplateIdClonePostApiResponse"/>
        /// </summary>
        public partial class TemplatesTemplateIdClonePostApiResponse : Org.OpenAPITools.Client.ApiResponse, ITemplatesTemplateIdClonePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TemplatesTemplateIdClonePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TemplatesTemplateIdClonePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TemplatesTemplateIdClonePostApiResponse(ILogger<TemplatesTemplateIdClonePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.TemplatesTemplateIdClonePost200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.TemplatesTemplateIdClonePost200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.TemplatesTemplateIdClonePost200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTemplatesTemplateIdDelete(ref string templateId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="templateId"></param>
        /// <returns></returns>
        private void ValidateTemplatesTemplateIdDelete(string templateId)
        {
            if (templateId == null)
                throw new ArgumentNullException(nameof(templateId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        private void AfterTemplatesTemplateIdDeleteDefaultImplementation(ITemplatesTemplateIdDeleteApiResponse apiResponseLocalVar, string templateId)
        {
            bool suppressDefaultLog = false;
            AfterTemplatesTemplateIdDelete(ref suppressDefaultLog, apiResponseLocalVar, templateId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        partial void AfterTemplatesTemplateIdDelete(ref bool suppressDefaultLog, ITemplatesTemplateIdDeleteApiResponse apiResponseLocalVar, string templateId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        private void OnErrorTemplatesTemplateIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string templateId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTemplatesTemplateIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, templateId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        partial void OnErrorTemplatesTemplateIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string templateId);

        /// <summary>
        /// Delete Template Deletes a template from Strapi and associated S3 storage. Removes all associated files and metadata.
        /// </summary>
        /// <param name="templateId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdDeleteApiResponse"/>&gt;</returns>
        public async Task<ITemplatesTemplateIdDeleteApiResponse?> TemplatesTemplateIdDeleteOrDefaultAsync(string templateId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TemplatesTemplateIdDeleteAsync(templateId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Template Deletes a template from Strapi and associated S3 storage. Removes all associated files and metadata.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdDeleteApiResponse"/>&gt;</returns>
        public async Task<ITemplatesTemplateIdDeleteApiResponse> TemplatesTemplateIdDeleteAsync(string templateId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTemplatesTemplateIdDelete(templateId);

                FormatTemplatesTemplateIdDelete(ref templateId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/templates/{templateId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/templates/{templateId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtemplateId%7D", Uri.EscapeDataString(templateId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TemplatesTemplateIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TemplatesTemplateIdDeleteApiResponse>();

                        TemplatesTemplateIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/templates/{templateId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTemplatesTemplateIdDeleteDefaultImplementation(apiResponseLocalVar, templateId);

                        Events.ExecuteOnTemplatesTemplateIdDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTemplatesTemplateIdDeleteDefaultImplementation(e, "/templates/{templateId}", uriBuilderLocalVar.Path, templateId);
                Events.ExecuteOnErrorTemplatesTemplateIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TemplatesTemplateIdDeleteApiResponse"/>
        /// </summary>
        public partial class TemplatesTemplateIdDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, ITemplatesTemplateIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TemplatesTemplateIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TemplatesTemplateIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TemplatesTemplateIdDeleteApiResponse(ILogger<TemplatesTemplateIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTemplatesTemplateIdIndexHtmlGet(ref string templateId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="templateId"></param>
        /// <returns></returns>
        private void ValidateTemplatesTemplateIdIndexHtmlGet(string templateId)
        {
            if (templateId == null)
                throw new ArgumentNullException(nameof(templateId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        private void AfterTemplatesTemplateIdIndexHtmlGetDefaultImplementation(ITemplatesTemplateIdIndexHtmlGetApiResponse apiResponseLocalVar, string templateId)
        {
            bool suppressDefaultLog = false;
            AfterTemplatesTemplateIdIndexHtmlGet(ref suppressDefaultLog, apiResponseLocalVar, templateId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        partial void AfterTemplatesTemplateIdIndexHtmlGet(ref bool suppressDefaultLog, ITemplatesTemplateIdIndexHtmlGetApiResponse apiResponseLocalVar, string templateId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        private void OnErrorTemplatesTemplateIdIndexHtmlGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string templateId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTemplatesTemplateIdIndexHtmlGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, templateId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        partial void OnErrorTemplatesTemplateIdIndexHtmlGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string templateId);

        /// <summary>
        /// Get Template Index HTML Retrieves the template index.html file from S3 storage. Used for rendering the template in the browser.
        /// </summary>
        /// <param name="templateId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdIndexHtmlGetApiResponse"/>&gt;</returns>
        public async Task<ITemplatesTemplateIdIndexHtmlGetApiResponse?> TemplatesTemplateIdIndexHtmlGetOrDefaultAsync(string templateId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TemplatesTemplateIdIndexHtmlGetAsync(templateId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Template Index HTML Retrieves the template index.html file from S3 storage. Used for rendering the template in the browser.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdIndexHtmlGetApiResponse"/>&gt;</returns>
        public async Task<ITemplatesTemplateIdIndexHtmlGetApiResponse> TemplatesTemplateIdIndexHtmlGetAsync(string templateId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTemplatesTemplateIdIndexHtmlGet(templateId);

                FormatTemplatesTemplateIdIndexHtmlGet(ref templateId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/templates/{templateId}/index-html"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/templates/{templateId}/index-html");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtemplateId%7D", Uri.EscapeDataString(templateId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TemplatesTemplateIdIndexHtmlGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TemplatesTemplateIdIndexHtmlGetApiResponse>();

                        TemplatesTemplateIdIndexHtmlGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/templates/{templateId}/index-html", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTemplatesTemplateIdIndexHtmlGetDefaultImplementation(apiResponseLocalVar, templateId);

                        Events.ExecuteOnTemplatesTemplateIdIndexHtmlGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTemplatesTemplateIdIndexHtmlGetDefaultImplementation(e, "/templates/{templateId}/index-html", uriBuilderLocalVar.Path, templateId);
                Events.ExecuteOnErrorTemplatesTemplateIdIndexHtmlGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TemplatesTemplateIdIndexHtmlGetApiResponse"/>
        /// </summary>
        public partial class TemplatesTemplateIdIndexHtmlGetApiResponse : Org.OpenAPITools.Client.ApiResponse, ITemplatesTemplateIdIndexHtmlGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TemplatesTemplateIdIndexHtmlGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TemplatesTemplateIdIndexHtmlGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TemplatesTemplateIdIndexHtmlGetApiResponse(ILogger<TemplatesTemplateIdIndexHtmlGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.TemplatesTemplateIdIndexHtmlGet200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.TemplatesTemplateIdIndexHtmlGet200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.TemplatesTemplateIdIndexHtmlGet200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTemplatesTemplateIdIndexHtmlPost(ref string templateId, TemplatesTemplateIdIndexHtmlGet200Response templatesTemplateIdIndexHtmlGet200Response);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdIndexHtmlGet200Response"></param>
        /// <returns></returns>
        private void ValidateTemplatesTemplateIdIndexHtmlPost(string templateId, TemplatesTemplateIdIndexHtmlGet200Response templatesTemplateIdIndexHtmlGet200Response)
        {
            if (templateId == null)
                throw new ArgumentNullException(nameof(templateId));

            if (templatesTemplateIdIndexHtmlGet200Response == null)
                throw new ArgumentNullException(nameof(templatesTemplateIdIndexHtmlGet200Response));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdIndexHtmlGet200Response"></param>
        private void AfterTemplatesTemplateIdIndexHtmlPostDefaultImplementation(ITemplatesTemplateIdIndexHtmlPostApiResponse apiResponseLocalVar, string templateId, TemplatesTemplateIdIndexHtmlGet200Response templatesTemplateIdIndexHtmlGet200Response)
        {
            bool suppressDefaultLog = false;
            AfterTemplatesTemplateIdIndexHtmlPost(ref suppressDefaultLog, apiResponseLocalVar, templateId, templatesTemplateIdIndexHtmlGet200Response);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdIndexHtmlGet200Response"></param>
        partial void AfterTemplatesTemplateIdIndexHtmlPost(ref bool suppressDefaultLog, ITemplatesTemplateIdIndexHtmlPostApiResponse apiResponseLocalVar, string templateId, TemplatesTemplateIdIndexHtmlGet200Response templatesTemplateIdIndexHtmlGet200Response);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdIndexHtmlGet200Response"></param>
        private void OnErrorTemplatesTemplateIdIndexHtmlPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string templateId, TemplatesTemplateIdIndexHtmlGet200Response templatesTemplateIdIndexHtmlGet200Response)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTemplatesTemplateIdIndexHtmlPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, templateId, templatesTemplateIdIndexHtmlGet200Response);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdIndexHtmlGet200Response"></param>
        partial void OnErrorTemplatesTemplateIdIndexHtmlPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string templateId, TemplatesTemplateIdIndexHtmlGet200Response templatesTemplateIdIndexHtmlGet200Response);

        /// <summary>
        /// Upload Template Index HTML Uploads the template index.html file to S3 storage. Used for rendering the template in the browser.
        /// </summary>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdIndexHtmlGet200Response"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdIndexHtmlPostApiResponse"/>&gt;</returns>
        public async Task<ITemplatesTemplateIdIndexHtmlPostApiResponse?> TemplatesTemplateIdIndexHtmlPostOrDefaultAsync(string templateId, TemplatesTemplateIdIndexHtmlGet200Response templatesTemplateIdIndexHtmlGet200Response, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TemplatesTemplateIdIndexHtmlPostAsync(templateId, templatesTemplateIdIndexHtmlGet200Response, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Upload Template Index HTML Uploads the template index.html file to S3 storage. Used for rendering the template in the browser.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdIndexHtmlGet200Response"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdIndexHtmlPostApiResponse"/>&gt;</returns>
        public async Task<ITemplatesTemplateIdIndexHtmlPostApiResponse> TemplatesTemplateIdIndexHtmlPostAsync(string templateId, TemplatesTemplateIdIndexHtmlGet200Response templatesTemplateIdIndexHtmlGet200Response, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTemplatesTemplateIdIndexHtmlPost(templateId, templatesTemplateIdIndexHtmlGet200Response);

                FormatTemplatesTemplateIdIndexHtmlPost(ref templateId, templatesTemplateIdIndexHtmlGet200Response);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/templates/{templateId}/index-html"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/templates/{templateId}/index-html");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtemplateId%7D", Uri.EscapeDataString(templateId.ToString()));

                    httpRequestMessageLocalVar.Content = (templatesTemplateIdIndexHtmlGet200Response as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(templatesTemplateIdIndexHtmlGet200Response, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TemplatesTemplateIdIndexHtmlPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TemplatesTemplateIdIndexHtmlPostApiResponse>();

                        TemplatesTemplateIdIndexHtmlPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/templates/{templateId}/index-html", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTemplatesTemplateIdIndexHtmlPostDefaultImplementation(apiResponseLocalVar, templateId, templatesTemplateIdIndexHtmlGet200Response);

                        Events.ExecuteOnTemplatesTemplateIdIndexHtmlPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTemplatesTemplateIdIndexHtmlPostDefaultImplementation(e, "/templates/{templateId}/index-html", uriBuilderLocalVar.Path, templateId, templatesTemplateIdIndexHtmlGet200Response);
                Events.ExecuteOnErrorTemplatesTemplateIdIndexHtmlPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TemplatesTemplateIdIndexHtmlPostApiResponse"/>
        /// </summary>
        public partial class TemplatesTemplateIdIndexHtmlPostApiResponse : Org.OpenAPITools.Client.ApiResponse, ITemplatesTemplateIdIndexHtmlPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TemplatesTemplateIdIndexHtmlPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TemplatesTemplateIdIndexHtmlPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TemplatesTemplateIdIndexHtmlPostApiResponse(ILogger<TemplatesTemplateIdIndexHtmlPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTemplatesTemplateIdPost(ref string templateId, TemplatesTemplateIdPostRequest templatesTemplateIdPostRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdPostRequest"></param>
        /// <returns></returns>
        private void ValidateTemplatesTemplateIdPost(string templateId, TemplatesTemplateIdPostRequest templatesTemplateIdPostRequest)
        {
            if (templateId == null)
                throw new ArgumentNullException(nameof(templateId));

            if (templatesTemplateIdPostRequest == null)
                throw new ArgumentNullException(nameof(templatesTemplateIdPostRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdPostRequest"></param>
        private void AfterTemplatesTemplateIdPostDefaultImplementation(ITemplatesTemplateIdPostApiResponse apiResponseLocalVar, string templateId, TemplatesTemplateIdPostRequest templatesTemplateIdPostRequest)
        {
            bool suppressDefaultLog = false;
            AfterTemplatesTemplateIdPost(ref suppressDefaultLog, apiResponseLocalVar, templateId, templatesTemplateIdPostRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdPostRequest"></param>
        partial void AfterTemplatesTemplateIdPost(ref bool suppressDefaultLog, ITemplatesTemplateIdPostApiResponse apiResponseLocalVar, string templateId, TemplatesTemplateIdPostRequest templatesTemplateIdPostRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdPostRequest"></param>
        private void OnErrorTemplatesTemplateIdPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string templateId, TemplatesTemplateIdPostRequest templatesTemplateIdPostRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTemplatesTemplateIdPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, templateId, templatesTemplateIdPostRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdPostRequest"></param>
        partial void OnErrorTemplatesTemplateIdPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string templateId, TemplatesTemplateIdPostRequest templatesTemplateIdPostRequest);

        /// <summary>
        /// Save New Template Finalizes template creation by saving template info to Strapi, copying preview files to permanent storage, and creating template index. Removes unfinished tag upon completion.
        /// </summary>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdPostApiResponse"/>&gt;</returns>
        public async Task<ITemplatesTemplateIdPostApiResponse?> TemplatesTemplateIdPostOrDefaultAsync(string templateId, TemplatesTemplateIdPostRequest templatesTemplateIdPostRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TemplatesTemplateIdPostAsync(templateId, templatesTemplateIdPostRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Save New Template Finalizes template creation by saving template info to Strapi, copying preview files to permanent storage, and creating template index. Removes unfinished tag upon completion.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdPostApiResponse"/>&gt;</returns>
        public async Task<ITemplatesTemplateIdPostApiResponse> TemplatesTemplateIdPostAsync(string templateId, TemplatesTemplateIdPostRequest templatesTemplateIdPostRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTemplatesTemplateIdPost(templateId, templatesTemplateIdPostRequest);

                FormatTemplatesTemplateIdPost(ref templateId, templatesTemplateIdPostRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/templates/{templateId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/templates/{templateId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtemplateId%7D", Uri.EscapeDataString(templateId.ToString()));

                    httpRequestMessageLocalVar.Content = (templatesTemplateIdPostRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(templatesTemplateIdPostRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TemplatesTemplateIdPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TemplatesTemplateIdPostApiResponse>();

                        TemplatesTemplateIdPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/templates/{templateId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTemplatesTemplateIdPostDefaultImplementation(apiResponseLocalVar, templateId, templatesTemplateIdPostRequest);

                        Events.ExecuteOnTemplatesTemplateIdPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTemplatesTemplateIdPostDefaultImplementation(e, "/templates/{templateId}", uriBuilderLocalVar.Path, templateId, templatesTemplateIdPostRequest);
                Events.ExecuteOnErrorTemplatesTemplateIdPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TemplatesTemplateIdPostApiResponse"/>
        /// </summary>
        public partial class TemplatesTemplateIdPostApiResponse : Org.OpenAPITools.Client.ApiResponse, ITemplatesTemplateIdPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TemplatesTemplateIdPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TemplatesTemplateIdPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TemplatesTemplateIdPostApiResponse(ILogger<TemplatesTemplateIdPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTemplatesTemplateIdPresignedUrlGet(ref string templateId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="templateId"></param>
        /// <returns></returns>
        private void ValidateTemplatesTemplateIdPresignedUrlGet(string templateId)
        {
            if (templateId == null)
                throw new ArgumentNullException(nameof(templateId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        private void AfterTemplatesTemplateIdPresignedUrlGetDefaultImplementation(ITemplatesTemplateIdPresignedUrlGetApiResponse apiResponseLocalVar, string templateId)
        {
            bool suppressDefaultLog = false;
            AfterTemplatesTemplateIdPresignedUrlGet(ref suppressDefaultLog, apiResponseLocalVar, templateId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        partial void AfterTemplatesTemplateIdPresignedUrlGet(ref bool suppressDefaultLog, ITemplatesTemplateIdPresignedUrlGetApiResponse apiResponseLocalVar, string templateId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        private void OnErrorTemplatesTemplateIdPresignedUrlGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string templateId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTemplatesTemplateIdPresignedUrlGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, templateId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        partial void OnErrorTemplatesTemplateIdPresignedUrlGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string templateId);

        /// <summary>
        /// Generate Presigned URL Generates a presigned URL for template access. Used for downloading template files from S3 storage.
        /// </summary>
        /// <param name="templateId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdPresignedUrlGetApiResponse"/>&gt;</returns>
        public async Task<ITemplatesTemplateIdPresignedUrlGetApiResponse?> TemplatesTemplateIdPresignedUrlGetOrDefaultAsync(string templateId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TemplatesTemplateIdPresignedUrlGetAsync(templateId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Generate Presigned URL Generates a presigned URL for template access. Used for downloading template files from S3 storage.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdPresignedUrlGetApiResponse"/>&gt;</returns>
        public async Task<ITemplatesTemplateIdPresignedUrlGetApiResponse> TemplatesTemplateIdPresignedUrlGetAsync(string templateId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTemplatesTemplateIdPresignedUrlGet(templateId);

                FormatTemplatesTemplateIdPresignedUrlGet(ref templateId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/templates/{templateId}/presigned-url"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/templates/{templateId}/presigned-url");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtemplateId%7D", Uri.EscapeDataString(templateId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TemplatesTemplateIdPresignedUrlGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TemplatesTemplateIdPresignedUrlGetApiResponse>();

                        TemplatesTemplateIdPresignedUrlGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/templates/{templateId}/presigned-url", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTemplatesTemplateIdPresignedUrlGetDefaultImplementation(apiResponseLocalVar, templateId);

                        Events.ExecuteOnTemplatesTemplateIdPresignedUrlGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTemplatesTemplateIdPresignedUrlGetDefaultImplementation(e, "/templates/{templateId}/presigned-url", uriBuilderLocalVar.Path, templateId);
                Events.ExecuteOnErrorTemplatesTemplateIdPresignedUrlGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TemplatesTemplateIdPresignedUrlGetApiResponse"/>
        /// </summary>
        public partial class TemplatesTemplateIdPresignedUrlGetApiResponse : Org.OpenAPITools.Client.ApiResponse, ITemplatesTemplateIdPresignedUrlGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TemplatesTemplateIdPresignedUrlGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TemplatesTemplateIdPresignedUrlGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TemplatesTemplateIdPresignedUrlGetApiResponse(ILogger<TemplatesTemplateIdPresignedUrlGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.TemplatesTemplateIdPresignedUrlGet200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.TemplatesTemplateIdPresignedUrlGet200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.TemplatesTemplateIdPresignedUrlGet200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTemplatesTemplateIdPut(ref string templateId, Option<TemplatesTemplateIdPutRequest> templatesTemplateIdPutRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdPutRequest"></param>
        /// <returns></returns>
        private void ValidateTemplatesTemplateIdPut(string templateId, Option<TemplatesTemplateIdPutRequest> templatesTemplateIdPutRequest)
        {
            if (templateId == null)
                throw new ArgumentNullException(nameof(templateId));

            if (templatesTemplateIdPutRequest.IsSet && templatesTemplateIdPutRequest.Value == null)
                throw new ArgumentNullException(nameof(templatesTemplateIdPutRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdPutRequest"></param>
        private void AfterTemplatesTemplateIdPutDefaultImplementation(ITemplatesTemplateIdPutApiResponse apiResponseLocalVar, string templateId, Option<TemplatesTemplateIdPutRequest> templatesTemplateIdPutRequest)
        {
            bool suppressDefaultLog = false;
            AfterTemplatesTemplateIdPut(ref suppressDefaultLog, apiResponseLocalVar, templateId, templatesTemplateIdPutRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdPutRequest"></param>
        partial void AfterTemplatesTemplateIdPut(ref bool suppressDefaultLog, ITemplatesTemplateIdPutApiResponse apiResponseLocalVar, string templateId, Option<TemplatesTemplateIdPutRequest> templatesTemplateIdPutRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdPutRequest"></param>
        private void OnErrorTemplatesTemplateIdPutDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string templateId, Option<TemplatesTemplateIdPutRequest> templatesTemplateIdPutRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTemplatesTemplateIdPut(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, templateId, templatesTemplateIdPutRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdPutRequest"></param>
        partial void OnErrorTemplatesTemplateIdPut(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string templateId, Option<TemplatesTemplateIdPutRequest> templatesTemplateIdPutRequest);

        /// <summary>
        /// Update Template Updates template content, handles S3 storage cleanup for old content, updates template metadata in Strapi, and manages preview files. Removes unfinished tags after successful update.
        /// </summary>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdPutApiResponse"/>&gt;</returns>
        public async Task<ITemplatesTemplateIdPutApiResponse?> TemplatesTemplateIdPutOrDefaultAsync(string templateId, Option<TemplatesTemplateIdPutRequest> templatesTemplateIdPutRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TemplatesTemplateIdPutAsync(templateId, templatesTemplateIdPutRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Template Updates template content, handles S3 storage cleanup for old content, updates template metadata in Strapi, and manages preview files. Removes unfinished tags after successful update.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdPutApiResponse"/>&gt;</returns>
        public async Task<ITemplatesTemplateIdPutApiResponse> TemplatesTemplateIdPutAsync(string templateId, Option<TemplatesTemplateIdPutRequest> templatesTemplateIdPutRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTemplatesTemplateIdPut(templateId, templatesTemplateIdPutRequest);

                FormatTemplatesTemplateIdPut(ref templateId, templatesTemplateIdPutRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/templates/{templateId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/templates/{templateId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtemplateId%7D", Uri.EscapeDataString(templateId.ToString()));

                    if (templatesTemplateIdPutRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (templatesTemplateIdPutRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(templatesTemplateIdPutRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TemplatesTemplateIdPutApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TemplatesTemplateIdPutApiResponse>();

                        TemplatesTemplateIdPutApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/templates/{templateId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTemplatesTemplateIdPutDefaultImplementation(apiResponseLocalVar, templateId, templatesTemplateIdPutRequest);

                        Events.ExecuteOnTemplatesTemplateIdPut(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTemplatesTemplateIdPutDefaultImplementation(e, "/templates/{templateId}", uriBuilderLocalVar.Path, templateId, templatesTemplateIdPutRequest);
                Events.ExecuteOnErrorTemplatesTemplateIdPut(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TemplatesTemplateIdPutApiResponse"/>
        /// </summary>
        public partial class TemplatesTemplateIdPutApiResponse : Org.OpenAPITools.Client.ApiResponse, ITemplatesTemplateIdPutApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TemplatesTemplateIdPutApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TemplatesTemplateIdPutApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TemplatesTemplateIdPutApiResponse(ILogger<TemplatesTemplateIdPutApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.TemplatesTemplateIdPut200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.TemplatesTemplateIdPut200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.TemplatesTemplateIdPut200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTemplatesTemplateIdRenderPreviewsPost(ref string templateId, TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdRenderPreviewsPostRequest"></param>
        /// <returns></returns>
        private void ValidateTemplatesTemplateIdRenderPreviewsPost(string templateId, TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest)
        {
            if (templateId == null)
                throw new ArgumentNullException(nameof(templateId));

            if (templatesTemplateIdRenderPreviewsPostRequest == null)
                throw new ArgumentNullException(nameof(templatesTemplateIdRenderPreviewsPostRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdRenderPreviewsPostRequest"></param>
        private void AfterTemplatesTemplateIdRenderPreviewsPostDefaultImplementation(ITemplatesTemplateIdRenderPreviewsPostApiResponse apiResponseLocalVar, string templateId, TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest)
        {
            bool suppressDefaultLog = false;
            AfterTemplatesTemplateIdRenderPreviewsPost(ref suppressDefaultLog, apiResponseLocalVar, templateId, templatesTemplateIdRenderPreviewsPostRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdRenderPreviewsPostRequest"></param>
        partial void AfterTemplatesTemplateIdRenderPreviewsPost(ref bool suppressDefaultLog, ITemplatesTemplateIdRenderPreviewsPostApiResponse apiResponseLocalVar, string templateId, TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdRenderPreviewsPostRequest"></param>
        private void OnErrorTemplatesTemplateIdRenderPreviewsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string templateId, TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTemplatesTemplateIdRenderPreviewsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, templateId, templatesTemplateIdRenderPreviewsPostRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdRenderPreviewsPostRequest"></param>
        partial void OnErrorTemplatesTemplateIdRenderPreviewsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string templateId, TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest);

        /// <summary>
        /// Generate Template Previews Creates both PNG and PDF preview files for template visualization. Generates previews in parallel and returns URLs for both formats.
        /// </summary>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdRenderPreviewsPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdRenderPreviewsPostApiResponse"/>&gt;</returns>
        public async Task<ITemplatesTemplateIdRenderPreviewsPostApiResponse?> TemplatesTemplateIdRenderPreviewsPostOrDefaultAsync(string templateId, TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TemplatesTemplateIdRenderPreviewsPostAsync(templateId, templatesTemplateIdRenderPreviewsPostRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Generate Template Previews Creates both PNG and PDF preview files for template visualization. Generates previews in parallel and returns URLs for both formats.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdRenderPreviewsPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdRenderPreviewsPostApiResponse"/>&gt;</returns>
        public async Task<ITemplatesTemplateIdRenderPreviewsPostApiResponse> TemplatesTemplateIdRenderPreviewsPostAsync(string templateId, TemplatesTemplateIdRenderPreviewsPostRequest templatesTemplateIdRenderPreviewsPostRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTemplatesTemplateIdRenderPreviewsPost(templateId, templatesTemplateIdRenderPreviewsPostRequest);

                FormatTemplatesTemplateIdRenderPreviewsPost(ref templateId, templatesTemplateIdRenderPreviewsPostRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/templates/{templateId}/render-previews"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/templates/{templateId}/render-previews");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtemplateId%7D", Uri.EscapeDataString(templateId.ToString()));

                    httpRequestMessageLocalVar.Content = (templatesTemplateIdRenderPreviewsPostRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(templatesTemplateIdRenderPreviewsPostRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TemplatesTemplateIdRenderPreviewsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TemplatesTemplateIdRenderPreviewsPostApiResponse>();

                        TemplatesTemplateIdRenderPreviewsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/templates/{templateId}/render-previews", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTemplatesTemplateIdRenderPreviewsPostDefaultImplementation(apiResponseLocalVar, templateId, templatesTemplateIdRenderPreviewsPostRequest);

                        Events.ExecuteOnTemplatesTemplateIdRenderPreviewsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTemplatesTemplateIdRenderPreviewsPostDefaultImplementation(e, "/templates/{templateId}/render-previews", uriBuilderLocalVar.Path, templateId, templatesTemplateIdRenderPreviewsPostRequest);
                Events.ExecuteOnErrorTemplatesTemplateIdRenderPreviewsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TemplatesTemplateIdRenderPreviewsPostApiResponse"/>
        /// </summary>
        public partial class TemplatesTemplateIdRenderPreviewsPostApiResponse : Org.OpenAPITools.Client.ApiResponse, ITemplatesTemplateIdRenderPreviewsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TemplatesTemplateIdRenderPreviewsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TemplatesTemplateIdRenderPreviewsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TemplatesTemplateIdRenderPreviewsPostApiResponse(ILogger<TemplatesTemplateIdRenderPreviewsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.TemplatesTemplateIdRenderPreviewsPost200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.TemplatesTemplateIdRenderPreviewsPost200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.TemplatesTemplateIdRenderPreviewsPost200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTemplatesTemplateIdUnzipPost(ref string templateId, TemplatesTemplateIdUnzipPostRequest templatesTemplateIdUnzipPostRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdUnzipPostRequest"></param>
        /// <returns></returns>
        private void ValidateTemplatesTemplateIdUnzipPost(string templateId, TemplatesTemplateIdUnzipPostRequest templatesTemplateIdUnzipPostRequest)
        {
            if (templateId == null)
                throw new ArgumentNullException(nameof(templateId));

            if (templatesTemplateIdUnzipPostRequest == null)
                throw new ArgumentNullException(nameof(templatesTemplateIdUnzipPostRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdUnzipPostRequest"></param>
        private void AfterTemplatesTemplateIdUnzipPostDefaultImplementation(ITemplatesTemplateIdUnzipPostApiResponse apiResponseLocalVar, string templateId, TemplatesTemplateIdUnzipPostRequest templatesTemplateIdUnzipPostRequest)
        {
            bool suppressDefaultLog = false;
            AfterTemplatesTemplateIdUnzipPost(ref suppressDefaultLog, apiResponseLocalVar, templateId, templatesTemplateIdUnzipPostRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdUnzipPostRequest"></param>
        partial void AfterTemplatesTemplateIdUnzipPost(ref bool suppressDefaultLog, ITemplatesTemplateIdUnzipPostApiResponse apiResponseLocalVar, string templateId, TemplatesTemplateIdUnzipPostRequest templatesTemplateIdUnzipPostRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdUnzipPostRequest"></param>
        private void OnErrorTemplatesTemplateIdUnzipPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string templateId, TemplatesTemplateIdUnzipPostRequest templatesTemplateIdUnzipPostRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTemplatesTemplateIdUnzipPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, templateId, templatesTemplateIdUnzipPostRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdUnzipPostRequest"></param>
        partial void OnErrorTemplatesTemplateIdUnzipPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string templateId, TemplatesTemplateIdUnzipPostRequest templatesTemplateIdUnzipPostRequest);

        /// <summary>
        /// Extract Template Files Extracts contents from an uploaded template ZIP file and stores individual files in the appropriate S3 storage structure.
        /// </summary>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdUnzipPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdUnzipPostApiResponse"/>&gt;</returns>
        public async Task<ITemplatesTemplateIdUnzipPostApiResponse?> TemplatesTemplateIdUnzipPostOrDefaultAsync(string templateId, TemplatesTemplateIdUnzipPostRequest templatesTemplateIdUnzipPostRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TemplatesTemplateIdUnzipPostAsync(templateId, templatesTemplateIdUnzipPostRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Extract Template Files Extracts contents from an uploaded template ZIP file and stores individual files in the appropriate S3 storage structure.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="templatesTemplateIdUnzipPostRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITemplatesTemplateIdUnzipPostApiResponse"/>&gt;</returns>
        public async Task<ITemplatesTemplateIdUnzipPostApiResponse> TemplatesTemplateIdUnzipPostAsync(string templateId, TemplatesTemplateIdUnzipPostRequest templatesTemplateIdUnzipPostRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTemplatesTemplateIdUnzipPost(templateId, templatesTemplateIdUnzipPostRequest);

                FormatTemplatesTemplateIdUnzipPost(ref templateId, templatesTemplateIdUnzipPostRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/templates/{templateId}/unzip"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/templates/{templateId}/unzip");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtemplateId%7D", Uri.EscapeDataString(templateId.ToString()));

                    httpRequestMessageLocalVar.Content = (templatesTemplateIdUnzipPostRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(templatesTemplateIdUnzipPostRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TemplatesTemplateIdUnzipPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TemplatesTemplateIdUnzipPostApiResponse>();

                        TemplatesTemplateIdUnzipPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/templates/{templateId}/unzip", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTemplatesTemplateIdUnzipPostDefaultImplementation(apiResponseLocalVar, templateId, templatesTemplateIdUnzipPostRequest);

                        Events.ExecuteOnTemplatesTemplateIdUnzipPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTemplatesTemplateIdUnzipPostDefaultImplementation(e, "/templates/{templateId}/unzip", uriBuilderLocalVar.Path, templateId, templatesTemplateIdUnzipPostRequest);
                Events.ExecuteOnErrorTemplatesTemplateIdUnzipPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TemplatesTemplateIdUnzipPostApiResponse"/>
        /// </summary>
        public partial class TemplatesTemplateIdUnzipPostApiResponse : Org.OpenAPITools.Client.ApiResponse, ITemplatesTemplateIdUnzipPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TemplatesTemplateIdUnzipPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TemplatesTemplateIdUnzipPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TemplatesTemplateIdUnzipPostApiResponse(ILogger<TemplatesTemplateIdUnzipPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
