// <auto-generated>
/*
 * Pogodoc API
 *
 * API for Pogodoc document and template management service. Provides endpoints for rendering documents, managing templates, generating previews, and handling API tokens.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// JobsJobIdGet200Response
    /// </summary>
    public partial class JobsJobIdGet200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobsJobIdGet200Response" /> class.
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="jobId">jobId</param>
        /// <param name="target">target</param>
        /// <param name="output">output</param>
        /// <param name="success">success</param>
        /// <param name="status">status</param>
        [JsonConstructor]
        public JobsJobIdGet200Response(TemplatesTemplateIdPutRequestAllOfTemplateInfoType type, string jobId, DocumentsInitPostRequestAllOfTarget target, Option<JobsJobIdGet200ResponseOutput?> output = default, Option<bool?> success = default, Option<string?> status = default)
        {
            Type = type;
            JobId = jobId;
            Target = target;
            OutputOption = output;
            SuccessOption = success;
            StatusOption = status;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public TemplatesTemplateIdPutRequestAllOfTemplateInfoType Type { get; set; }

        /// <summary>
        /// Gets or Sets JobId
        /// </summary>
        [JsonPropertyName("jobId")]
        public string JobId { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [JsonPropertyName("target")]
        public DocumentsInitPostRequestAllOfTarget Target { get; set; }

        /// <summary>
        /// Used to track the state of Output
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<JobsJobIdGet200ResponseOutput?> OutputOption { get; private set; }

        /// <summary>
        /// Gets or Sets Output
        /// </summary>
        [JsonPropertyName("output")]
        public JobsJobIdGet200ResponseOutput? Output { get { return this.OutputOption; } set { this.OutputOption = new(value); } }

        /// <summary>
        /// Used to track the state of Success
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SuccessOption { get; private set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [JsonPropertyName("success")]
        public bool? Success { get { return this.SuccessOption; } set { this.SuccessOption = new(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public string? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JobsJobIdGet200Response {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  JobId: ").Append(JobId).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  Output: ").Append(Output).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="JobsJobIdGet200Response" />
    /// </summary>
    public class JobsJobIdGet200ResponseJsonConverter : JsonConverter<JobsJobIdGet200Response>
    {
        /// <summary>
        /// Deserializes json to <see cref="JobsJobIdGet200Response" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override JobsJobIdGet200Response Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<TemplatesTemplateIdPutRequestAllOfTemplateInfoType?> type = default;
            Option<string?> jobId = default;
            Option<DocumentsInitPostRequestAllOfTarget?> target = default;
            Option<JobsJobIdGet200ResponseOutput?> output = default;
            Option<bool?> success = default;
            Option<string?> status = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            type = new Option<TemplatesTemplateIdPutRequestAllOfTemplateInfoType?>(JsonSerializer.Deserialize<TemplatesTemplateIdPutRequestAllOfTemplateInfoType>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "jobId":
                            jobId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "target":
                            target = new Option<DocumentsInitPostRequestAllOfTarget?>(JsonSerializer.Deserialize<DocumentsInitPostRequestAllOfTarget>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "output":
                            output = new Option<JobsJobIdGet200ResponseOutput?>(JsonSerializer.Deserialize<JobsJobIdGet200ResponseOutput>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "success":
                            success = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "status":
                            status = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class JobsJobIdGet200Response.", nameof(type));

            if (!jobId.IsSet)
                throw new ArgumentException("Property is required for class JobsJobIdGet200Response.", nameof(jobId));

            if (!target.IsSet)
                throw new ArgumentException("Property is required for class JobsJobIdGet200Response.", nameof(target));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class JobsJobIdGet200Response.");

            if (jobId.IsSet && jobId.Value == null)
                throw new ArgumentNullException(nameof(jobId), "Property is not nullable for class JobsJobIdGet200Response.");

            if (target.IsSet && target.Value == null)
                throw new ArgumentNullException(nameof(target), "Property is not nullable for class JobsJobIdGet200Response.");

            if (output.IsSet && output.Value == null)
                throw new ArgumentNullException(nameof(output), "Property is not nullable for class JobsJobIdGet200Response.");

            if (success.IsSet && success.Value == null)
                throw new ArgumentNullException(nameof(success), "Property is not nullable for class JobsJobIdGet200Response.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class JobsJobIdGet200Response.");

            return new JobsJobIdGet200Response(type.Value!, jobId.Value!, target.Value!, output, success, status);
        }

        /// <summary>
        /// Serializes a <see cref="JobsJobIdGet200Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="jobsJobIdGet200Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, JobsJobIdGet200Response jobsJobIdGet200Response, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, jobsJobIdGet200Response, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="JobsJobIdGet200Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="jobsJobIdGet200Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, JobsJobIdGet200Response jobsJobIdGet200Response, JsonSerializerOptions jsonSerializerOptions)
        {
            if (jobsJobIdGet200Response.Type == null)
                throw new ArgumentNullException(nameof(jobsJobIdGet200Response.Type), "Property is required for class JobsJobIdGet200Response.");

            if (jobsJobIdGet200Response.JobId == null)
                throw new ArgumentNullException(nameof(jobsJobIdGet200Response.JobId), "Property is required for class JobsJobIdGet200Response.");

            if (jobsJobIdGet200Response.Target == null)
                throw new ArgumentNullException(nameof(jobsJobIdGet200Response.Target), "Property is required for class JobsJobIdGet200Response.");

            if (jobsJobIdGet200Response.OutputOption.IsSet && jobsJobIdGet200Response.Output == null)
                throw new ArgumentNullException(nameof(jobsJobIdGet200Response.Output), "Property is required for class JobsJobIdGet200Response.");

            if (jobsJobIdGet200Response.StatusOption.IsSet && jobsJobIdGet200Response.Status == null)
                throw new ArgumentNullException(nameof(jobsJobIdGet200Response.Status), "Property is required for class JobsJobIdGet200Response.");

            writer.WritePropertyName("type");
            JsonSerializer.Serialize(writer, jobsJobIdGet200Response.Type, jsonSerializerOptions);
            writer.WriteString("jobId", jobsJobIdGet200Response.JobId);

            writer.WritePropertyName("target");
            JsonSerializer.Serialize(writer, jobsJobIdGet200Response.Target, jsonSerializerOptions);
            if (jobsJobIdGet200Response.OutputOption.IsSet)
            {
                writer.WritePropertyName("output");
                JsonSerializer.Serialize(writer, jobsJobIdGet200Response.Output, jsonSerializerOptions);
            }
            if (jobsJobIdGet200Response.SuccessOption.IsSet)
                writer.WriteBoolean("success", jobsJobIdGet200Response.SuccessOption.Value!.Value);

            if (jobsJobIdGet200Response.StatusOption.IsSet)
                writer.WriteString("status", jobsJobIdGet200Response.Status);
        }
    }
}
