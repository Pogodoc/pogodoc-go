// <auto-generated>
/*
 * Pogodoc API
 *
 * API for Pogodoc document and template management service. Provides endpoints for rendering documents, managing templates, generating previews, and handling API tokens.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// JobsJobIdGet200ResponseOutput
    /// </summary>
    public partial class JobsJobIdGet200ResponseOutput : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobsJobIdGet200ResponseOutput" /> class.
        /// </summary>
        /// <param name="data">data</param>
        /// <param name="metadata">metadata</param>
        [JsonConstructor]
        public JobsJobIdGet200ResponseOutput(DocumentsImmediateRenderPost200Response data, JobsJobIdGet200ResponseOutputMetadata metadata)
        {
            Data = data;
            Metadata = metadata;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public DocumentsImmediateRenderPost200Response Data { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [JsonPropertyName("metadata")]
        public JobsJobIdGet200ResponseOutputMetadata Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JobsJobIdGet200ResponseOutput {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="JobsJobIdGet200ResponseOutput" />
    /// </summary>
    public class JobsJobIdGet200ResponseOutputJsonConverter : JsonConverter<JobsJobIdGet200ResponseOutput>
    {
        /// <summary>
        /// Deserializes json to <see cref="JobsJobIdGet200ResponseOutput" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override JobsJobIdGet200ResponseOutput Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DocumentsImmediateRenderPost200Response?> data = default;
            Option<JobsJobIdGet200ResponseOutputMetadata?> metadata = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "data":
                            data = new Option<DocumentsImmediateRenderPost200Response?>(JsonSerializer.Deserialize<DocumentsImmediateRenderPost200Response>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "metadata":
                            metadata = new Option<JobsJobIdGet200ResponseOutputMetadata?>(JsonSerializer.Deserialize<JobsJobIdGet200ResponseOutputMetadata>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!data.IsSet)
                throw new ArgumentException("Property is required for class JobsJobIdGet200ResponseOutput.", nameof(data));

            if (!metadata.IsSet)
                throw new ArgumentException("Property is required for class JobsJobIdGet200ResponseOutput.", nameof(metadata));

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class JobsJobIdGet200ResponseOutput.");

            if (metadata.IsSet && metadata.Value == null)
                throw new ArgumentNullException(nameof(metadata), "Property is not nullable for class JobsJobIdGet200ResponseOutput.");

            return new JobsJobIdGet200ResponseOutput(data.Value!, metadata.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="JobsJobIdGet200ResponseOutput" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="jobsJobIdGet200ResponseOutput"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, JobsJobIdGet200ResponseOutput jobsJobIdGet200ResponseOutput, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, jobsJobIdGet200ResponseOutput, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="JobsJobIdGet200ResponseOutput" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="jobsJobIdGet200ResponseOutput"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, JobsJobIdGet200ResponseOutput jobsJobIdGet200ResponseOutput, JsonSerializerOptions jsonSerializerOptions)
        {
            if (jobsJobIdGet200ResponseOutput.Data == null)
                throw new ArgumentNullException(nameof(jobsJobIdGet200ResponseOutput.Data), "Property is required for class JobsJobIdGet200ResponseOutput.");

            if (jobsJobIdGet200ResponseOutput.Metadata == null)
                throw new ArgumentNullException(nameof(jobsJobIdGet200ResponseOutput.Metadata), "Property is required for class JobsJobIdGet200ResponseOutput.");

            writer.WritePropertyName("data");
            JsonSerializer.Serialize(writer, jobsJobIdGet200ResponseOutput.Data, jsonSerializerOptions);
            writer.WritePropertyName("metadata");
            JsonSerializer.Serialize(writer, jobsJobIdGet200ResponseOutput.Metadata, jsonSerializerOptions);
        }
    }
}
