// <auto-generated>
/*
 * Pogodoc API
 *
 * API for Pogodoc document and template management service. Provides endpoints for rendering documents, managing templates, generating previews, and handling API tokens.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DocumentsInitPost200Response
    /// </summary>
    public partial class DocumentsInitPost200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsInitPost200Response" /> class.
        /// </summary>
        /// <param name="jobId">jobId</param>
        /// <param name="target">target</param>
        /// <param name="presignedDataUploadUrl">presignedDataUploadUrl</param>
        /// <param name="presignedTemplateUploadUrl">presignedTemplateUploadUrl</param>
        [JsonConstructor]
        public DocumentsInitPost200Response(string jobId, DocumentsInitPostRequestAllOfTarget target, string? presignedDataUploadUrl = default, string? presignedTemplateUploadUrl = default)
        {
            JobId = jobId;
            Target = target;
            PresignedDataUploadUrl = presignedDataUploadUrl;
            PresignedTemplateUploadUrl = presignedTemplateUploadUrl;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets JobId
        /// </summary>
        [JsonPropertyName("jobId")]
        public string JobId { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [JsonPropertyName("target")]
        public DocumentsInitPostRequestAllOfTarget Target { get; set; }

        /// <summary>
        /// Gets or Sets PresignedDataUploadUrl
        /// </summary>
        [JsonPropertyName("presignedDataUploadUrl")]
        public string? PresignedDataUploadUrl { get; set; }

        /// <summary>
        /// Gets or Sets PresignedTemplateUploadUrl
        /// </summary>
        [JsonPropertyName("presignedTemplateUploadUrl")]
        public string? PresignedTemplateUploadUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentsInitPost200Response {\n");
            sb.Append("  JobId: ").Append(JobId).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  PresignedDataUploadUrl: ").Append(PresignedDataUploadUrl).Append("\n");
            sb.Append("  PresignedTemplateUploadUrl: ").Append(PresignedTemplateUploadUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DocumentsInitPost200Response" />
    /// </summary>
    public class DocumentsInitPost200ResponseJsonConverter : JsonConverter<DocumentsInitPost200Response>
    {
        /// <summary>
        /// Deserializes json to <see cref="DocumentsInitPost200Response" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DocumentsInitPost200Response Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> jobId = default;
            Option<DocumentsInitPostRequestAllOfTarget?> target = default;
            Option<string?> presignedDataUploadUrl = default;
            Option<string?> presignedTemplateUploadUrl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "jobId":
                            jobId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "target":
                            target = new Option<DocumentsInitPostRequestAllOfTarget?>(JsonSerializer.Deserialize<DocumentsInitPostRequestAllOfTarget>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "presignedDataUploadUrl":
                            presignedDataUploadUrl = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "presignedTemplateUploadUrl":
                            presignedTemplateUploadUrl = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!jobId.IsSet)
                throw new ArgumentException("Property is required for class DocumentsInitPost200Response.", nameof(jobId));

            if (!target.IsSet)
                throw new ArgumentException("Property is required for class DocumentsInitPost200Response.", nameof(target));

            if (!presignedDataUploadUrl.IsSet)
                throw new ArgumentException("Property is required for class DocumentsInitPost200Response.", nameof(presignedDataUploadUrl));

            if (!presignedTemplateUploadUrl.IsSet)
                throw new ArgumentException("Property is required for class DocumentsInitPost200Response.", nameof(presignedTemplateUploadUrl));

            if (jobId.IsSet && jobId.Value == null)
                throw new ArgumentNullException(nameof(jobId), "Property is not nullable for class DocumentsInitPost200Response.");

            if (target.IsSet && target.Value == null)
                throw new ArgumentNullException(nameof(target), "Property is not nullable for class DocumentsInitPost200Response.");

            return new DocumentsInitPost200Response(jobId.Value!, target.Value!, presignedDataUploadUrl.Value!, presignedTemplateUploadUrl.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="DocumentsInitPost200Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="documentsInitPost200Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DocumentsInitPost200Response documentsInitPost200Response, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, documentsInitPost200Response, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DocumentsInitPost200Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="documentsInitPost200Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DocumentsInitPost200Response documentsInitPost200Response, JsonSerializerOptions jsonSerializerOptions)
        {
            if (documentsInitPost200Response.JobId == null)
                throw new ArgumentNullException(nameof(documentsInitPost200Response.JobId), "Property is required for class DocumentsInitPost200Response.");

            if (documentsInitPost200Response.Target == null)
                throw new ArgumentNullException(nameof(documentsInitPost200Response.Target), "Property is required for class DocumentsInitPost200Response.");

            writer.WriteString("jobId", documentsInitPost200Response.JobId);

            writer.WritePropertyName("target");
            JsonSerializer.Serialize(writer, documentsInitPost200Response.Target, jsonSerializerOptions);
            if (documentsInitPost200Response.PresignedDataUploadUrl != null)
                writer.WriteString("presignedDataUploadUrl", documentsInitPost200Response.PresignedDataUploadUrl);
            else
                writer.WriteNull("presignedDataUploadUrl");

            if (documentsInitPost200Response.PresignedTemplateUploadUrl != null)
                writer.WriteString("presignedTemplateUploadUrl", documentsInitPost200Response.PresignedTemplateUploadUrl);
            else
                writer.WriteNull("presignedTemplateUploadUrl");
        }
    }
}
