// <auto-generated>
/*
 * Pogodoc API
 *
 * API for Pogodoc document and template management service. Provides endpoints for rendering documents, managing templates, generating previews, and handling API tokens.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TemplatesTemplateIdPutRequestAllOfTemplateInfo
    /// </summary>
    public partial class TemplatesTemplateIdPutRequestAllOfTemplateInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesTemplateIdPutRequestAllOfTemplateInfo" /> class.
        /// </summary>
        /// <param name="title">title</param>
        /// <param name="description">description</param>
        /// <param name="type">type</param>
        /// <param name="sampleData">sampleData</param>
        /// <param name="categories">categories</param>
        /// <param name="sourceCode">sourceCode</param>
        [JsonConstructor]
        public TemplatesTemplateIdPutRequestAllOfTemplateInfo(string title, string description, TemplatesTemplateIdPutRequestAllOfTemplateInfoType type, Dictionary<string, Object> sampleData, List<TemplatesTemplateIdPutRequestAllOfTemplateInfoCategoriesInner> categories, Option<string?> sourceCode = default)
        {
            Title = title;
            Description = description;
            Type = type;
            SampleData = sampleData;
            Categories = categories;
            SourceCodeOption = sourceCode;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public TemplatesTemplateIdPutRequestAllOfTemplateInfoType Type { get; set; }

        /// <summary>
        /// Gets or Sets SampleData
        /// </summary>
        [JsonPropertyName("sampleData")]
        public Dictionary<string, Object> SampleData { get; set; }

        /// <summary>
        /// Gets or Sets Categories
        /// </summary>
        [JsonPropertyName("categories")]
        public List<TemplatesTemplateIdPutRequestAllOfTemplateInfoCategoriesInner> Categories { get; set; }

        /// <summary>
        /// Used to track the state of SourceCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SourceCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets SourceCode
        /// </summary>
        [JsonPropertyName("sourceCode")]
        public string? SourceCode { get { return this.SourceCodeOption; } set { this.SourceCodeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TemplatesTemplateIdPutRequestAllOfTemplateInfo {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SampleData: ").Append(SampleData).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  SourceCode: ").Append(SourceCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TemplatesTemplateIdPutRequestAllOfTemplateInfo" />
    /// </summary>
    public class TemplatesTemplateIdPutRequestAllOfTemplateInfoJsonConverter : JsonConverter<TemplatesTemplateIdPutRequestAllOfTemplateInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="TemplatesTemplateIdPutRequestAllOfTemplateInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TemplatesTemplateIdPutRequestAllOfTemplateInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> title = default;
            Option<string?> description = default;
            Option<TemplatesTemplateIdPutRequestAllOfTemplateInfoType?> type = default;
            Option<Dictionary<string, Object>?> sampleData = default;
            Option<List<TemplatesTemplateIdPutRequestAllOfTemplateInfoCategoriesInner>?> categories = default;
            Option<string?> sourceCode = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<TemplatesTemplateIdPutRequestAllOfTemplateInfoType?>(JsonSerializer.Deserialize<TemplatesTemplateIdPutRequestAllOfTemplateInfoType>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "sampleData":
                            sampleData = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "categories":
                            categories = new Option<List<TemplatesTemplateIdPutRequestAllOfTemplateInfoCategoriesInner>?>(JsonSerializer.Deserialize<List<TemplatesTemplateIdPutRequestAllOfTemplateInfoCategoriesInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "sourceCode":
                            sourceCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class TemplatesTemplateIdPutRequestAllOfTemplateInfo.", nameof(title));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class TemplatesTemplateIdPutRequestAllOfTemplateInfo.", nameof(description));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class TemplatesTemplateIdPutRequestAllOfTemplateInfo.", nameof(type));

            if (!sampleData.IsSet)
                throw new ArgumentException("Property is required for class TemplatesTemplateIdPutRequestAllOfTemplateInfo.", nameof(sampleData));

            if (!categories.IsSet)
                throw new ArgumentException("Property is required for class TemplatesTemplateIdPutRequestAllOfTemplateInfo.", nameof(categories));

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class TemplatesTemplateIdPutRequestAllOfTemplateInfo.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class TemplatesTemplateIdPutRequestAllOfTemplateInfo.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class TemplatesTemplateIdPutRequestAllOfTemplateInfo.");

            if (sampleData.IsSet && sampleData.Value == null)
                throw new ArgumentNullException(nameof(sampleData), "Property is not nullable for class TemplatesTemplateIdPutRequestAllOfTemplateInfo.");

            if (categories.IsSet && categories.Value == null)
                throw new ArgumentNullException(nameof(categories), "Property is not nullable for class TemplatesTemplateIdPutRequestAllOfTemplateInfo.");

            if (sourceCode.IsSet && sourceCode.Value == null)
                throw new ArgumentNullException(nameof(sourceCode), "Property is not nullable for class TemplatesTemplateIdPutRequestAllOfTemplateInfo.");

            return new TemplatesTemplateIdPutRequestAllOfTemplateInfo(title.Value!, description.Value!, type.Value!, sampleData.Value!, categories.Value!, sourceCode);
        }

        /// <summary>
        /// Serializes a <see cref="TemplatesTemplateIdPutRequestAllOfTemplateInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="templatesTemplateIdPutRequestAllOfTemplateInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TemplatesTemplateIdPutRequestAllOfTemplateInfo templatesTemplateIdPutRequestAllOfTemplateInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, templatesTemplateIdPutRequestAllOfTemplateInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TemplatesTemplateIdPutRequestAllOfTemplateInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="templatesTemplateIdPutRequestAllOfTemplateInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TemplatesTemplateIdPutRequestAllOfTemplateInfo templatesTemplateIdPutRequestAllOfTemplateInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (templatesTemplateIdPutRequestAllOfTemplateInfo.Title == null)
                throw new ArgumentNullException(nameof(templatesTemplateIdPutRequestAllOfTemplateInfo.Title), "Property is required for class TemplatesTemplateIdPutRequestAllOfTemplateInfo.");

            if (templatesTemplateIdPutRequestAllOfTemplateInfo.Description == null)
                throw new ArgumentNullException(nameof(templatesTemplateIdPutRequestAllOfTemplateInfo.Description), "Property is required for class TemplatesTemplateIdPutRequestAllOfTemplateInfo.");

            if (templatesTemplateIdPutRequestAllOfTemplateInfo.Type == null)
                throw new ArgumentNullException(nameof(templatesTemplateIdPutRequestAllOfTemplateInfo.Type), "Property is required for class TemplatesTemplateIdPutRequestAllOfTemplateInfo.");

            if (templatesTemplateIdPutRequestAllOfTemplateInfo.SampleData == null)
                throw new ArgumentNullException(nameof(templatesTemplateIdPutRequestAllOfTemplateInfo.SampleData), "Property is required for class TemplatesTemplateIdPutRequestAllOfTemplateInfo.");

            if (templatesTemplateIdPutRequestAllOfTemplateInfo.Categories == null)
                throw new ArgumentNullException(nameof(templatesTemplateIdPutRequestAllOfTemplateInfo.Categories), "Property is required for class TemplatesTemplateIdPutRequestAllOfTemplateInfo.");

            if (templatesTemplateIdPutRequestAllOfTemplateInfo.SourceCodeOption.IsSet && templatesTemplateIdPutRequestAllOfTemplateInfo.SourceCode == null)
                throw new ArgumentNullException(nameof(templatesTemplateIdPutRequestAllOfTemplateInfo.SourceCode), "Property is required for class TemplatesTemplateIdPutRequestAllOfTemplateInfo.");

            writer.WriteString("title", templatesTemplateIdPutRequestAllOfTemplateInfo.Title);

            writer.WriteString("description", templatesTemplateIdPutRequestAllOfTemplateInfo.Description);

            writer.WritePropertyName("type");
            JsonSerializer.Serialize(writer, templatesTemplateIdPutRequestAllOfTemplateInfo.Type, jsonSerializerOptions);
            writer.WritePropertyName("sampleData");
            JsonSerializer.Serialize(writer, templatesTemplateIdPutRequestAllOfTemplateInfo.SampleData, jsonSerializerOptions);
            writer.WritePropertyName("categories");
            JsonSerializer.Serialize(writer, templatesTemplateIdPutRequestAllOfTemplateInfo.Categories, jsonSerializerOptions);
            if (templatesTemplateIdPutRequestAllOfTemplateInfo.SourceCodeOption.IsSet)
                writer.WriteString("sourceCode", templatesTemplateIdPutRequestAllOfTemplateInfo.SourceCode);
        }
    }
}
