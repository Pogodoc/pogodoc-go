// <auto-generated>
/*
 * Pogodoc API
 *
 * API for Pogodoc document and template management service. Provides endpoints for rendering documents, managing templates, generating previews, and handling API tokens.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TemplatesTemplateIdPostRequest
    /// </summary>
    public partial class TemplatesTemplateIdPostRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesTemplateIdPostRequest" /> class.
        /// </summary>
        /// <param name="templateInfo">templateInfo</param>
        /// <param name="previewIds">previewIds</param>
        [JsonConstructor]
        public TemplatesTemplateIdPostRequest(TemplatesTemplateIdPutRequestAllOfTemplateInfo templateInfo, TemplatesTemplateIdPutRequestAllOfPreviewIds previewIds)
        {
            TemplateInfo = templateInfo;
            PreviewIds = previewIds;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets TemplateInfo
        /// </summary>
        [JsonPropertyName("templateInfo")]
        public TemplatesTemplateIdPutRequestAllOfTemplateInfo TemplateInfo { get; set; }

        /// <summary>
        /// Gets or Sets PreviewIds
        /// </summary>
        [JsonPropertyName("previewIds")]
        public TemplatesTemplateIdPutRequestAllOfPreviewIds PreviewIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TemplatesTemplateIdPostRequest {\n");
            sb.Append("  TemplateInfo: ").Append(TemplateInfo).Append("\n");
            sb.Append("  PreviewIds: ").Append(PreviewIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TemplatesTemplateIdPostRequest" />
    /// </summary>
    public class TemplatesTemplateIdPostRequestJsonConverter : JsonConverter<TemplatesTemplateIdPostRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="TemplatesTemplateIdPostRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TemplatesTemplateIdPostRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<TemplatesTemplateIdPutRequestAllOfTemplateInfo?> templateInfo = default;
            Option<TemplatesTemplateIdPutRequestAllOfPreviewIds?> previewIds = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "templateInfo":
                            templateInfo = new Option<TemplatesTemplateIdPutRequestAllOfTemplateInfo?>(JsonSerializer.Deserialize<TemplatesTemplateIdPutRequestAllOfTemplateInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "previewIds":
                            previewIds = new Option<TemplatesTemplateIdPutRequestAllOfPreviewIds?>(JsonSerializer.Deserialize<TemplatesTemplateIdPutRequestAllOfPreviewIds>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!templateInfo.IsSet)
                throw new ArgumentException("Property is required for class TemplatesTemplateIdPostRequest.", nameof(templateInfo));

            if (!previewIds.IsSet)
                throw new ArgumentException("Property is required for class TemplatesTemplateIdPostRequest.", nameof(previewIds));

            if (templateInfo.IsSet && templateInfo.Value == null)
                throw new ArgumentNullException(nameof(templateInfo), "Property is not nullable for class TemplatesTemplateIdPostRequest.");

            if (previewIds.IsSet && previewIds.Value == null)
                throw new ArgumentNullException(nameof(previewIds), "Property is not nullable for class TemplatesTemplateIdPostRequest.");

            return new TemplatesTemplateIdPostRequest(templateInfo.Value!, previewIds.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="TemplatesTemplateIdPostRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="templatesTemplateIdPostRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TemplatesTemplateIdPostRequest templatesTemplateIdPostRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, templatesTemplateIdPostRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TemplatesTemplateIdPostRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="templatesTemplateIdPostRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TemplatesTemplateIdPostRequest templatesTemplateIdPostRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (templatesTemplateIdPostRequest.TemplateInfo == null)
                throw new ArgumentNullException(nameof(templatesTemplateIdPostRequest.TemplateInfo), "Property is required for class TemplatesTemplateIdPostRequest.");

            if (templatesTemplateIdPostRequest.PreviewIds == null)
                throw new ArgumentNullException(nameof(templatesTemplateIdPostRequest.PreviewIds), "Property is required for class TemplatesTemplateIdPostRequest.");

            writer.WritePropertyName("templateInfo");
            JsonSerializer.Serialize(writer, templatesTemplateIdPostRequest.TemplateInfo, jsonSerializerOptions);
            writer.WritePropertyName("previewIds");
            JsonSerializer.Serialize(writer, templatesTemplateIdPostRequest.PreviewIds, jsonSerializerOptions);
        }
    }
}
