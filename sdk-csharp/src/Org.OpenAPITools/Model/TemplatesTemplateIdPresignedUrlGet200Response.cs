// <auto-generated>
/*
 * Pogodoc API
 *
 * API for Pogodoc document and template management service. Provides endpoints for rendering documents, managing templates, generating previews, and handling API tokens.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TemplatesTemplateIdPresignedUrlGet200Response
    /// </summary>
    public partial class TemplatesTemplateIdPresignedUrlGet200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesTemplateIdPresignedUrlGet200Response" /> class.
        /// </summary>
        /// <param name="presignedUrl">presignedUrl</param>
        [JsonConstructor]
        public TemplatesTemplateIdPresignedUrlGet200Response(string presignedUrl)
        {
            PresignedUrl = presignedUrl;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets PresignedUrl
        /// </summary>
        [JsonPropertyName("presignedUrl")]
        public string PresignedUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TemplatesTemplateIdPresignedUrlGet200Response {\n");
            sb.Append("  PresignedUrl: ").Append(PresignedUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TemplatesTemplateIdPresignedUrlGet200Response" />
    /// </summary>
    public class TemplatesTemplateIdPresignedUrlGet200ResponseJsonConverter : JsonConverter<TemplatesTemplateIdPresignedUrlGet200Response>
    {
        /// <summary>
        /// Deserializes json to <see cref="TemplatesTemplateIdPresignedUrlGet200Response" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TemplatesTemplateIdPresignedUrlGet200Response Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> presignedUrl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "presignedUrl":
                            presignedUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!presignedUrl.IsSet)
                throw new ArgumentException("Property is required for class TemplatesTemplateIdPresignedUrlGet200Response.", nameof(presignedUrl));

            if (presignedUrl.IsSet && presignedUrl.Value == null)
                throw new ArgumentNullException(nameof(presignedUrl), "Property is not nullable for class TemplatesTemplateIdPresignedUrlGet200Response.");

            return new TemplatesTemplateIdPresignedUrlGet200Response(presignedUrl.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="TemplatesTemplateIdPresignedUrlGet200Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="templatesTemplateIdPresignedUrlGet200Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TemplatesTemplateIdPresignedUrlGet200Response templatesTemplateIdPresignedUrlGet200Response, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, templatesTemplateIdPresignedUrlGet200Response, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TemplatesTemplateIdPresignedUrlGet200Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="templatesTemplateIdPresignedUrlGet200Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TemplatesTemplateIdPresignedUrlGet200Response templatesTemplateIdPresignedUrlGet200Response, JsonSerializerOptions jsonSerializerOptions)
        {
            if (templatesTemplateIdPresignedUrlGet200Response.PresignedUrl == null)
                throw new ArgumentNullException(nameof(templatesTemplateIdPresignedUrlGet200Response.PresignedUrl), "Property is required for class TemplatesTemplateIdPresignedUrlGet200Response.");

            writer.WriteString("presignedUrl", templatesTemplateIdPresignedUrlGet200Response.PresignedUrl);
        }
    }
}
