// <auto-generated>
/*
 * Pogodoc API
 *
 * API for Pogodoc document and template management service. Provides endpoints for rendering documents, managing templates, generating previews, and handling API tokens.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts
    /// </summary>
    public partial class TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts" /> class.
        /// </summary>
        /// <param name="fromPage">fromPage</param>
        /// <param name="toPage">toPage</param>
        /// <param name="format">format</param>
        /// <param name="waitForSelector">waitForSelector</param>
        [JsonConstructor]
        public TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts(Option<decimal?> fromPage = default, Option<decimal?> toPage = default, Option<TemplatesTemplateIdRenderPreviewsPostRequestFormatOptsAllOfFormat?> format = default, Option<string?> waitForSelector = default)
        {
            FromPageOption = fromPage;
            ToPageOption = toPage;
            FormatOption = format;
            WaitForSelectorOption = waitForSelector;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of FromPage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> FromPageOption { get; private set; }

        /// <summary>
        /// Gets or Sets FromPage
        /// </summary>
        [JsonPropertyName("fromPage")]
        public decimal? FromPage { get { return this.FromPageOption; } set { this.FromPageOption = new(value); } }

        /// <summary>
        /// Used to track the state of ToPage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ToPageOption { get; private set; }

        /// <summary>
        /// Gets or Sets ToPage
        /// </summary>
        [JsonPropertyName("toPage")]
        public decimal? ToPage { get { return this.ToPageOption; } set { this.ToPageOption = new(value); } }

        /// <summary>
        /// Used to track the state of Format
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TemplatesTemplateIdRenderPreviewsPostRequestFormatOptsAllOfFormat?> FormatOption { get; private set; }

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [JsonPropertyName("format")]
        public TemplatesTemplateIdRenderPreviewsPostRequestFormatOptsAllOfFormat? Format { get { return this.FormatOption; } set { this.FormatOption = new(value); } }

        /// <summary>
        /// Used to track the state of WaitForSelector
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WaitForSelectorOption { get; private set; }

        /// <summary>
        /// Gets or Sets WaitForSelector
        /// </summary>
        [JsonPropertyName("waitForSelector")]
        public string? WaitForSelector { get { return this.WaitForSelectorOption; } set { this.WaitForSelectorOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts {\n");
            sb.Append("  FromPage: ").Append(FromPage).Append("\n");
            sb.Append("  ToPage: ").Append(ToPage).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  WaitForSelector: ").Append(WaitForSelector).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts" />
    /// </summary>
    public class TemplatesTemplateIdRenderPreviewsPostRequestFormatOptsJsonConverter : JsonConverter<TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts>
    {
        /// <summary>
        /// Deserializes json to <see cref="TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> fromPage = default;
            Option<decimal?> toPage = default;
            Option<TemplatesTemplateIdRenderPreviewsPostRequestFormatOptsAllOfFormat?> format = default;
            Option<string?> waitForSelector = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "fromPage":
                            fromPage = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "toPage":
                            toPage = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "format":
                            format = new Option<TemplatesTemplateIdRenderPreviewsPostRequestFormatOptsAllOfFormat?>(JsonSerializer.Deserialize<TemplatesTemplateIdRenderPreviewsPostRequestFormatOptsAllOfFormat>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "waitForSelector":
                            waitForSelector = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (fromPage.IsSet && fromPage.Value == null)
                throw new ArgumentNullException(nameof(fromPage), "Property is not nullable for class TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts.");

            if (toPage.IsSet && toPage.Value == null)
                throw new ArgumentNullException(nameof(toPage), "Property is not nullable for class TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts.");

            if (format.IsSet && format.Value == null)
                throw new ArgumentNullException(nameof(format), "Property is not nullable for class TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts.");

            if (waitForSelector.IsSet && waitForSelector.Value == null)
                throw new ArgumentNullException(nameof(waitForSelector), "Property is not nullable for class TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts.");

            return new TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts(fromPage, toPage, format, waitForSelector);
        }

        /// <summary>
        /// Serializes a <see cref="TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="templatesTemplateIdRenderPreviewsPostRequestFormatOpts"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts templatesTemplateIdRenderPreviewsPostRequestFormatOpts, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, templatesTemplateIdRenderPreviewsPostRequestFormatOpts, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="templatesTemplateIdRenderPreviewsPostRequestFormatOpts"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts templatesTemplateIdRenderPreviewsPostRequestFormatOpts, JsonSerializerOptions jsonSerializerOptions)
        {
            if (templatesTemplateIdRenderPreviewsPostRequestFormatOpts.FormatOption.IsSet && templatesTemplateIdRenderPreviewsPostRequestFormatOpts.Format == null)
                throw new ArgumentNullException(nameof(templatesTemplateIdRenderPreviewsPostRequestFormatOpts.Format), "Property is required for class TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts.");

            if (templatesTemplateIdRenderPreviewsPostRequestFormatOpts.WaitForSelectorOption.IsSet && templatesTemplateIdRenderPreviewsPostRequestFormatOpts.WaitForSelector == null)
                throw new ArgumentNullException(nameof(templatesTemplateIdRenderPreviewsPostRequestFormatOpts.WaitForSelector), "Property is required for class TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts.");

            if (templatesTemplateIdRenderPreviewsPostRequestFormatOpts.FromPageOption.IsSet)
                writer.WriteNumber("fromPage", templatesTemplateIdRenderPreviewsPostRequestFormatOpts.FromPageOption.Value!.Value);

            if (templatesTemplateIdRenderPreviewsPostRequestFormatOpts.ToPageOption.IsSet)
                writer.WriteNumber("toPage", templatesTemplateIdRenderPreviewsPostRequestFormatOpts.ToPageOption.Value!.Value);

            if (templatesTemplateIdRenderPreviewsPostRequestFormatOpts.FormatOption.IsSet)
            {
                writer.WritePropertyName("format");
                JsonSerializer.Serialize(writer, templatesTemplateIdRenderPreviewsPostRequestFormatOpts.Format, jsonSerializerOptions);
            }
            if (templatesTemplateIdRenderPreviewsPostRequestFormatOpts.WaitForSelectorOption.IsSet)
                writer.WriteString("waitForSelector", templatesTemplateIdRenderPreviewsPostRequestFormatOpts.WaitForSelector);
        }
    }
}
