// <auto-generated>
/*
 * Pogodoc API
 *
 * API for Pogodoc document and template management service. Provides endpoints for rendering documents, managing templates, generating previews, and handling API tokens.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DocumentsInitPostRequest
    /// </summary>
    public partial class DocumentsInitPostRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsInitPostRequest" /> class.
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="target">target</param>
        /// <param name="data">data</param>
        /// <param name="templateId">templateId</param>
        /// <param name="formatOpts">formatOpts</param>
        [JsonConstructor]
        public DocumentsInitPostRequest(TemplatesTemplateIdPutRequestAllOfTemplateInfoType type, DocumentsInitPostRequestAllOfTarget target, Option<Dictionary<string, Object>?> data = default, Option<string?> templateId = default, Option<TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts?> formatOpts = default)
        {
            Type = type;
            Target = target;
            DataOption = data;
            TemplateIdOption = templateId;
            FormatOptsOption = formatOpts;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public TemplatesTemplateIdPutRequestAllOfTemplateInfoType Type { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [JsonPropertyName("target")]
        public DocumentsInitPostRequestAllOfTarget Target { get; set; }

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> DataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public Dictionary<string, Object>? Data { get { return this.DataOption; } set { this.DataOption = new(value); } }

        /// <summary>
        /// Used to track the state of TemplateId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TemplateIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets TemplateId
        /// </summary>
        [JsonPropertyName("templateId")]
        public string? TemplateId { get { return this.TemplateIdOption; } set { this.TemplateIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of FormatOpts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts?> FormatOptsOption { get; private set; }

        /// <summary>
        /// Gets or Sets FormatOpts
        /// </summary>
        [JsonPropertyName("formatOpts")]
        public TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts? FormatOpts { get { return this.FormatOptsOption; } set { this.FormatOptsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DocumentsInitPostRequest {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  FormatOpts: ").Append(FormatOpts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DocumentsInitPostRequest" />
    /// </summary>
    public class DocumentsInitPostRequestJsonConverter : JsonConverter<DocumentsInitPostRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="DocumentsInitPostRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DocumentsInitPostRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<TemplatesTemplateIdPutRequestAllOfTemplateInfoType?> type = default;
            Option<DocumentsInitPostRequestAllOfTarget?> target = default;
            Option<Dictionary<string, Object>?> data = default;
            Option<string?> templateId = default;
            Option<TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts?> formatOpts = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            type = new Option<TemplatesTemplateIdPutRequestAllOfTemplateInfoType?>(JsonSerializer.Deserialize<TemplatesTemplateIdPutRequestAllOfTemplateInfoType>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "target":
                            target = new Option<DocumentsInitPostRequestAllOfTarget?>(JsonSerializer.Deserialize<DocumentsInitPostRequestAllOfTarget>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "data":
                            data = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "templateId":
                            templateId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "formatOpts":
                            formatOpts = new Option<TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts?>(JsonSerializer.Deserialize<TemplatesTemplateIdRenderPreviewsPostRequestFormatOpts>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class DocumentsInitPostRequest.", nameof(type));

            if (!target.IsSet)
                throw new ArgumentException("Property is required for class DocumentsInitPostRequest.", nameof(target));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class DocumentsInitPostRequest.");

            if (target.IsSet && target.Value == null)
                throw new ArgumentNullException(nameof(target), "Property is not nullable for class DocumentsInitPostRequest.");

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class DocumentsInitPostRequest.");

            if (templateId.IsSet && templateId.Value == null)
                throw new ArgumentNullException(nameof(templateId), "Property is not nullable for class DocumentsInitPostRequest.");

            if (formatOpts.IsSet && formatOpts.Value == null)
                throw new ArgumentNullException(nameof(formatOpts), "Property is not nullable for class DocumentsInitPostRequest.");

            return new DocumentsInitPostRequest(type.Value!, target.Value!, data, templateId, formatOpts);
        }

        /// <summary>
        /// Serializes a <see cref="DocumentsInitPostRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="documentsInitPostRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DocumentsInitPostRequest documentsInitPostRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, documentsInitPostRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DocumentsInitPostRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="documentsInitPostRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DocumentsInitPostRequest documentsInitPostRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (documentsInitPostRequest.Type == null)
                throw new ArgumentNullException(nameof(documentsInitPostRequest.Type), "Property is required for class DocumentsInitPostRequest.");

            if (documentsInitPostRequest.Target == null)
                throw new ArgumentNullException(nameof(documentsInitPostRequest.Target), "Property is required for class DocumentsInitPostRequest.");

            if (documentsInitPostRequest.DataOption.IsSet && documentsInitPostRequest.Data == null)
                throw new ArgumentNullException(nameof(documentsInitPostRequest.Data), "Property is required for class DocumentsInitPostRequest.");

            if (documentsInitPostRequest.TemplateIdOption.IsSet && documentsInitPostRequest.TemplateId == null)
                throw new ArgumentNullException(nameof(documentsInitPostRequest.TemplateId), "Property is required for class DocumentsInitPostRequest.");

            if (documentsInitPostRequest.FormatOptsOption.IsSet && documentsInitPostRequest.FormatOpts == null)
                throw new ArgumentNullException(nameof(documentsInitPostRequest.FormatOpts), "Property is required for class DocumentsInitPostRequest.");

            writer.WritePropertyName("type");
            JsonSerializer.Serialize(writer, documentsInitPostRequest.Type, jsonSerializerOptions);
            writer.WritePropertyName("target");
            JsonSerializer.Serialize(writer, documentsInitPostRequest.Target, jsonSerializerOptions);
            if (documentsInitPostRequest.DataOption.IsSet)
            {
                writer.WritePropertyName("data");
                JsonSerializer.Serialize(writer, documentsInitPostRequest.Data, jsonSerializerOptions);
            }
            if (documentsInitPostRequest.TemplateIdOption.IsSet)
                writer.WriteString("templateId", documentsInitPostRequest.TemplateId);

            if (documentsInitPostRequest.FormatOptsOption.IsSet)
            {
                writer.WritePropertyName("formatOpts");
                JsonSerializer.Serialize(writer, documentsInitPostRequest.FormatOpts, jsonSerializerOptions);
            }
        }
    }
}
