// This file was auto-generated by Fern from our API Definition.

package tokens

import (
	context "context"
	fmt "fmt"
	http "net/http"
	core "sdk/core"
)

type Client interface {
	DeleteApiToken(ctx context.Context, tokenId string) (any, error)
}

func NewClient(opts ...core.ClientOption) Client {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &client{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
	}
}

type client struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

// Invalidates an API token by storing it in the deleted tokens S3 bucket, preventing future use of the token for authentication.
func (c *client) DeleteApiToken(ctx context.Context, tokenId string) (any, error) {
	baseURL := "https://api.pogodoc.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"api-tokens/%v", tokenId)

	var response any
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodDelete,
		nil,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}
