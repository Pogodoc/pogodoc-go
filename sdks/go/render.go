// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

type GenerateDocumentPreviewRequest struct {
	TemplateId string                                    `json:"-"`
	Type       GenerateDocumentPreviewRequestType        `json:"type,omitempty"`
	Data       map[string]any                            `json:"data,omitempty"`
	FormatOpts *GenerateDocumentPreviewRequestFormatOpts `json:"formatOpts,omitempty"`
}

type InitializeRenderJobRequest struct {
	Data       map[string]any                        `json:"data,omitempty"`
	Type       InitializeRenderJobRequestType        `json:"type,omitempty"`
	Target     InitializeRenderJobRequestTarget      `json:"target,omitempty"`
	TemplateId *string                               `json:"templateId,omitempty"`
	FormatOpts *InitializeRenderJobRequestFormatOpts `json:"formatOpts,omitempty"`
}

type StartImmediateRenderRequest struct {
	StartImmediateRenderRequestData map[string]any                         `json:"data,omitempty"`
	Type                            StartImmediateRenderRequestType        `json:"type,omitempty"`
	Target                          StartImmediateRenderRequestTarget      `json:"target,omitempty"`
	TemplateId                      *string                                `json:"templateId,omitempty"`
	FormatOpts                      *StartImmediateRenderRequestFormatOpts `json:"formatOpts,omitempty"`
	Template                        *string                                `json:"template,omitempty"`
}

type StartRenderJobRequest struct {
	ShouldWaitForRenderCompletion *bool   `json:"shouldWaitForRenderCompletion,omitempty"`
	UploadPresignedS3Url          *string `json:"uploadPresignedS3Url,omitempty"`
}

type GenerateDocumentPreviewRequestFormatOpts struct {
	FromPage        *float64                                        `json:"fromPage,omitempty"`
	ToPage          *float64                                        `json:"toPage,omitempty"`
	Format          *GenerateDocumentPreviewRequestFormatOptsFormat `json:"format,omitempty"`
	WaitForSelector *string                                         `json:"waitForSelector,omitempty"`
}

type GenerateDocumentPreviewRequestFormatOptsFormat uint

const (
	GenerateDocumentPreviewRequestFormatOptsFormatLetter GenerateDocumentPreviewRequestFormatOptsFormat = iota + 1
	GenerateDocumentPreviewRequestFormatOptsFormatLegal
	GenerateDocumentPreviewRequestFormatOptsFormatTabloid
	GenerateDocumentPreviewRequestFormatOptsFormatLedger
	GenerateDocumentPreviewRequestFormatOptsFormatA0
	GenerateDocumentPreviewRequestFormatOptsFormatA1
	GenerateDocumentPreviewRequestFormatOptsFormatA2
	GenerateDocumentPreviewRequestFormatOptsFormatA3
	GenerateDocumentPreviewRequestFormatOptsFormatA4
	GenerateDocumentPreviewRequestFormatOptsFormatA5
	GenerateDocumentPreviewRequestFormatOptsFormatA6
)

func (g GenerateDocumentPreviewRequestFormatOptsFormat) String() string {
	switch g {
	default:
		return strconv.Itoa(int(g))
	case GenerateDocumentPreviewRequestFormatOptsFormatLetter:
		return "letter"
	case GenerateDocumentPreviewRequestFormatOptsFormatLegal:
		return "legal"
	case GenerateDocumentPreviewRequestFormatOptsFormatTabloid:
		return "tabloid"
	case GenerateDocumentPreviewRequestFormatOptsFormatLedger:
		return "ledger"
	case GenerateDocumentPreviewRequestFormatOptsFormatA0:
		return "a0"
	case GenerateDocumentPreviewRequestFormatOptsFormatA1:
		return "a1"
	case GenerateDocumentPreviewRequestFormatOptsFormatA2:
		return "a2"
	case GenerateDocumentPreviewRequestFormatOptsFormatA3:
		return "a3"
	case GenerateDocumentPreviewRequestFormatOptsFormatA4:
		return "a4"
	case GenerateDocumentPreviewRequestFormatOptsFormatA5:
		return "a5"
	case GenerateDocumentPreviewRequestFormatOptsFormatA6:
		return "a6"
	}
}

func (g GenerateDocumentPreviewRequestFormatOptsFormat) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", g.String())), nil
}

func (g *GenerateDocumentPreviewRequestFormatOptsFormat) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "letter":
		value := GenerateDocumentPreviewRequestFormatOptsFormatLetter
		*g = value
	case "legal":
		value := GenerateDocumentPreviewRequestFormatOptsFormatLegal
		*g = value
	case "tabloid":
		value := GenerateDocumentPreviewRequestFormatOptsFormatTabloid
		*g = value
	case "ledger":
		value := GenerateDocumentPreviewRequestFormatOptsFormatLedger
		*g = value
	case "a0":
		value := GenerateDocumentPreviewRequestFormatOptsFormatA0
		*g = value
	case "a1":
		value := GenerateDocumentPreviewRequestFormatOptsFormatA1
		*g = value
	case "a2":
		value := GenerateDocumentPreviewRequestFormatOptsFormatA2
		*g = value
	case "a3":
		value := GenerateDocumentPreviewRequestFormatOptsFormatA3
		*g = value
	case "a4":
		value := GenerateDocumentPreviewRequestFormatOptsFormatA4
		*g = value
	case "a5":
		value := GenerateDocumentPreviewRequestFormatOptsFormatA5
		*g = value
	case "a6":
		value := GenerateDocumentPreviewRequestFormatOptsFormatA6
		*g = value
	}
	return nil
}

type GenerateDocumentPreviewRequestType uint

const (
	GenerateDocumentPreviewRequestTypeDocx GenerateDocumentPreviewRequestType = iota + 1
	GenerateDocumentPreviewRequestTypeXlsx
	GenerateDocumentPreviewRequestTypePptx
	GenerateDocumentPreviewRequestTypeEjs
	GenerateDocumentPreviewRequestTypeHtml
	GenerateDocumentPreviewRequestTypeLatex
	GenerateDocumentPreviewRequestTypeReact
)

func (g GenerateDocumentPreviewRequestType) String() string {
	switch g {
	default:
		return strconv.Itoa(int(g))
	case GenerateDocumentPreviewRequestTypeDocx:
		return "docx"
	case GenerateDocumentPreviewRequestTypeXlsx:
		return "xlsx"
	case GenerateDocumentPreviewRequestTypePptx:
		return "pptx"
	case GenerateDocumentPreviewRequestTypeEjs:
		return "ejs"
	case GenerateDocumentPreviewRequestTypeHtml:
		return "html"
	case GenerateDocumentPreviewRequestTypeLatex:
		return "latex"
	case GenerateDocumentPreviewRequestTypeReact:
		return "react"
	}
}

func (g GenerateDocumentPreviewRequestType) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", g.String())), nil
}

func (g *GenerateDocumentPreviewRequestType) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "docx":
		value := GenerateDocumentPreviewRequestTypeDocx
		*g = value
	case "xlsx":
		value := GenerateDocumentPreviewRequestTypeXlsx
		*g = value
	case "pptx":
		value := GenerateDocumentPreviewRequestTypePptx
		*g = value
	case "ejs":
		value := GenerateDocumentPreviewRequestTypeEjs
		*g = value
	case "html":
		value := GenerateDocumentPreviewRequestTypeHtml
		*g = value
	case "latex":
		value := GenerateDocumentPreviewRequestTypeLatex
		*g = value
	case "react":
		value := GenerateDocumentPreviewRequestTypeReact
		*g = value
	}
	return nil
}

type GenerateDocumentPreviewResponse struct {
	Url   *string `json:"url,omitempty"`
	JobId string  `json:"jobId"`
}

type GetJobStatusResponse struct {
	Type    GetJobStatusResponseType    `json:"type,omitempty"`
	JobId   string                      `json:"jobId"`
	Target  GetJobStatusResponseTarget  `json:"target,omitempty"`
	Output  *GetJobStatusResponseOutput `json:"output,omitempty"`
	Success *bool                       `json:"success,omitempty"`
	Status  *string                     `json:"status,omitempty"`
}

type GetJobStatusResponseOutput struct {
	Data     *GetJobStatusResponseOutputData     `json:"data,omitempty"`
	Metadata *GetJobStatusResponseOutputMetadata `json:"metadata,omitempty"`
}

type GetJobStatusResponseOutputData struct {
	Url string `json:"url"`
}

type GetJobStatusResponseOutputMetadata struct {
	RenderTime float64 `json:"renderTime"`
}

type GetJobStatusResponseTarget uint

const (
	GetJobStatusResponseTargetPdf GetJobStatusResponseTarget = iota + 1
	GetJobStatusResponseTargetHtml
	GetJobStatusResponseTargetDocx
	GetJobStatusResponseTargetXlsx
	GetJobStatusResponseTargetPptx
	GetJobStatusResponseTargetPng
	GetJobStatusResponseTargetJpg
)

func (g GetJobStatusResponseTarget) String() string {
	switch g {
	default:
		return strconv.Itoa(int(g))
	case GetJobStatusResponseTargetPdf:
		return "pdf"
	case GetJobStatusResponseTargetHtml:
		return "html"
	case GetJobStatusResponseTargetDocx:
		return "docx"
	case GetJobStatusResponseTargetXlsx:
		return "xlsx"
	case GetJobStatusResponseTargetPptx:
		return "pptx"
	case GetJobStatusResponseTargetPng:
		return "png"
	case GetJobStatusResponseTargetJpg:
		return "jpg"
	}
}

func (g GetJobStatusResponseTarget) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", g.String())), nil
}

func (g *GetJobStatusResponseTarget) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "pdf":
		value := GetJobStatusResponseTargetPdf
		*g = value
	case "html":
		value := GetJobStatusResponseTargetHtml
		*g = value
	case "docx":
		value := GetJobStatusResponseTargetDocx
		*g = value
	case "xlsx":
		value := GetJobStatusResponseTargetXlsx
		*g = value
	case "pptx":
		value := GetJobStatusResponseTargetPptx
		*g = value
	case "png":
		value := GetJobStatusResponseTargetPng
		*g = value
	case "jpg":
		value := GetJobStatusResponseTargetJpg
		*g = value
	}
	return nil
}

type GetJobStatusResponseType uint

const (
	GetJobStatusResponseTypeDocx GetJobStatusResponseType = iota + 1
	GetJobStatusResponseTypeXlsx
	GetJobStatusResponseTypePptx
	GetJobStatusResponseTypeEjs
	GetJobStatusResponseTypeHtml
	GetJobStatusResponseTypeLatex
	GetJobStatusResponseTypeReact
)

func (g GetJobStatusResponseType) String() string {
	switch g {
	default:
		return strconv.Itoa(int(g))
	case GetJobStatusResponseTypeDocx:
		return "docx"
	case GetJobStatusResponseTypeXlsx:
		return "xlsx"
	case GetJobStatusResponseTypePptx:
		return "pptx"
	case GetJobStatusResponseTypeEjs:
		return "ejs"
	case GetJobStatusResponseTypeHtml:
		return "html"
	case GetJobStatusResponseTypeLatex:
		return "latex"
	case GetJobStatusResponseTypeReact:
		return "react"
	}
}

func (g GetJobStatusResponseType) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", g.String())), nil
}

func (g *GetJobStatusResponseType) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "docx":
		value := GetJobStatusResponseTypeDocx
		*g = value
	case "xlsx":
		value := GetJobStatusResponseTypeXlsx
		*g = value
	case "pptx":
		value := GetJobStatusResponseTypePptx
		*g = value
	case "ejs":
		value := GetJobStatusResponseTypeEjs
		*g = value
	case "html":
		value := GetJobStatusResponseTypeHtml
		*g = value
	case "latex":
		value := GetJobStatusResponseTypeLatex
		*g = value
	case "react":
		value := GetJobStatusResponseTypeReact
		*g = value
	}
	return nil
}

type InitializeRenderJobRequestFormatOpts struct {
	FromPage        *float64                                    `json:"fromPage,omitempty"`
	ToPage          *float64                                    `json:"toPage,omitempty"`
	Format          *InitializeRenderJobRequestFormatOptsFormat `json:"format,omitempty"`
	WaitForSelector *string                                     `json:"waitForSelector,omitempty"`
}

type InitializeRenderJobRequestFormatOptsFormat uint

const (
	InitializeRenderJobRequestFormatOptsFormatLetter InitializeRenderJobRequestFormatOptsFormat = iota + 1
	InitializeRenderJobRequestFormatOptsFormatLegal
	InitializeRenderJobRequestFormatOptsFormatTabloid
	InitializeRenderJobRequestFormatOptsFormatLedger
	InitializeRenderJobRequestFormatOptsFormatA0
	InitializeRenderJobRequestFormatOptsFormatA1
	InitializeRenderJobRequestFormatOptsFormatA2
	InitializeRenderJobRequestFormatOptsFormatA3
	InitializeRenderJobRequestFormatOptsFormatA4
	InitializeRenderJobRequestFormatOptsFormatA5
	InitializeRenderJobRequestFormatOptsFormatA6
)

func (i InitializeRenderJobRequestFormatOptsFormat) String() string {
	switch i {
	default:
		return strconv.Itoa(int(i))
	case InitializeRenderJobRequestFormatOptsFormatLetter:
		return "letter"
	case InitializeRenderJobRequestFormatOptsFormatLegal:
		return "legal"
	case InitializeRenderJobRequestFormatOptsFormatTabloid:
		return "tabloid"
	case InitializeRenderJobRequestFormatOptsFormatLedger:
		return "ledger"
	case InitializeRenderJobRequestFormatOptsFormatA0:
		return "a0"
	case InitializeRenderJobRequestFormatOptsFormatA1:
		return "a1"
	case InitializeRenderJobRequestFormatOptsFormatA2:
		return "a2"
	case InitializeRenderJobRequestFormatOptsFormatA3:
		return "a3"
	case InitializeRenderJobRequestFormatOptsFormatA4:
		return "a4"
	case InitializeRenderJobRequestFormatOptsFormatA5:
		return "a5"
	case InitializeRenderJobRequestFormatOptsFormatA6:
		return "a6"
	}
}

func (i InitializeRenderJobRequestFormatOptsFormat) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", i.String())), nil
}

func (i *InitializeRenderJobRequestFormatOptsFormat) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "letter":
		value := InitializeRenderJobRequestFormatOptsFormatLetter
		*i = value
	case "legal":
		value := InitializeRenderJobRequestFormatOptsFormatLegal
		*i = value
	case "tabloid":
		value := InitializeRenderJobRequestFormatOptsFormatTabloid
		*i = value
	case "ledger":
		value := InitializeRenderJobRequestFormatOptsFormatLedger
		*i = value
	case "a0":
		value := InitializeRenderJobRequestFormatOptsFormatA0
		*i = value
	case "a1":
		value := InitializeRenderJobRequestFormatOptsFormatA1
		*i = value
	case "a2":
		value := InitializeRenderJobRequestFormatOptsFormatA2
		*i = value
	case "a3":
		value := InitializeRenderJobRequestFormatOptsFormatA3
		*i = value
	case "a4":
		value := InitializeRenderJobRequestFormatOptsFormatA4
		*i = value
	case "a5":
		value := InitializeRenderJobRequestFormatOptsFormatA5
		*i = value
	case "a6":
		value := InitializeRenderJobRequestFormatOptsFormatA6
		*i = value
	}
	return nil
}

type InitializeRenderJobRequestTarget uint

const (
	InitializeRenderJobRequestTargetPdf InitializeRenderJobRequestTarget = iota + 1
	InitializeRenderJobRequestTargetHtml
	InitializeRenderJobRequestTargetDocx
	InitializeRenderJobRequestTargetXlsx
	InitializeRenderJobRequestTargetPptx
	InitializeRenderJobRequestTargetPng
	InitializeRenderJobRequestTargetJpg
)

func (i InitializeRenderJobRequestTarget) String() string {
	switch i {
	default:
		return strconv.Itoa(int(i))
	case InitializeRenderJobRequestTargetPdf:
		return "pdf"
	case InitializeRenderJobRequestTargetHtml:
		return "html"
	case InitializeRenderJobRequestTargetDocx:
		return "docx"
	case InitializeRenderJobRequestTargetXlsx:
		return "xlsx"
	case InitializeRenderJobRequestTargetPptx:
		return "pptx"
	case InitializeRenderJobRequestTargetPng:
		return "png"
	case InitializeRenderJobRequestTargetJpg:
		return "jpg"
	}
}

func (i InitializeRenderJobRequestTarget) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", i.String())), nil
}

func (i *InitializeRenderJobRequestTarget) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "pdf":
		value := InitializeRenderJobRequestTargetPdf
		*i = value
	case "html":
		value := InitializeRenderJobRequestTargetHtml
		*i = value
	case "docx":
		value := InitializeRenderJobRequestTargetDocx
		*i = value
	case "xlsx":
		value := InitializeRenderJobRequestTargetXlsx
		*i = value
	case "pptx":
		value := InitializeRenderJobRequestTargetPptx
		*i = value
	case "png":
		value := InitializeRenderJobRequestTargetPng
		*i = value
	case "jpg":
		value := InitializeRenderJobRequestTargetJpg
		*i = value
	}
	return nil
}

type InitializeRenderJobRequestType uint

const (
	InitializeRenderJobRequestTypeDocx InitializeRenderJobRequestType = iota + 1
	InitializeRenderJobRequestTypeXlsx
	InitializeRenderJobRequestTypePptx
	InitializeRenderJobRequestTypeEjs
	InitializeRenderJobRequestTypeHtml
	InitializeRenderJobRequestTypeLatex
	InitializeRenderJobRequestTypeReact
)

func (i InitializeRenderJobRequestType) String() string {
	switch i {
	default:
		return strconv.Itoa(int(i))
	case InitializeRenderJobRequestTypeDocx:
		return "docx"
	case InitializeRenderJobRequestTypeXlsx:
		return "xlsx"
	case InitializeRenderJobRequestTypePptx:
		return "pptx"
	case InitializeRenderJobRequestTypeEjs:
		return "ejs"
	case InitializeRenderJobRequestTypeHtml:
		return "html"
	case InitializeRenderJobRequestTypeLatex:
		return "latex"
	case InitializeRenderJobRequestTypeReact:
		return "react"
	}
}

func (i InitializeRenderJobRequestType) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", i.String())), nil
}

func (i *InitializeRenderJobRequestType) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "docx":
		value := InitializeRenderJobRequestTypeDocx
		*i = value
	case "xlsx":
		value := InitializeRenderJobRequestTypeXlsx
		*i = value
	case "pptx":
		value := InitializeRenderJobRequestTypePptx
		*i = value
	case "ejs":
		value := InitializeRenderJobRequestTypeEjs
		*i = value
	case "html":
		value := InitializeRenderJobRequestTypeHtml
		*i = value
	case "latex":
		value := InitializeRenderJobRequestTypeLatex
		*i = value
	case "react":
		value := InitializeRenderJobRequestTypeReact
		*i = value
	}
	return nil
}

type InitializeRenderJobResponse struct {
	JobId                      string                            `json:"jobId"`
	Target                     InitializeRenderJobResponseTarget `json:"target,omitempty"`
	PresignedDataUploadUrl     *string                           `json:"presignedDataUploadUrl,omitempty"`
	PresignedTemplateUploadUrl *string                           `json:"presignedTemplateUploadUrl,omitempty"`
}

type InitializeRenderJobResponseTarget uint

const (
	InitializeRenderJobResponseTargetPdf InitializeRenderJobResponseTarget = iota + 1
	InitializeRenderJobResponseTargetHtml
	InitializeRenderJobResponseTargetDocx
	InitializeRenderJobResponseTargetXlsx
	InitializeRenderJobResponseTargetPptx
	InitializeRenderJobResponseTargetPng
	InitializeRenderJobResponseTargetJpg
)

func (i InitializeRenderJobResponseTarget) String() string {
	switch i {
	default:
		return strconv.Itoa(int(i))
	case InitializeRenderJobResponseTargetPdf:
		return "pdf"
	case InitializeRenderJobResponseTargetHtml:
		return "html"
	case InitializeRenderJobResponseTargetDocx:
		return "docx"
	case InitializeRenderJobResponseTargetXlsx:
		return "xlsx"
	case InitializeRenderJobResponseTargetPptx:
		return "pptx"
	case InitializeRenderJobResponseTargetPng:
		return "png"
	case InitializeRenderJobResponseTargetJpg:
		return "jpg"
	}
}

func (i InitializeRenderJobResponseTarget) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", i.String())), nil
}

func (i *InitializeRenderJobResponseTarget) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "pdf":
		value := InitializeRenderJobResponseTargetPdf
		*i = value
	case "html":
		value := InitializeRenderJobResponseTargetHtml
		*i = value
	case "docx":
		value := InitializeRenderJobResponseTargetDocx
		*i = value
	case "xlsx":
		value := InitializeRenderJobResponseTargetXlsx
		*i = value
	case "pptx":
		value := InitializeRenderJobResponseTargetPptx
		*i = value
	case "png":
		value := InitializeRenderJobResponseTargetPng
		*i = value
	case "jpg":
		value := InitializeRenderJobResponseTargetJpg
		*i = value
	}
	return nil
}

type StartImmediateRenderRequestFormatOpts struct {
	FromPage        *float64                                     `json:"fromPage,omitempty"`
	ToPage          *float64                                     `json:"toPage,omitempty"`
	Format          *StartImmediateRenderRequestFormatOptsFormat `json:"format,omitempty"`
	WaitForSelector *string                                      `json:"waitForSelector,omitempty"`
}

type StartImmediateRenderRequestFormatOptsFormat uint

const (
	StartImmediateRenderRequestFormatOptsFormatLetter StartImmediateRenderRequestFormatOptsFormat = iota + 1
	StartImmediateRenderRequestFormatOptsFormatLegal
	StartImmediateRenderRequestFormatOptsFormatTabloid
	StartImmediateRenderRequestFormatOptsFormatLedger
	StartImmediateRenderRequestFormatOptsFormatA0
	StartImmediateRenderRequestFormatOptsFormatA1
	StartImmediateRenderRequestFormatOptsFormatA2
	StartImmediateRenderRequestFormatOptsFormatA3
	StartImmediateRenderRequestFormatOptsFormatA4
	StartImmediateRenderRequestFormatOptsFormatA5
	StartImmediateRenderRequestFormatOptsFormatA6
)

func (s StartImmediateRenderRequestFormatOptsFormat) String() string {
	switch s {
	default:
		return strconv.Itoa(int(s))
	case StartImmediateRenderRequestFormatOptsFormatLetter:
		return "letter"
	case StartImmediateRenderRequestFormatOptsFormatLegal:
		return "legal"
	case StartImmediateRenderRequestFormatOptsFormatTabloid:
		return "tabloid"
	case StartImmediateRenderRequestFormatOptsFormatLedger:
		return "ledger"
	case StartImmediateRenderRequestFormatOptsFormatA0:
		return "a0"
	case StartImmediateRenderRequestFormatOptsFormatA1:
		return "a1"
	case StartImmediateRenderRequestFormatOptsFormatA2:
		return "a2"
	case StartImmediateRenderRequestFormatOptsFormatA3:
		return "a3"
	case StartImmediateRenderRequestFormatOptsFormatA4:
		return "a4"
	case StartImmediateRenderRequestFormatOptsFormatA5:
		return "a5"
	case StartImmediateRenderRequestFormatOptsFormatA6:
		return "a6"
	}
}

func (s StartImmediateRenderRequestFormatOptsFormat) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", s.String())), nil
}

func (s *StartImmediateRenderRequestFormatOptsFormat) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "letter":
		value := StartImmediateRenderRequestFormatOptsFormatLetter
		*s = value
	case "legal":
		value := StartImmediateRenderRequestFormatOptsFormatLegal
		*s = value
	case "tabloid":
		value := StartImmediateRenderRequestFormatOptsFormatTabloid
		*s = value
	case "ledger":
		value := StartImmediateRenderRequestFormatOptsFormatLedger
		*s = value
	case "a0":
		value := StartImmediateRenderRequestFormatOptsFormatA0
		*s = value
	case "a1":
		value := StartImmediateRenderRequestFormatOptsFormatA1
		*s = value
	case "a2":
		value := StartImmediateRenderRequestFormatOptsFormatA2
		*s = value
	case "a3":
		value := StartImmediateRenderRequestFormatOptsFormatA3
		*s = value
	case "a4":
		value := StartImmediateRenderRequestFormatOptsFormatA4
		*s = value
	case "a5":
		value := StartImmediateRenderRequestFormatOptsFormatA5
		*s = value
	case "a6":
		value := StartImmediateRenderRequestFormatOptsFormatA6
		*s = value
	}
	return nil
}

type StartImmediateRenderRequestTarget uint

const (
	StartImmediateRenderRequestTargetPdf StartImmediateRenderRequestTarget = iota + 1
	StartImmediateRenderRequestTargetHtml
	StartImmediateRenderRequestTargetDocx
	StartImmediateRenderRequestTargetXlsx
	StartImmediateRenderRequestTargetPptx
	StartImmediateRenderRequestTargetPng
	StartImmediateRenderRequestTargetJpg
)

func (s StartImmediateRenderRequestTarget) String() string {
	switch s {
	default:
		return strconv.Itoa(int(s))
	case StartImmediateRenderRequestTargetPdf:
		return "pdf"
	case StartImmediateRenderRequestTargetHtml:
		return "html"
	case StartImmediateRenderRequestTargetDocx:
		return "docx"
	case StartImmediateRenderRequestTargetXlsx:
		return "xlsx"
	case StartImmediateRenderRequestTargetPptx:
		return "pptx"
	case StartImmediateRenderRequestTargetPng:
		return "png"
	case StartImmediateRenderRequestTargetJpg:
		return "jpg"
	}
}

func (s StartImmediateRenderRequestTarget) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", s.String())), nil
}

func (s *StartImmediateRenderRequestTarget) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "pdf":
		value := StartImmediateRenderRequestTargetPdf
		*s = value
	case "html":
		value := StartImmediateRenderRequestTargetHtml
		*s = value
	case "docx":
		value := StartImmediateRenderRequestTargetDocx
		*s = value
	case "xlsx":
		value := StartImmediateRenderRequestTargetXlsx
		*s = value
	case "pptx":
		value := StartImmediateRenderRequestTargetPptx
		*s = value
	case "png":
		value := StartImmediateRenderRequestTargetPng
		*s = value
	case "jpg":
		value := StartImmediateRenderRequestTargetJpg
		*s = value
	}
	return nil
}

type StartImmediateRenderRequestType uint

const (
	StartImmediateRenderRequestTypeDocx StartImmediateRenderRequestType = iota + 1
	StartImmediateRenderRequestTypeXlsx
	StartImmediateRenderRequestTypePptx
	StartImmediateRenderRequestTypeEjs
	StartImmediateRenderRequestTypeHtml
	StartImmediateRenderRequestTypeLatex
	StartImmediateRenderRequestTypeReact
)

func (s StartImmediateRenderRequestType) String() string {
	switch s {
	default:
		return strconv.Itoa(int(s))
	case StartImmediateRenderRequestTypeDocx:
		return "docx"
	case StartImmediateRenderRequestTypeXlsx:
		return "xlsx"
	case StartImmediateRenderRequestTypePptx:
		return "pptx"
	case StartImmediateRenderRequestTypeEjs:
		return "ejs"
	case StartImmediateRenderRequestTypeHtml:
		return "html"
	case StartImmediateRenderRequestTypeLatex:
		return "latex"
	case StartImmediateRenderRequestTypeReact:
		return "react"
	}
}

func (s StartImmediateRenderRequestType) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", s.String())), nil
}

func (s *StartImmediateRenderRequestType) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "docx":
		value := StartImmediateRenderRequestTypeDocx
		*s = value
	case "xlsx":
		value := StartImmediateRenderRequestTypeXlsx
		*s = value
	case "pptx":
		value := StartImmediateRenderRequestTypePptx
		*s = value
	case "ejs":
		value := StartImmediateRenderRequestTypeEjs
		*s = value
	case "html":
		value := StartImmediateRenderRequestTypeHtml
		*s = value
	case "latex":
		value := StartImmediateRenderRequestTypeLatex
		*s = value
	case "react":
		value := StartImmediateRenderRequestTypeReact
		*s = value
	}
	return nil
}

type StartImmediateRenderResponse struct {
	Url string `json:"url"`
}

type StartRenderJobResponse struct {
	JobId string `json:"jobId"`
}
