// This file was auto-generated by Fern from our API Definition.

package documents

import (
	context "context"
	fmt "fmt"
	http "net/http"
	url "net/url"
	sdk "sdk"
	core "sdk/core"
)

type Client interface {
	InitializeRenderJob(ctx context.Context, request *sdk.InitializeRenderJobRequest) (*sdk.InitializeRenderJobResponse, error)
	StartRenderJob(ctx context.Context, jobId string, request *sdk.StartRenderJobRequest) (*sdk.StartRenderJobResponse, error)
	GenerateDocumentPreview(ctx context.Context, request *sdk.GenerateDocumentPreviewRequest) (*sdk.GenerateDocumentPreviewResponse, error)
	StartImmediateRender(ctx context.Context, request *sdk.StartImmediateRenderRequest) (*sdk.StartImmediateRenderResponse, error)
	GetJobStatus(ctx context.Context, jobId string) (*sdk.GetJobStatusResponse, error)
}

func NewClient(opts ...core.ClientOption) Client {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &client{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
	}
}

type client struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

// Creates a new render job with a unique ID, sets up S3 storage for template and data files, and generates presigned upload URLs if needed. Requires subscription check.
func (c *client) InitializeRenderJob(ctx context.Context, request *sdk.InitializeRenderJobRequest) (*sdk.InitializeRenderJobResponse, error) {
	baseURL := "https://api.pogodoc.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "documents/init"

	var response *sdk.InitializeRenderJobResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Takes a previously initialized job, updates its status to in-progress, and triggers the rendering process using Puppeteer. Can optionally wait for render completion.
func (c *client) StartRenderJob(ctx context.Context, jobId string, request *sdk.StartRenderJobRequest) (*sdk.StartRenderJobResponse, error) {
	baseURL := "https://api.pogodoc.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"documents/%v/render", jobId)

	var response *sdk.StartRenderJobResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Generates a preview by creating a single-page render job, processing it immediately, and returning the output URL. Used for template visualization.
func (c *client) GenerateDocumentPreview(ctx context.Context, request *sdk.GenerateDocumentPreviewRequest) (*sdk.GenerateDocumentPreviewResponse, error) {
	baseURL := "https://api.pogodoc.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "documents/render-preview"

	queryParams := make(url.Values)
	queryParams.Add("templateId", fmt.Sprintf("%v", request.TemplateId))
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	var response *sdk.GenerateDocumentPreviewResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Combines initialization and rendering in one step. Creates a job, uploads template/data directly, starts rendering, and adds the document to Strapi. Requires subscription check.
func (c *client) StartImmediateRender(ctx context.Context, request *sdk.StartImmediateRenderRequest) (*sdk.StartImmediateRenderResponse, error) {
	baseURL := "https://api.pogodoc.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "documents/immediate-render"

	var response *sdk.StartImmediateRenderResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Fetches detailed job information from S3 storage including job status, template ID, target format, and output details if available.
func (c *client) GetJobStatus(ctx context.Context, jobId string) (*sdk.GetJobStatusResponse, error) {
	baseURL := "https://api.pogodoc.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"jobs/%v", jobId)

	var response *sdk.GetJobStatusResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}
