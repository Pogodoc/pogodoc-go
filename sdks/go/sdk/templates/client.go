// This file was auto-generated by Fern from our API Definition.

package templates

import (
	context "context"
	sdk "github.com/pogodoc/pogodoc-go/sdk"
	core "github.com/pogodoc/pogodoc-go/sdk/core"
	internal "github.com/pogodoc/pogodoc-go/sdk/internal"
	option "github.com/pogodoc/pogodoc-go/sdk/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Initializes template creation by generating a unique ID and providing a presigned URL for template ZIP upload. Sets unfinished tag for tracking incomplete templates.
func (c *Client) InitializeTemplateCreation(
	ctx context.Context,
	opts ...option.RequestOption,
) (*sdk.InitializeTemplateCreationResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.pogodoc.com",
	)
	endpointURL := baseURL + "/templates/init"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *sdk.InitializeTemplateCreationResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Finalizes template creation by saving template info to Strapi, copying preview files to permanent storage, and creating template index. Removes unfinished tag upon completion.
func (c *Client) SaveCreatedTemplate(
	ctx context.Context,
	templateId string,
	request *sdk.SaveCreatedTemplateRequest,
	opts ...option.RequestOption,
) error {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.pogodoc.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/templates/%v",
		templateId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
		},
	); err != nil {
		return err
	}
	return nil
}

// Updates template content, handles S3 storage cleanup for old content, updates template metadata in Strapi, and manages preview files. Removes unfinished tags after successful update.
func (c *Client) UpdateTemplate(
	ctx context.Context,
	templateId string,
	request *sdk.UpdateTemplateRequest,
	opts ...option.RequestOption,
) (*sdk.UpdateTemplateResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.pogodoc.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/templates/%v",
		templateId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	var response *sdk.UpdateTemplateResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPut,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Deletes a template from Strapi and associated S3 storage. Removes all associated files and metadata.
func (c *Client) DeleteTemplate(
	ctx context.Context,
	templateId string,
	opts ...option.RequestOption,
) error {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.pogodoc.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/templates/%v",
		templateId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodDelete,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
		},
	); err != nil {
		return err
	}
	return nil
}

// Extracts contents from an uploaded template ZIP file and stores individual files in the appropriate S3 storage structure.
func (c *Client) ExtractTemplateFiles(
	ctx context.Context,
	templateId string,
	opts ...option.RequestOption,
) error {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.pogodoc.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/templates/%v/unzip",
		templateId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPatch,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
		},
	); err != nil {
		return err
	}
	return nil
}

// Creates both PNG and PDF preview files for template visualization. Generates previews in parallel and returns URLs for both formats.
func (c *Client) GenerateTemplatePreviews(
	ctx context.Context,
	templateId string,
	request *sdk.GenerateTemplatePreviewsRequest,
	opts ...option.RequestOption,
) (*sdk.GenerateTemplatePreviewsResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.pogodoc.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/templates/%v/render-previews",
		templateId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	var response *sdk.GenerateTemplatePreviewsResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Generates a presigned URL for template access. Used for downloading template files from S3 storage.
func (c *Client) GeneratePresignedGetUrl(
	ctx context.Context,
	templateId string,
	opts ...option.RequestOption,
) (*sdk.GeneratePresignedGetUrlResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.pogodoc.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/templates/%v/presigned-url",
		templateId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *sdk.GeneratePresignedGetUrlResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Retrieves the template index.html file from S3 storage. Used for rendering the template in the browser.
func (c *Client) GetTemplateIndexHtml(
	ctx context.Context,
	templateId string,
	opts ...option.RequestOption,
) (*sdk.GetTemplateIndexHtmlResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.pogodoc.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/templates/%v/index-html",
		templateId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *sdk.GetTemplateIndexHtmlResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Uploads the template index.html file to S3 storage. Used for rendering the template in the browser.
func (c *Client) UploadTemplateIndexHtml(
	ctx context.Context,
	templateId string,
	request *sdk.UploadTemplateIndexHtmlRequest,
	opts ...option.RequestOption,
) error {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.pogodoc.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/templates/%v/index-html",
		templateId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
		},
	); err != nil {
		return err
	}
	return nil
}

// Creates a new template by duplicating an existing template's content and metadata. Includes copying preview files and template index.
func (c *Client) CloneTemplate(
	ctx context.Context,
	templateId string,
	opts ...option.RequestOption,
) (*sdk.CloneTemplateResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.pogodoc.com",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/templates/%v/clone",
		templateId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *sdk.CloneTemplateResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
