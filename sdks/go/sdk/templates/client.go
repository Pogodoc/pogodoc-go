// This file was auto-generated by Fern from our API Definition.

package templates

import (
	context "context"
	fmt "fmt"
	sdkgo "github.com/pogodoc/sdk-go"
	core "github.com/pogodoc/sdk-go/core"
	http "net/http"
)

type Client interface {
	InitializeTemplateCreation(ctx context.Context) (*sdkgo.InitializeTemplateCreationResponse, error)
	SaveCreatedTemplate(ctx context.Context, templateId string, request *sdkgo.SaveCreatedTemplateRequest) error
	UpdateTemplate(ctx context.Context, templateId string, request *sdkgo.UpdateTemplateRequest) (*sdkgo.UpdateTemplateResponse, error)
	DeleteTemplate(ctx context.Context, templateId string) error
	ExtractTemplateFiles(ctx context.Context, templateId string) error
	GenerateTemplatePreviews(ctx context.Context, templateId string, request *sdkgo.GenerateTemplatePreviewsRequest) (*sdkgo.GenerateTemplatePreviewsResponse, error)
	GeneratePresignedGetUrl(ctx context.Context, templateId string) (*sdkgo.GeneratePresignedGetUrlResponse, error)
	GetTemplateIndexHtml(ctx context.Context, templateId string) (*sdkgo.GetTemplateIndexHtmlResponse, error)
	UploadTemplateIndexHtml(ctx context.Context, templateId string, request *sdkgo.UploadTemplateIndexHtmlRequest) error
	CloneTemplate(ctx context.Context, templateId string) (*sdkgo.CloneTemplateResponse, error)
}

func NewClient(opts ...core.ClientOption) Client {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &client{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
	}
}

type client struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

// Initializes template creation by generating a unique ID and providing a presigned URL for template ZIP upload. Sets unfinished tag for tracking incomplete templates.
func (c *client) InitializeTemplateCreation(ctx context.Context) (*sdkgo.InitializeTemplateCreationResponse, error) {
	baseURL := "https://api.pogodoc.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "templates/init"

	var response *sdkgo.InitializeTemplateCreationResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Finalizes template creation by saving template info to Strapi, copying preview files to permanent storage, and creating template index. Removes unfinished tag upon completion.
func (c *client) SaveCreatedTemplate(ctx context.Context, templateId string, request *sdkgo.SaveCreatedTemplateRequest) error {
	baseURL := "https://api.pogodoc.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"templates/%v", templateId)

	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		nil,
		false,
		c.header,
		nil,
	); err != nil {
		return err
	}
	return nil
}

// Updates template content, handles S3 storage cleanup for old content, updates template metadata in Strapi, and manages preview files. Removes unfinished tags after successful update.
func (c *client) UpdateTemplate(ctx context.Context, templateId string, request *sdkgo.UpdateTemplateRequest) (*sdkgo.UpdateTemplateResponse, error) {
	baseURL := "https://api.pogodoc.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"templates/%v", templateId)

	var response *sdkgo.UpdateTemplateResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPut,
		request,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Deletes a template from Strapi and associated S3 storage. Removes all associated files and metadata.
func (c *client) DeleteTemplate(ctx context.Context, templateId string) error {
	baseURL := "https://api.pogodoc.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"templates/%v", templateId)

	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodDelete,
		nil,
		nil,
		false,
		c.header,
		nil,
	); err != nil {
		return err
	}
	return nil
}

// Extracts contents from an uploaded template ZIP file and stores individual files in the appropriate S3 storage structure.
func (c *client) ExtractTemplateFiles(ctx context.Context, templateId string) error {
	baseURL := "https://api.pogodoc.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"templates/%v/unzip", templateId)

	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPost,
		nil,
		nil,
		false,
		c.header,
		nil,
	); err != nil {
		return err
	}
	return nil
}

// Creates both PNG and PDF preview files for template visualization. Generates previews in parallel and returns URLs for both formats.
func (c *client) GenerateTemplatePreviews(ctx context.Context, templateId string, request *sdkgo.GenerateTemplatePreviewsRequest) (*sdkgo.GenerateTemplatePreviewsResponse, error) {
	baseURL := "https://api.pogodoc.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"templates/%v/render-previews", templateId)

	var response *sdkgo.GenerateTemplatePreviewsResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Generates a presigned URL for template access. Used for downloading template files from S3 storage.
func (c *client) GeneratePresignedGetUrl(ctx context.Context, templateId string) (*sdkgo.GeneratePresignedGetUrlResponse, error) {
	baseURL := "https://api.pogodoc.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"templates/%v/presigned-url", templateId)

	var response *sdkgo.GeneratePresignedGetUrlResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Retrieves the template index.html file from S3 storage. Used for rendering the template in the browser.
func (c *client) GetTemplateIndexHtml(ctx context.Context, templateId string) (*sdkgo.GetTemplateIndexHtmlResponse, error) {
	baseURL := "https://api.pogodoc.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"templates/%v/index-html", templateId)

	var response *sdkgo.GetTemplateIndexHtmlResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

// Uploads the template index.html file to S3 storage. Used for rendering the template in the browser.
func (c *client) UploadTemplateIndexHtml(ctx context.Context, templateId string, request *sdkgo.UploadTemplateIndexHtmlRequest) error {
	baseURL := "https://api.pogodoc.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"templates/%v/index-html", templateId)

	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		nil,
		false,
		c.header,
		nil,
	); err != nil {
		return err
	}
	return nil
}

// Creates a new template by duplicating an existing template's content and metadata. Includes copying preview files and template index.
func (c *client) CloneTemplate(ctx context.Context, templateId string) (*sdkgo.CloneTemplateResponse, error) {
	baseURL := "https://api.pogodoc.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"templates/%v/clone", templateId)

	var response *sdkgo.CloneTemplateResponse
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPost,
		nil,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}
