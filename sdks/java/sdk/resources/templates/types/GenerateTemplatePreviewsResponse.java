/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.templates.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = GenerateTemplatePreviewsResponse.Builder.class
)
public final class GenerateTemplatePreviewsResponse {
  private final GenerateTemplatePreviewsResponsePngPreview pngPreview;

  private final GenerateTemplatePreviewsResponsePdfPreview pdfPreview;

  private final Map<String, Object> additionalProperties;

  private GenerateTemplatePreviewsResponse(GenerateTemplatePreviewsResponsePngPreview pngPreview,
      GenerateTemplatePreviewsResponsePdfPreview pdfPreview,
      Map<String, Object> additionalProperties) {
    this.pngPreview = pngPreview;
    this.pdfPreview = pdfPreview;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("pngPreview")
  public GenerateTemplatePreviewsResponsePngPreview getPngPreview() {
    return pngPreview;
  }

  @JsonProperty("pdfPreview")
  public GenerateTemplatePreviewsResponsePdfPreview getPdfPreview() {
    return pdfPreview;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof GenerateTemplatePreviewsResponse && equalTo((GenerateTemplatePreviewsResponse) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(GenerateTemplatePreviewsResponse other) {
    return pngPreview.equals(other.pngPreview) && pdfPreview.equals(other.pdfPreview);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.pngPreview, this.pdfPreview);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static PngPreviewStage builder() {
    return new Builder();
  }

  public interface PngPreviewStage {
    PdfPreviewStage pngPreview(@NotNull GenerateTemplatePreviewsResponsePngPreview pngPreview);

    Builder from(GenerateTemplatePreviewsResponse other);
  }

  public interface PdfPreviewStage {
    _FinalStage pdfPreview(@NotNull GenerateTemplatePreviewsResponsePdfPreview pdfPreview);
  }

  public interface _FinalStage {
    GenerateTemplatePreviewsResponse build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements PngPreviewStage, PdfPreviewStage, _FinalStage {
    private GenerateTemplatePreviewsResponsePngPreview pngPreview;

    private GenerateTemplatePreviewsResponsePdfPreview pdfPreview;

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(GenerateTemplatePreviewsResponse other) {
      pngPreview(other.getPngPreview());
      pdfPreview(other.getPdfPreview());
      return this;
    }

    @java.lang.Override
    @JsonSetter("pngPreview")
    public PdfPreviewStage pngPreview(
        @NotNull GenerateTemplatePreviewsResponsePngPreview pngPreview) {
      this.pngPreview = Objects.requireNonNull(pngPreview, "pngPreview must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("pdfPreview")
    public _FinalStage pdfPreview(@NotNull GenerateTemplatePreviewsResponsePdfPreview pdfPreview) {
      this.pdfPreview = Objects.requireNonNull(pdfPreview, "pdfPreview must not be null");
      return this;
    }

    @java.lang.Override
    public GenerateTemplatePreviewsResponse build() {
      return new GenerateTemplatePreviewsResponse(pngPreview, pdfPreview, additionalProperties);
    }
  }
}
