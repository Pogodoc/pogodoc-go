/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.templates;

import com.fasterxml.jackson.core.JsonProcessingException;
import core.ClientOptions;
import core.MediaTypes;
import core.ObjectMappers;
import core.PogodocApiApiException;
import core.PogodocApiException;
import core.PogodocApiHttpResponse;
import core.RequestOptions;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.Void;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;
import resources.templates.requests.GenerateTemplatePreviewsRequest;
import resources.templates.requests.SaveCreatedTemplateRequest;
import resources.templates.requests.UpdateTemplateRequest;
import resources.templates.requests.UploadTemplateIndexHtmlRequest;
import resources.templates.types.CloneTemplateResponse;
import resources.templates.types.GeneratePresignedGetUrlResponse;
import resources.templates.types.GenerateTemplatePreviewsResponse;
import resources.templates.types.GetTemplateIndexHtmlResponse;
import resources.templates.types.InitializeTemplateCreationResponse;
import resources.templates.types.UpdateTemplateResponse;

public class AsyncRawTemplatesClient {
  protected final ClientOptions clientOptions;

  public AsyncRawTemplatesClient(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
  }

  /**
   * Initializes template creation by generating a unique ID and providing a presigned URL for template ZIP upload. Sets unfinished tag for tracking incomplete templates.
   */
  public CompletableFuture<PogodocApiHttpResponse<InitializeTemplateCreationResponse>> initializeTemplateCreation(
      ) {
    return initializeTemplateCreation(null);
  }

  /**
   * Initializes template creation by generating a unique ID and providing a presigned URL for template ZIP upload. Sets unfinished tag for tracking incomplete templates.
   */
  public CompletableFuture<PogodocApiHttpResponse<InitializeTemplateCreationResponse>> initializeTemplateCreation(
      RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("templates/init")
      .build();
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("GET", null)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    CompletableFuture<PogodocApiHttpResponse<InitializeTemplateCreationResponse>> future = new CompletableFuture<>();
    client.newCall(okhttpRequest).enqueue(new Callback() {
      @Override
      public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
        try (ResponseBody responseBody = response.body()) {
          if (response.isSuccessful()) {
            future.complete(new PogodocApiHttpResponse<>(ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), InitializeTemplateCreationResponse.class), response));
            return;
          }
          String responseBodyString = responseBody != null ? responseBody.string() : "{}";
          future.completeExceptionally(new PogodocApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response));
          return;
        }
        catch (IOException e) {
          future.completeExceptionally(new PogodocApiException("Network error executing HTTP request", e));
        }
      }

      @Override
      public void onFailure(@NotNull Call call, @NotNull IOException e) {
        future.completeExceptionally(new PogodocApiException("Network error executing HTTP request", e));
      }
    });
    return future;
  }

  /**
   * Finalizes template creation by saving template info to Strapi, copying preview files to permanent storage, and creating template index. Removes unfinished tag upon completion.
   */
  public CompletableFuture<PogodocApiHttpResponse<Void>> saveCreatedTemplate(String templateId,
      SaveCreatedTemplateRequest request) {
    return saveCreatedTemplate(templateId,request,null);
  }

  /**
   * Finalizes template creation by saving template info to Strapi, copying preview files to permanent storage, and creating template index. Removes unfinished tag upon completion.
   */
  public CompletableFuture<PogodocApiHttpResponse<Void>> saveCreatedTemplate(String templateId,
      SaveCreatedTemplateRequest request, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("templates")
      .addPathSegment(templateId)
      .build();
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
    }
    catch(JsonProcessingException e) {
      throw new PogodocApiException("Failed to serialize request", e);
    }
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("POST", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    CompletableFuture<PogodocApiHttpResponse<Void>> future = new CompletableFuture<>();
    client.newCall(okhttpRequest).enqueue(new Callback() {
      @Override
      public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
        try (ResponseBody responseBody = response.body()) {
          if (response.isSuccessful()) {
            future.complete(new PogodocApiHttpResponse<>(null, response));
            return;
          }
          String responseBodyString = responseBody != null ? responseBody.string() : "{}";
          future.completeExceptionally(new PogodocApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response));
          return;
        }
        catch (IOException e) {
          future.completeExceptionally(new PogodocApiException("Network error executing HTTP request", e));
        }
      }

      @Override
      public void onFailure(@NotNull Call call, @NotNull IOException e) {
        future.completeExceptionally(new PogodocApiException("Network error executing HTTP request", e));
      }
    });
    return future;
  }

  /**
   * Updates template content, handles S3 storage cleanup for old content, updates template metadata in Strapi, and manages preview files. Removes unfinished tags after successful update.
   */
  public CompletableFuture<PogodocApiHttpResponse<UpdateTemplateResponse>> updateTemplate(
      String templateId, UpdateTemplateRequest request) {
    return updateTemplate(templateId,request,null);
  }

  /**
   * Updates template content, handles S3 storage cleanup for old content, updates template metadata in Strapi, and manages preview files. Removes unfinished tags after successful update.
   */
  public CompletableFuture<PogodocApiHttpResponse<UpdateTemplateResponse>> updateTemplate(
      String templateId, UpdateTemplateRequest request, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("templates")
      .addPathSegment(templateId)
      .build();
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
    }
    catch(JsonProcessingException e) {
      throw new PogodocApiException("Failed to serialize request", e);
    }
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("PUT", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    CompletableFuture<PogodocApiHttpResponse<UpdateTemplateResponse>> future = new CompletableFuture<>();
    client.newCall(okhttpRequest).enqueue(new Callback() {
      @Override
      public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
        try (ResponseBody responseBody = response.body()) {
          if (response.isSuccessful()) {
            future.complete(new PogodocApiHttpResponse<>(ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), UpdateTemplateResponse.class), response));
            return;
          }
          String responseBodyString = responseBody != null ? responseBody.string() : "{}";
          future.completeExceptionally(new PogodocApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response));
          return;
        }
        catch (IOException e) {
          future.completeExceptionally(new PogodocApiException("Network error executing HTTP request", e));
        }
      }

      @Override
      public void onFailure(@NotNull Call call, @NotNull IOException e) {
        future.completeExceptionally(new PogodocApiException("Network error executing HTTP request", e));
      }
    });
    return future;
  }

  /**
   * Deletes a template from Strapi and associated S3 storage. Removes all associated files and metadata.
   */
  public CompletableFuture<PogodocApiHttpResponse<Void>> deleteTemplate(String templateId) {
    return deleteTemplate(templateId,null);
  }

  /**
   * Deletes a template from Strapi and associated S3 storage. Removes all associated files and metadata.
   */
  public CompletableFuture<PogodocApiHttpResponse<Void>> deleteTemplate(String templateId,
      RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("templates")
      .addPathSegment(templateId)
      .build();
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("DELETE", null)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    CompletableFuture<PogodocApiHttpResponse<Void>> future = new CompletableFuture<>();
    client.newCall(okhttpRequest).enqueue(new Callback() {
      @Override
      public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
        try (ResponseBody responseBody = response.body()) {
          if (response.isSuccessful()) {
            future.complete(new PogodocApiHttpResponse<>(null, response));
            return;
          }
          String responseBodyString = responseBody != null ? responseBody.string() : "{}";
          future.completeExceptionally(new PogodocApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response));
          return;
        }
        catch (IOException e) {
          future.completeExceptionally(new PogodocApiException("Network error executing HTTP request", e));
        }
      }

      @Override
      public void onFailure(@NotNull Call call, @NotNull IOException e) {
        future.completeExceptionally(new PogodocApiException("Network error executing HTTP request", e));
      }
    });
    return future;
  }

  /**
   * Extracts contents from an uploaded template ZIP file and stores individual files in the appropriate S3 storage structure.
   */
  public CompletableFuture<PogodocApiHttpResponse<Void>> extractTemplateFiles(String templateId) {
    return extractTemplateFiles(templateId,null);
  }

  /**
   * Extracts contents from an uploaded template ZIP file and stores individual files in the appropriate S3 storage structure.
   */
  public CompletableFuture<PogodocApiHttpResponse<Void>> extractTemplateFiles(String templateId,
      RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("templates")
      .addPathSegment(templateId)
      .addPathSegments("unzip")
      .build();
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("PATCH", null)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    CompletableFuture<PogodocApiHttpResponse<Void>> future = new CompletableFuture<>();
    client.newCall(okhttpRequest).enqueue(new Callback() {
      @Override
      public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
        try (ResponseBody responseBody = response.body()) {
          if (response.isSuccessful()) {
            future.complete(new PogodocApiHttpResponse<>(null, response));
            return;
          }
          String responseBodyString = responseBody != null ? responseBody.string() : "{}";
          future.completeExceptionally(new PogodocApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response));
          return;
        }
        catch (IOException e) {
          future.completeExceptionally(new PogodocApiException("Network error executing HTTP request", e));
        }
      }

      @Override
      public void onFailure(@NotNull Call call, @NotNull IOException e) {
        future.completeExceptionally(new PogodocApiException("Network error executing HTTP request", e));
      }
    });
    return future;
  }

  /**
   * Creates both PNG and PDF preview files for template visualization. Generates previews in parallel and returns URLs for both formats.
   */
  public CompletableFuture<PogodocApiHttpResponse<GenerateTemplatePreviewsResponse>> generateTemplatePreviews(
      String templateId, GenerateTemplatePreviewsRequest request) {
    return generateTemplatePreviews(templateId,request,null);
  }

  /**
   * Creates both PNG and PDF preview files for template visualization. Generates previews in parallel and returns URLs for both formats.
   */
  public CompletableFuture<PogodocApiHttpResponse<GenerateTemplatePreviewsResponse>> generateTemplatePreviews(
      String templateId, GenerateTemplatePreviewsRequest request, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("templates")
      .addPathSegment(templateId)
      .addPathSegments("render-previews")
      .build();
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
    }
    catch(JsonProcessingException e) {
      throw new PogodocApiException("Failed to serialize request", e);
    }
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("POST", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    CompletableFuture<PogodocApiHttpResponse<GenerateTemplatePreviewsResponse>> future = new CompletableFuture<>();
    client.newCall(okhttpRequest).enqueue(new Callback() {
      @Override
      public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
        try (ResponseBody responseBody = response.body()) {
          if (response.isSuccessful()) {
            future.complete(new PogodocApiHttpResponse<>(ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GenerateTemplatePreviewsResponse.class), response));
            return;
          }
          String responseBodyString = responseBody != null ? responseBody.string() : "{}";
          future.completeExceptionally(new PogodocApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response));
          return;
        }
        catch (IOException e) {
          future.completeExceptionally(new PogodocApiException("Network error executing HTTP request", e));
        }
      }

      @Override
      public void onFailure(@NotNull Call call, @NotNull IOException e) {
        future.completeExceptionally(new PogodocApiException("Network error executing HTTP request", e));
      }
    });
    return future;
  }

  /**
   * Generates a presigned URL for template access. Used for downloading template files from S3 storage.
   */
  public CompletableFuture<PogodocApiHttpResponse<GeneratePresignedGetUrlResponse>> generatePresignedGetUrl(
      String templateId) {
    return generatePresignedGetUrl(templateId,null);
  }

  /**
   * Generates a presigned URL for template access. Used for downloading template files from S3 storage.
   */
  public CompletableFuture<PogodocApiHttpResponse<GeneratePresignedGetUrlResponse>> generatePresignedGetUrl(
      String templateId, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("templates")
      .addPathSegment(templateId)
      .addPathSegments("presigned-url")
      .build();
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("GET", null)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    CompletableFuture<PogodocApiHttpResponse<GeneratePresignedGetUrlResponse>> future = new CompletableFuture<>();
    client.newCall(okhttpRequest).enqueue(new Callback() {
      @Override
      public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
        try (ResponseBody responseBody = response.body()) {
          if (response.isSuccessful()) {
            future.complete(new PogodocApiHttpResponse<>(ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GeneratePresignedGetUrlResponse.class), response));
            return;
          }
          String responseBodyString = responseBody != null ? responseBody.string() : "{}";
          future.completeExceptionally(new PogodocApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response));
          return;
        }
        catch (IOException e) {
          future.completeExceptionally(new PogodocApiException("Network error executing HTTP request", e));
        }
      }

      @Override
      public void onFailure(@NotNull Call call, @NotNull IOException e) {
        future.completeExceptionally(new PogodocApiException("Network error executing HTTP request", e));
      }
    });
    return future;
  }

  /**
   * Retrieves the template index.html file from S3 storage. Used for rendering the template in the browser.
   */
  public CompletableFuture<PogodocApiHttpResponse<GetTemplateIndexHtmlResponse>> getTemplateIndexHtml(
      String templateId) {
    return getTemplateIndexHtml(templateId,null);
  }

  /**
   * Retrieves the template index.html file from S3 storage. Used for rendering the template in the browser.
   */
  public CompletableFuture<PogodocApiHttpResponse<GetTemplateIndexHtmlResponse>> getTemplateIndexHtml(
      String templateId, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("templates")
      .addPathSegment(templateId)
      .addPathSegments("index-html")
      .build();
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("GET", null)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    CompletableFuture<PogodocApiHttpResponse<GetTemplateIndexHtmlResponse>> future = new CompletableFuture<>();
    client.newCall(okhttpRequest).enqueue(new Callback() {
      @Override
      public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
        try (ResponseBody responseBody = response.body()) {
          if (response.isSuccessful()) {
            future.complete(new PogodocApiHttpResponse<>(ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GetTemplateIndexHtmlResponse.class), response));
            return;
          }
          String responseBodyString = responseBody != null ? responseBody.string() : "{}";
          future.completeExceptionally(new PogodocApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response));
          return;
        }
        catch (IOException e) {
          future.completeExceptionally(new PogodocApiException("Network error executing HTTP request", e));
        }
      }

      @Override
      public void onFailure(@NotNull Call call, @NotNull IOException e) {
        future.completeExceptionally(new PogodocApiException("Network error executing HTTP request", e));
      }
    });
    return future;
  }

  /**
   * Uploads the template index.html file to S3 storage. Used for rendering the template in the browser.
   */
  public CompletableFuture<PogodocApiHttpResponse<Void>> uploadTemplateIndexHtml(String templateId,
      UploadTemplateIndexHtmlRequest request) {
    return uploadTemplateIndexHtml(templateId,request,null);
  }

  /**
   * Uploads the template index.html file to S3 storage. Used for rendering the template in the browser.
   */
  public CompletableFuture<PogodocApiHttpResponse<Void>> uploadTemplateIndexHtml(String templateId,
      UploadTemplateIndexHtmlRequest request, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("templates")
      .addPathSegment(templateId)
      .addPathSegments("index-html")
      .build();
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
    }
    catch(JsonProcessingException e) {
      throw new PogodocApiException("Failed to serialize request", e);
    }
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("POST", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    CompletableFuture<PogodocApiHttpResponse<Void>> future = new CompletableFuture<>();
    client.newCall(okhttpRequest).enqueue(new Callback() {
      @Override
      public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
        try (ResponseBody responseBody = response.body()) {
          if (response.isSuccessful()) {
            future.complete(new PogodocApiHttpResponse<>(null, response));
            return;
          }
          String responseBodyString = responseBody != null ? responseBody.string() : "{}";
          future.completeExceptionally(new PogodocApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response));
          return;
        }
        catch (IOException e) {
          future.completeExceptionally(new PogodocApiException("Network error executing HTTP request", e));
        }
      }

      @Override
      public void onFailure(@NotNull Call call, @NotNull IOException e) {
        future.completeExceptionally(new PogodocApiException("Network error executing HTTP request", e));
      }
    });
    return future;
  }

  /**
   * Creates a new template by duplicating an existing template's content and metadata. Includes copying preview files and template index.
   */
  public CompletableFuture<PogodocApiHttpResponse<CloneTemplateResponse>> cloneTemplate(
      String templateId) {
    return cloneTemplate(templateId,null);
  }

  /**
   * Creates a new template by duplicating an existing template's content and metadata. Includes copying preview files and template index.
   */
  public CompletableFuture<PogodocApiHttpResponse<CloneTemplateResponse>> cloneTemplate(
      String templateId, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("templates")
      .addPathSegment(templateId)
      .addPathSegments("clone")
      .build();
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("POST", RequestBody.create("", null))
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    CompletableFuture<PogodocApiHttpResponse<CloneTemplateResponse>> future = new CompletableFuture<>();
    client.newCall(okhttpRequest).enqueue(new Callback() {
      @Override
      public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
        try (ResponseBody responseBody = response.body()) {
          if (response.isSuccessful()) {
            future.complete(new PogodocApiHttpResponse<>(ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), CloneTemplateResponse.class), response));
            return;
          }
          String responseBodyString = responseBody != null ? responseBody.string() : "{}";
          future.completeExceptionally(new PogodocApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response));
          return;
        }
        catch (IOException e) {
          future.completeExceptionally(new PogodocApiException("Network error executing HTTP request", e));
        }
      }

      @Override
      public void onFailure(@NotNull Call call, @NotNull IOException e) {
        future.completeExceptionally(new PogodocApiException("Network error executing HTTP request", e));
      }
    });
    return future;
  }
}
