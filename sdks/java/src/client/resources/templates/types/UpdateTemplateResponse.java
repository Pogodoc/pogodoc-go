/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.templates.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = UpdateTemplateResponse.Builder.class
)
public final class UpdateTemplateResponse {
  private final String newContentId;

  private final Map<String, Object> additionalProperties;

  private UpdateTemplateResponse(String newContentId, Map<String, Object> additionalProperties) {
    this.newContentId = newContentId;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("newContentId")
  public String getNewContentId() {
    return newContentId;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof UpdateTemplateResponse && equalTo((UpdateTemplateResponse) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(UpdateTemplateResponse other) {
    return newContentId.equals(other.newContentId);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.newContentId);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static NewContentIdStage builder() {
    return new Builder();
  }

  public interface NewContentIdStage {
    _FinalStage newContentId(@NotNull String newContentId);

    Builder from(UpdateTemplateResponse other);
  }

  public interface _FinalStage {
    UpdateTemplateResponse build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements NewContentIdStage, _FinalStage {
    private String newContentId;

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(UpdateTemplateResponse other) {
      newContentId(other.getNewContentId());
      return this;
    }

    @java.lang.Override
    @JsonSetter("newContentId")
    public _FinalStage newContentId(@NotNull String newContentId) {
      this.newContentId = Objects.requireNonNull(newContentId, "newContentId must not be null");
      return this;
    }

    @java.lang.Override
    public UpdateTemplateResponse build() {
      return new UpdateTemplateResponse(newContentId, additionalProperties);
    }
  }
}
