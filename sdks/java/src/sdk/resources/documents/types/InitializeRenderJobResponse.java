/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.documents.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = InitializeRenderJobResponse.Builder.class
)
public final class InitializeRenderJobResponse {
  private final String jobId;

  private final InitializeRenderJobResponseTarget target;

  private final Optional<String> presignedDataUploadUrl;

  private final Optional<String> presignedTemplateUploadUrl;

  private final Map<String, Object> additionalProperties;

  private InitializeRenderJobResponse(String jobId, InitializeRenderJobResponseTarget target,
      Optional<String> presignedDataUploadUrl, Optional<String> presignedTemplateUploadUrl,
      Map<String, Object> additionalProperties) {
    this.jobId = jobId;
    this.target = target;
    this.presignedDataUploadUrl = presignedDataUploadUrl;
    this.presignedTemplateUploadUrl = presignedTemplateUploadUrl;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("jobId")
  public String getJobId() {
    return jobId;
  }

  @JsonProperty("target")
  public InitializeRenderJobResponseTarget getTarget() {
    return target;
  }

  @JsonProperty("presignedDataUploadUrl")
  public Optional<String> getPresignedDataUploadUrl() {
    return presignedDataUploadUrl;
  }

  @JsonProperty("presignedTemplateUploadUrl")
  public Optional<String> getPresignedTemplateUploadUrl() {
    return presignedTemplateUploadUrl;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof InitializeRenderJobResponse && equalTo((InitializeRenderJobResponse) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(InitializeRenderJobResponse other) {
    return jobId.equals(other.jobId) && target.equals(other.target) && presignedDataUploadUrl.equals(other.presignedDataUploadUrl) && presignedTemplateUploadUrl.equals(other.presignedTemplateUploadUrl);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.jobId, this.target, this.presignedDataUploadUrl, this.presignedTemplateUploadUrl);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static JobIdStage builder() {
    return new Builder();
  }

  public interface JobIdStage {
    TargetStage jobId(@NotNull String jobId);

    Builder from(InitializeRenderJobResponse other);
  }

  public interface TargetStage {
    _FinalStage target(@NotNull InitializeRenderJobResponseTarget target);
  }

  public interface _FinalStage {
    InitializeRenderJobResponse build();

    _FinalStage presignedDataUploadUrl(Optional<String> presignedDataUploadUrl);

    _FinalStage presignedDataUploadUrl(String presignedDataUploadUrl);

    _FinalStage presignedTemplateUploadUrl(Optional<String> presignedTemplateUploadUrl);

    _FinalStage presignedTemplateUploadUrl(String presignedTemplateUploadUrl);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements JobIdStage, TargetStage, _FinalStage {
    private String jobId;

    private InitializeRenderJobResponseTarget target;

    private Optional<String> presignedTemplateUploadUrl = Optional.empty();

    private Optional<String> presignedDataUploadUrl = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(InitializeRenderJobResponse other) {
      jobId(other.getJobId());
      target(other.getTarget());
      presignedDataUploadUrl(other.getPresignedDataUploadUrl());
      presignedTemplateUploadUrl(other.getPresignedTemplateUploadUrl());
      return this;
    }

    @java.lang.Override
    @JsonSetter("jobId")
    public TargetStage jobId(@NotNull String jobId) {
      this.jobId = Objects.requireNonNull(jobId, "jobId must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("target")
    public _FinalStage target(@NotNull InitializeRenderJobResponseTarget target) {
      this.target = Objects.requireNonNull(target, "target must not be null");
      return this;
    }

    @java.lang.Override
    public _FinalStage presignedTemplateUploadUrl(String presignedTemplateUploadUrl) {
      this.presignedTemplateUploadUrl = Optional.ofNullable(presignedTemplateUploadUrl);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "presignedTemplateUploadUrl",
        nulls = Nulls.SKIP
    )
    public _FinalStage presignedTemplateUploadUrl(Optional<String> presignedTemplateUploadUrl) {
      this.presignedTemplateUploadUrl = presignedTemplateUploadUrl;
      return this;
    }

    @java.lang.Override
    public _FinalStage presignedDataUploadUrl(String presignedDataUploadUrl) {
      this.presignedDataUploadUrl = Optional.ofNullable(presignedDataUploadUrl);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "presignedDataUploadUrl",
        nulls = Nulls.SKIP
    )
    public _FinalStage presignedDataUploadUrl(Optional<String> presignedDataUploadUrl) {
      this.presignedDataUploadUrl = presignedDataUploadUrl;
      return this;
    }

    @java.lang.Override
    public InitializeRenderJobResponse build() {
      return new InitializeRenderJobResponse(jobId, target, presignedDataUploadUrl, presignedTemplateUploadUrl, additionalProperties);
    }
  }
}
