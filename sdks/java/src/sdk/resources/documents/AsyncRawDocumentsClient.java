/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.documents;

import com.fasterxml.jackson.core.JsonProcessingException;
import core.ClientOptions;
import core.MediaTypes;
import core.ObjectMappers;
import core.PogodocApiApiException;
import core.PogodocApiException;
import core.PogodocApiHttpResponse;
import core.RequestOptions;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;
import resources.documents.requests.InitializeRenderJobRequest;
import resources.documents.requests.StartImmediateRenderRequest;
import resources.documents.requests.StartRenderJobRequest;
import resources.documents.types.GetJobStatusResponse;
import resources.documents.types.InitializeRenderJobResponse;
import resources.documents.types.StartImmediateRenderResponse;
import resources.documents.types.StartRenderJobResponse;

public class AsyncRawDocumentsClient {
  protected final ClientOptions clientOptions;

  public AsyncRawDocumentsClient(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
  }

  /**
   * Creates a new render job with a unique ID, sets up S3 storage for template and data files, and generates presigned upload URLs if needed. Requires subscription check.
   */
  public CompletableFuture<PogodocApiHttpResponse<InitializeRenderJobResponse>> initializeRenderJob(
      InitializeRenderJobRequest request) {
    return initializeRenderJob(request,null);
  }

  /**
   * Creates a new render job with a unique ID, sets up S3 storage for template and data files, and generates presigned upload URLs if needed. Requires subscription check.
   */
  public CompletableFuture<PogodocApiHttpResponse<InitializeRenderJobResponse>> initializeRenderJob(
      InitializeRenderJobRequest request, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("documents/init")
      .build();
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
    }
    catch(JsonProcessingException e) {
      throw new PogodocApiException("Failed to serialize request", e);
    }
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("POST", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    CompletableFuture<PogodocApiHttpResponse<InitializeRenderJobResponse>> future = new CompletableFuture<>();
    client.newCall(okhttpRequest).enqueue(new Callback() {
      @Override
      public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
        try (ResponseBody responseBody = response.body()) {
          if (response.isSuccessful()) {
            future.complete(new PogodocApiHttpResponse<>(ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), InitializeRenderJobResponse.class), response));
            return;
          }
          String responseBodyString = responseBody != null ? responseBody.string() : "{}";
          future.completeExceptionally(new PogodocApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response));
          return;
        }
        catch (IOException e) {
          future.completeExceptionally(new PogodocApiException("Network error executing HTTP request", e));
        }
      }

      @Override
      public void onFailure(@NotNull Call call, @NotNull IOException e) {
        future.completeExceptionally(new PogodocApiException("Network error executing HTTP request", e));
      }
    });
    return future;
  }

  /**
   * Takes a previously initialized job, updates its status to in-progress, and triggers the rendering process using Puppeteer. Can optionally wait for render completion.
   */
  public CompletableFuture<PogodocApiHttpResponse<StartRenderJobResponse>> startRenderJob(
      String jobId) {
    return startRenderJob(jobId,StartRenderJobRequest.builder().build());
  }

  /**
   * Takes a previously initialized job, updates its status to in-progress, and triggers the rendering process using Puppeteer. Can optionally wait for render completion.
   */
  public CompletableFuture<PogodocApiHttpResponse<StartRenderJobResponse>> startRenderJob(
      String jobId, StartRenderJobRequest request) {
    return startRenderJob(jobId,request,null);
  }

  /**
   * Takes a previously initialized job, updates its status to in-progress, and triggers the rendering process using Puppeteer. Can optionally wait for render completion.
   */
  public CompletableFuture<PogodocApiHttpResponse<StartRenderJobResponse>> startRenderJob(
      String jobId, StartRenderJobRequest request, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("documents")
      .addPathSegment(jobId)
      .addPathSegments("render")
      .build();
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
    }
    catch(JsonProcessingException e) {
      throw new PogodocApiException("Failed to serialize request", e);
    }
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("POST", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    CompletableFuture<PogodocApiHttpResponse<StartRenderJobResponse>> future = new CompletableFuture<>();
    client.newCall(okhttpRequest).enqueue(new Callback() {
      @Override
      public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
        try (ResponseBody responseBody = response.body()) {
          if (response.isSuccessful()) {
            future.complete(new PogodocApiHttpResponse<>(ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), StartRenderJobResponse.class), response));
            return;
          }
          String responseBodyString = responseBody != null ? responseBody.string() : "{}";
          future.completeExceptionally(new PogodocApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response));
          return;
        }
        catch (IOException e) {
          future.completeExceptionally(new PogodocApiException("Network error executing HTTP request", e));
        }
      }

      @Override
      public void onFailure(@NotNull Call call, @NotNull IOException e) {
        future.completeExceptionally(new PogodocApiException("Network error executing HTTP request", e));
      }
    });
    return future;
  }

  /**
   * Combines initialization and rendering in one step. Creates a job, uploads template/data directly, starts rendering, and adds the document to Strapi. Requires subscription check.
   */
  public CompletableFuture<PogodocApiHttpResponse<StartImmediateRenderResponse>> startImmediateRender(
      StartImmediateRenderRequest request) {
    return startImmediateRender(request,null);
  }

  /**
   * Combines initialization and rendering in one step. Creates a job, uploads template/data directly, starts rendering, and adds the document to Strapi. Requires subscription check.
   */
  public CompletableFuture<PogodocApiHttpResponse<StartImmediateRenderResponse>> startImmediateRender(
      StartImmediateRenderRequest request, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("documents/immediate-render")
      .build();
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
    }
    catch(JsonProcessingException e) {
      throw new PogodocApiException("Failed to serialize request", e);
    }
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("POST", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    CompletableFuture<PogodocApiHttpResponse<StartImmediateRenderResponse>> future = new CompletableFuture<>();
    client.newCall(okhttpRequest).enqueue(new Callback() {
      @Override
      public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
        try (ResponseBody responseBody = response.body()) {
          if (response.isSuccessful()) {
            future.complete(new PogodocApiHttpResponse<>(ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), StartImmediateRenderResponse.class), response));
            return;
          }
          String responseBodyString = responseBody != null ? responseBody.string() : "{}";
          future.completeExceptionally(new PogodocApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response));
          return;
        }
        catch (IOException e) {
          future.completeExceptionally(new PogodocApiException("Network error executing HTTP request", e));
        }
      }

      @Override
      public void onFailure(@NotNull Call call, @NotNull IOException e) {
        future.completeExceptionally(new PogodocApiException("Network error executing HTTP request", e));
      }
    });
    return future;
  }

  /**
   * Fetches detailed job information from S3 storage including job status, template ID, target format, and output details if available.
   */
  public CompletableFuture<PogodocApiHttpResponse<GetJobStatusResponse>> getJobStatus(
      String jobId) {
    return getJobStatus(jobId,null);
  }

  /**
   * Fetches detailed job information from S3 storage including job status, template ID, target format, and output details if available.
   */
  public CompletableFuture<PogodocApiHttpResponse<GetJobStatusResponse>> getJobStatus(String jobId,
      RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("jobs")
      .addPathSegment(jobId)
      .build();
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("GET", null)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    CompletableFuture<PogodocApiHttpResponse<GetJobStatusResponse>> future = new CompletableFuture<>();
    client.newCall(okhttpRequest).enqueue(new Callback() {
      @Override
      public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
        try (ResponseBody responseBody = response.body()) {
          if (response.isSuccessful()) {
            future.complete(new PogodocApiHttpResponse<>(ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GetJobStatusResponse.class), response));
            return;
          }
          String responseBodyString = responseBody != null ? responseBody.string() : "{}";
          future.completeExceptionally(new PogodocApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response));
          return;
        }
        catch (IOException e) {
          future.completeExceptionally(new PogodocApiException("Network error executing HTTP request", e));
        }
      }

      @Override
      public void onFailure(@NotNull Call call, @NotNull IOException e) {
        future.completeExceptionally(new PogodocApiException("Network error executing HTTP request", e));
      }
    });
    return future;
  }
}
