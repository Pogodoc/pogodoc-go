/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.templates.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = SaveCreatedTemplateRequestTemplateInfo.Builder.class
)
public final class SaveCreatedTemplateRequestTemplateInfo {
  private final String title;

  private final String description;

  private final SaveCreatedTemplateRequestTemplateInfoType type;

  private final Map<String, Object> sampleData;

  private final Optional<String> sourceCode;

  private final List<SaveCreatedTemplateRequestTemplateInfoCategoriesItem> categories;

  private final Map<String, Object> additionalProperties;

  private SaveCreatedTemplateRequestTemplateInfo(String title, String description,
      SaveCreatedTemplateRequestTemplateInfoType type, Map<String, Object> sampleData,
      Optional<String> sourceCode,
      List<SaveCreatedTemplateRequestTemplateInfoCategoriesItem> categories,
      Map<String, Object> additionalProperties) {
    this.title = title;
    this.description = description;
    this.type = type;
    this.sampleData = sampleData;
    this.sourceCode = sourceCode;
    this.categories = categories;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return Title of the template
   */
  @JsonProperty("title")
  public String getTitle() {
    return title;
  }

  /**
   * @return Description of the template
   */
  @JsonProperty("description")
  public String getDescription() {
    return description;
  }

  /**
   * @return Type of template to be rendered
   */
  @JsonProperty("type")
  public SaveCreatedTemplateRequestTemplateInfoType getType() {
    return type;
  }

  /**
   * @return Sample data for the template
   */
  @JsonProperty("sampleData")
  public Map<String, Object> getSampleData() {
    return sampleData;
  }

  @JsonProperty("sourceCode")
  public Optional<String> getSourceCode() {
    return sourceCode;
  }

  /**
   * @return Categories of the template
   */
  @JsonProperty("categories")
  public List<SaveCreatedTemplateRequestTemplateInfoCategoriesItem> getCategories() {
    return categories;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof SaveCreatedTemplateRequestTemplateInfo && equalTo((SaveCreatedTemplateRequestTemplateInfo) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(SaveCreatedTemplateRequestTemplateInfo other) {
    return title.equals(other.title) && description.equals(other.description) && type.equals(other.type) && sampleData.equals(other.sampleData) && sourceCode.equals(other.sourceCode) && categories.equals(other.categories);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.title, this.description, this.type, this.sampleData, this.sourceCode, this.categories);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static TitleStage builder() {
    return new Builder();
  }

  public interface TitleStage {
    DescriptionStage title(@NotNull String title);

    Builder from(SaveCreatedTemplateRequestTemplateInfo other);
  }

  public interface DescriptionStage {
    TypeStage description(@NotNull String description);
  }

  public interface TypeStage {
    _FinalStage type(@NotNull SaveCreatedTemplateRequestTemplateInfoType type);
  }

  public interface _FinalStage {
    SaveCreatedTemplateRequestTemplateInfo build();

    _FinalStage sampleData(Map<String, Object> sampleData);

    _FinalStage putAllSampleData(Map<String, Object> sampleData);

    _FinalStage sampleData(String key, Object value);

    _FinalStage sourceCode(Optional<String> sourceCode);

    _FinalStage sourceCode(String sourceCode);

    _FinalStage categories(List<SaveCreatedTemplateRequestTemplateInfoCategoriesItem> categories);

    _FinalStage addCategories(SaveCreatedTemplateRequestTemplateInfoCategoriesItem categories);

    _FinalStage addAllCategories(
        List<SaveCreatedTemplateRequestTemplateInfoCategoriesItem> categories);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements TitleStage, DescriptionStage, TypeStage, _FinalStage {
    private String title;

    private String description;

    private SaveCreatedTemplateRequestTemplateInfoType type;

    private List<SaveCreatedTemplateRequestTemplateInfoCategoriesItem> categories = new ArrayList<>();

    private Optional<String> sourceCode = Optional.empty();

    private Map<String, Object> sampleData = new LinkedHashMap<>();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(SaveCreatedTemplateRequestTemplateInfo other) {
      title(other.getTitle());
      description(other.getDescription());
      type(other.getType());
      sampleData(other.getSampleData());
      sourceCode(other.getSourceCode());
      categories(other.getCategories());
      return this;
    }

    /**
     * <p>Title of the template</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("title")
    public DescriptionStage title(@NotNull String title) {
      this.title = Objects.requireNonNull(title, "title must not be null");
      return this;
    }

    /**
     * <p>Description of the template</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("description")
    public TypeStage description(@NotNull String description) {
      this.description = Objects.requireNonNull(description, "description must not be null");
      return this;
    }

    /**
     * <p>Type of template to be rendered</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("type")
    public _FinalStage type(@NotNull SaveCreatedTemplateRequestTemplateInfoType type) {
      this.type = Objects.requireNonNull(type, "type must not be null");
      return this;
    }

    /**
     * <p>Categories of the template</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage addAllCategories(
        List<SaveCreatedTemplateRequestTemplateInfoCategoriesItem> categories) {
      this.categories.addAll(categories);
      return this;
    }

    /**
     * <p>Categories of the template</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage addCategories(
        SaveCreatedTemplateRequestTemplateInfoCategoriesItem categories) {
      this.categories.add(categories);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "categories",
        nulls = Nulls.SKIP
    )
    public _FinalStage categories(
        List<SaveCreatedTemplateRequestTemplateInfoCategoriesItem> categories) {
      this.categories.clear();
      this.categories.addAll(categories);
      return this;
    }

    @java.lang.Override
    public _FinalStage sourceCode(String sourceCode) {
      this.sourceCode = Optional.ofNullable(sourceCode);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "sourceCode",
        nulls = Nulls.SKIP
    )
    public _FinalStage sourceCode(Optional<String> sourceCode) {
      this.sourceCode = sourceCode;
      return this;
    }

    /**
     * <p>Sample data for the template</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage sampleData(String key, Object value) {
      this.sampleData.put(key, value);
      return this;
    }

    /**
     * <p>Sample data for the template</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    public _FinalStage putAllSampleData(Map<String, Object> sampleData) {
      this.sampleData.putAll(sampleData);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "sampleData",
        nulls = Nulls.SKIP
    )
    public _FinalStage sampleData(Map<String, Object> sampleData) {
      this.sampleData.clear();
      this.sampleData.putAll(sampleData);
      return this;
    }

    @java.lang.Override
    public SaveCreatedTemplateRequestTemplateInfo build() {
      return new SaveCreatedTemplateRequestTemplateInfo(title, description, type, sampleData, sourceCode, categories, additionalProperties);
    }
  }
}
