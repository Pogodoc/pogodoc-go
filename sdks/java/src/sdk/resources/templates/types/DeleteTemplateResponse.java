/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.templates.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = DeleteTemplateResponse.Builder.class
)
public final class DeleteTemplateResponse {
  private final String templateId;

  private final Map<String, Object> additionalProperties;

  private DeleteTemplateResponse(String templateId, Map<String, Object> additionalProperties) {
    this.templateId = templateId;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("templateId")
  public String getTemplateId() {
    return templateId;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof DeleteTemplateResponse && equalTo((DeleteTemplateResponse) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(DeleteTemplateResponse other) {
    return templateId.equals(other.templateId);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.templateId);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static TemplateIdStage builder() {
    return new Builder();
  }

  public interface TemplateIdStage {
    _FinalStage templateId(@NotNull String templateId);

    Builder from(DeleteTemplateResponse other);
  }

  public interface _FinalStage {
    DeleteTemplateResponse build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements TemplateIdStage, _FinalStage {
    private String templateId;

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(DeleteTemplateResponse other) {
      templateId(other.getTemplateId());
      return this;
    }

    @java.lang.Override
    @JsonSetter("templateId")
    public _FinalStage templateId(@NotNull String templateId) {
      this.templateId = Objects.requireNonNull(templateId, "templateId must not be null");
      return this;
    }

    @java.lang.Override
    public DeleteTemplateResponse build() {
      return new DeleteTemplateResponse(templateId, additionalProperties);
    }
  }
}
