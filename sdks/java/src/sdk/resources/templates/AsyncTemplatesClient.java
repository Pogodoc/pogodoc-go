/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.templates;

import core.ClientOptions;
import core.RequestOptions;
import java.lang.String;
import java.lang.Void;
import java.util.concurrent.CompletableFuture;
import resources.templates.requests.GenerateTemplatePreviewsRequest;
import resources.templates.requests.SaveCreatedTemplateRequest;
import resources.templates.requests.UpdateTemplateRequest;
import resources.templates.requests.UploadTemplateIndexHtmlRequest;
import resources.templates.types.CloneTemplateResponse;
import resources.templates.types.GeneratePresignedGetUrlResponse;
import resources.templates.types.GenerateTemplatePreviewsResponse;
import resources.templates.types.GetTemplateIndexHtmlResponse;
import resources.templates.types.InitializeTemplateCreationResponse;
import resources.templates.types.UpdateTemplateResponse;

public class AsyncTemplatesClient {
  protected final ClientOptions clientOptions;

  private final AsyncRawTemplatesClient rawClient;

  public AsyncTemplatesClient(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
    this.rawClient = new AsyncRawTemplatesClient(clientOptions);
  }

  /**
   * Get responses with HTTP metadata like headers
   */
  public AsyncRawTemplatesClient withRawResponse() {
    return this.rawClient;
  }

  /**
   * Initializes template creation by generating a unique ID and providing a presigned URL for template ZIP upload. Sets unfinished tag for tracking incomplete templates.
   */
  public CompletableFuture<InitializeTemplateCreationResponse> initializeTemplateCreation() {
    return this.rawClient.initializeTemplateCreation().thenApply(response -> response.body());
  }

  /**
   * Initializes template creation by generating a unique ID and providing a presigned URL for template ZIP upload. Sets unfinished tag for tracking incomplete templates.
   */
  public CompletableFuture<InitializeTemplateCreationResponse> initializeTemplateCreation(
      RequestOptions requestOptions) {
    return this.rawClient.initializeTemplateCreation(requestOptions).thenApply(response -> response.body());
  }

  /**
   * Finalizes template creation by saving template info to Strapi, copying preview files to permanent storage, and creating template index. Removes unfinished tag upon completion.
   */
  public CompletableFuture<Void> saveCreatedTemplate(String templateId,
      SaveCreatedTemplateRequest request) {
    return this.rawClient.saveCreatedTemplate(templateId, request).thenApply(response -> response.body());
  }

  /**
   * Finalizes template creation by saving template info to Strapi, copying preview files to permanent storage, and creating template index. Removes unfinished tag upon completion.
   */
  public CompletableFuture<Void> saveCreatedTemplate(String templateId,
      SaveCreatedTemplateRequest request, RequestOptions requestOptions) {
    return this.rawClient.saveCreatedTemplate(templateId, request, requestOptions).thenApply(response -> response.body());
  }

  /**
   * Updates template content, handles S3 storage cleanup for old content, updates template metadata in Strapi, and manages preview files. Removes unfinished tags after successful update.
   */
  public CompletableFuture<UpdateTemplateResponse> updateTemplate(String templateId,
      UpdateTemplateRequest request) {
    return this.rawClient.updateTemplate(templateId, request).thenApply(response -> response.body());
  }

  /**
   * Updates template content, handles S3 storage cleanup for old content, updates template metadata in Strapi, and manages preview files. Removes unfinished tags after successful update.
   */
  public CompletableFuture<UpdateTemplateResponse> updateTemplate(String templateId,
      UpdateTemplateRequest request, RequestOptions requestOptions) {
    return this.rawClient.updateTemplate(templateId, request, requestOptions).thenApply(response -> response.body());
  }

  /**
   * Deletes a template from Strapi and associated S3 storage. Removes all associated files and metadata.
   */
  public CompletableFuture<Void> deleteTemplate(String templateId) {
    return this.rawClient.deleteTemplate(templateId).thenApply(response -> response.body());
  }

  /**
   * Deletes a template from Strapi and associated S3 storage. Removes all associated files and metadata.
   */
  public CompletableFuture<Void> deleteTemplate(String templateId, RequestOptions requestOptions) {
    return this.rawClient.deleteTemplate(templateId, requestOptions).thenApply(response -> response.body());
  }

  /**
   * Extracts contents from an uploaded template ZIP file and stores individual files in the appropriate S3 storage structure.
   */
  public CompletableFuture<Void> extractTemplateFiles(String templateId) {
    return this.rawClient.extractTemplateFiles(templateId).thenApply(response -> response.body());
  }

  /**
   * Extracts contents from an uploaded template ZIP file and stores individual files in the appropriate S3 storage structure.
   */
  public CompletableFuture<Void> extractTemplateFiles(String templateId,
      RequestOptions requestOptions) {
    return this.rawClient.extractTemplateFiles(templateId, requestOptions).thenApply(response -> response.body());
  }

  /**
   * Creates both PNG and PDF preview files for template visualization. Generates previews in parallel and returns URLs for both formats.
   */
  public CompletableFuture<GenerateTemplatePreviewsResponse> generateTemplatePreviews(
      String templateId, GenerateTemplatePreviewsRequest request) {
    return this.rawClient.generateTemplatePreviews(templateId, request).thenApply(response -> response.body());
  }

  /**
   * Creates both PNG and PDF preview files for template visualization. Generates previews in parallel and returns URLs for both formats.
   */
  public CompletableFuture<GenerateTemplatePreviewsResponse> generateTemplatePreviews(
      String templateId, GenerateTemplatePreviewsRequest request, RequestOptions requestOptions) {
    return this.rawClient.generateTemplatePreviews(templateId, request, requestOptions).thenApply(response -> response.body());
  }

  /**
   * Generates a presigned URL for template access. Used for downloading template files from S3 storage.
   */
  public CompletableFuture<GeneratePresignedGetUrlResponse> generatePresignedGetUrl(
      String templateId) {
    return this.rawClient.generatePresignedGetUrl(templateId).thenApply(response -> response.body());
  }

  /**
   * Generates a presigned URL for template access. Used for downloading template files from S3 storage.
   */
  public CompletableFuture<GeneratePresignedGetUrlResponse> generatePresignedGetUrl(
      String templateId, RequestOptions requestOptions) {
    return this.rawClient.generatePresignedGetUrl(templateId, requestOptions).thenApply(response -> response.body());
  }

  /**
   * Retrieves the template index.html file from S3 storage. Used for rendering the template in the browser.
   */
  public CompletableFuture<GetTemplateIndexHtmlResponse> getTemplateIndexHtml(String templateId) {
    return this.rawClient.getTemplateIndexHtml(templateId).thenApply(response -> response.body());
  }

  /**
   * Retrieves the template index.html file from S3 storage. Used for rendering the template in the browser.
   */
  public CompletableFuture<GetTemplateIndexHtmlResponse> getTemplateIndexHtml(String templateId,
      RequestOptions requestOptions) {
    return this.rawClient.getTemplateIndexHtml(templateId, requestOptions).thenApply(response -> response.body());
  }

  /**
   * Uploads the template index.html file to S3 storage. Used for rendering the template in the browser.
   */
  public CompletableFuture<Void> uploadTemplateIndexHtml(String templateId,
      UploadTemplateIndexHtmlRequest request) {
    return this.rawClient.uploadTemplateIndexHtml(templateId, request).thenApply(response -> response.body());
  }

  /**
   * Uploads the template index.html file to S3 storage. Used for rendering the template in the browser.
   */
  public CompletableFuture<Void> uploadTemplateIndexHtml(String templateId,
      UploadTemplateIndexHtmlRequest request, RequestOptions requestOptions) {
    return this.rawClient.uploadTemplateIndexHtml(templateId, request, requestOptions).thenApply(response -> response.body());
  }

  /**
   * Creates a new template by duplicating an existing template's content and metadata. Includes copying preview files and template index.
   */
  public CompletableFuture<CloneTemplateResponse> cloneTemplate(String templateId) {
    return this.rawClient.cloneTemplate(templateId).thenApply(response -> response.body());
  }

  /**
   * Creates a new template by duplicating an existing template's content and metadata. Includes copying preview files and template index.
   */
  public CompletableFuture<CloneTemplateResponse> cloneTemplate(String templateId,
      RequestOptions requestOptions) {
    return this.rawClient.cloneTemplate(templateId, requestOptions).thenApply(response -> response.body());
  }
}
