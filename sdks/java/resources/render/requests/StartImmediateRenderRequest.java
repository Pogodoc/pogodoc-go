/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.render.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;
import resources.render.types.StartImmediateRenderRequestFormatOpts;
import resources.render.types.StartImmediateRenderRequestTarget;
import resources.render.types.StartImmediateRenderRequestType;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = StartImmediateRenderRequest.Builder.class
)
public final class StartImmediateRenderRequest {
  private final Map<String, Object> startImmediateRenderRequestData;

  private final StartImmediateRenderRequestType type;

  private final StartImmediateRenderRequestTarget target;

  private final Optional<String> templateId;

  private final Optional<StartImmediateRenderRequestFormatOpts> formatOpts;

  private final Optional<String> template;

  private final Map<String, Object> additionalProperties;

  private StartImmediateRenderRequest(Map<String, Object> startImmediateRenderRequestData,
      StartImmediateRenderRequestType type, StartImmediateRenderRequestTarget target,
      Optional<String> templateId, Optional<StartImmediateRenderRequestFormatOpts> formatOpts,
      Optional<String> template, Map<String, Object> additionalProperties) {
    this.startImmediateRenderRequestData = startImmediateRenderRequestData;
    this.type = type;
    this.target = target;
    this.templateId = templateId;
    this.formatOpts = formatOpts;
    this.template = template;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("data")
  public Map<String, Object> getStartImmediateRenderRequestData() {
    return startImmediateRenderRequestData;
  }

  @JsonProperty("type")
  public StartImmediateRenderRequestType getType() {
    return type;
  }

  @JsonProperty("target")
  public StartImmediateRenderRequestTarget getTarget() {
    return target;
  }

  @JsonProperty("templateId")
  public Optional<String> getTemplateId() {
    return templateId;
  }

  @JsonProperty("formatOpts")
  public Optional<StartImmediateRenderRequestFormatOpts> getFormatOpts() {
    return formatOpts;
  }

  @JsonProperty("template")
  public Optional<String> getTemplate() {
    return template;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof StartImmediateRenderRequest && equalTo((StartImmediateRenderRequest) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(StartImmediateRenderRequest other) {
    return startImmediateRenderRequestData.equals(other.startImmediateRenderRequestData) && type.equals(other.type) && target.equals(other.target) && templateId.equals(other.templateId) && formatOpts.equals(other.formatOpts) && template.equals(other.template);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.startImmediateRenderRequestData, this.type, this.target, this.templateId, this.formatOpts, this.template);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static TypeStage builder() {
    return new Builder();
  }

  public interface TypeStage {
    TargetStage type(@NotNull StartImmediateRenderRequestType type);

    Builder from(StartImmediateRenderRequest other);
  }

  public interface TargetStage {
    _FinalStage target(@NotNull StartImmediateRenderRequestTarget target);
  }

  public interface _FinalStage {
    StartImmediateRenderRequest build();

    _FinalStage startImmediateRenderRequestData(
        Map<String, Object> startImmediateRenderRequestData);

    _FinalStage putAllStartImmediateRenderRequestData(
        Map<String, Object> startImmediateRenderRequestData);

    _FinalStage startImmediateRenderRequestData(String key, Object value);

    _FinalStage templateId(Optional<String> templateId);

    _FinalStage templateId(String templateId);

    _FinalStage formatOpts(Optional<StartImmediateRenderRequestFormatOpts> formatOpts);

    _FinalStage formatOpts(StartImmediateRenderRequestFormatOpts formatOpts);

    _FinalStage template(Optional<String> template);

    _FinalStage template(String template);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements TypeStage, TargetStage, _FinalStage {
    private StartImmediateRenderRequestType type;

    private StartImmediateRenderRequestTarget target;

    private Optional<String> template = Optional.empty();

    private Optional<StartImmediateRenderRequestFormatOpts> formatOpts = Optional.empty();

    private Optional<String> templateId = Optional.empty();

    private Map<String, Object> startImmediateRenderRequestData = new LinkedHashMap<>();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(StartImmediateRenderRequest other) {
      startImmediateRenderRequestData(other.getStartImmediateRenderRequestData());
      type(other.getType());
      target(other.getTarget());
      templateId(other.getTemplateId());
      formatOpts(other.getFormatOpts());
      template(other.getTemplate());
      return this;
    }

    @java.lang.Override
    @JsonSetter("type")
    public TargetStage type(@NotNull StartImmediateRenderRequestType type) {
      this.type = Objects.requireNonNull(type, "type must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("target")
    public _FinalStage target(@NotNull StartImmediateRenderRequestTarget target) {
      this.target = Objects.requireNonNull(target, "target must not be null");
      return this;
    }

    @java.lang.Override
    public _FinalStage template(String template) {
      this.template = Optional.ofNullable(template);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "template",
        nulls = Nulls.SKIP
    )
    public _FinalStage template(Optional<String> template) {
      this.template = template;
      return this;
    }

    @java.lang.Override
    public _FinalStage formatOpts(StartImmediateRenderRequestFormatOpts formatOpts) {
      this.formatOpts = Optional.ofNullable(formatOpts);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "formatOpts",
        nulls = Nulls.SKIP
    )
    public _FinalStage formatOpts(Optional<StartImmediateRenderRequestFormatOpts> formatOpts) {
      this.formatOpts = formatOpts;
      return this;
    }

    @java.lang.Override
    public _FinalStage templateId(String templateId) {
      this.templateId = Optional.ofNullable(templateId);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "templateId",
        nulls = Nulls.SKIP
    )
    public _FinalStage templateId(Optional<String> templateId) {
      this.templateId = templateId;
      return this;
    }

    @java.lang.Override
    public _FinalStage startImmediateRenderRequestData(String key, Object value) {
      this.startImmediateRenderRequestData.put(key, value);
      return this;
    }

    @java.lang.Override
    public _FinalStage putAllStartImmediateRenderRequestData(
        Map<String, Object> startImmediateRenderRequestData) {
      this.startImmediateRenderRequestData.putAll(startImmediateRenderRequestData);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "data",
        nulls = Nulls.SKIP
    )
    public _FinalStage startImmediateRenderRequestData(
        Map<String, Object> startImmediateRenderRequestData) {
      this.startImmediateRenderRequestData.clear();
      this.startImmediateRenderRequestData.putAll(startImmediateRenderRequestData);
      return this;
    }

    @java.lang.Override
    public StartImmediateRenderRequest build() {
      return new StartImmediateRenderRequest(startImmediateRenderRequestData, type, target, templateId, formatOpts, template, additionalProperties);
    }
  }
}
