/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.render.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;
import resources.render.types.GenerateDocumentPreviewRequestFormatOpts;
import resources.render.types.GenerateDocumentPreviewRequestType;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = GenerateDocumentPreviewRequest.Builder.class
)
public final class GenerateDocumentPreviewRequest {
  private final String templateId;

  private final GenerateDocumentPreviewRequestType type;

  private final Map<String, Object> data;

  private final Optional<GenerateDocumentPreviewRequestFormatOpts> formatOpts;

  private final Map<String, Object> additionalProperties;

  private GenerateDocumentPreviewRequest(String templateId, GenerateDocumentPreviewRequestType type,
      Map<String, Object> data, Optional<GenerateDocumentPreviewRequestFormatOpts> formatOpts,
      Map<String, Object> additionalProperties) {
    this.templateId = templateId;
    this.type = type;
    this.data = data;
    this.formatOpts = formatOpts;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("templateId")
  public String getTemplateId() {
    return templateId;
  }

  @JsonProperty("type")
  public GenerateDocumentPreviewRequestType getType() {
    return type;
  }

  @JsonProperty("data")
  public Map<String, Object> getData() {
    return data;
  }

  @JsonProperty("formatOpts")
  public Optional<GenerateDocumentPreviewRequestFormatOpts> getFormatOpts() {
    return formatOpts;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof GenerateDocumentPreviewRequest && equalTo((GenerateDocumentPreviewRequest) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(GenerateDocumentPreviewRequest other) {
    return templateId.equals(other.templateId) && type.equals(other.type) && data.equals(other.data) && formatOpts.equals(other.formatOpts);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.templateId, this.type, this.data, this.formatOpts);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static TemplateIdStage builder() {
    return new Builder();
  }

  public interface TemplateIdStage {
    TypeStage templateId(@NotNull String templateId);

    Builder from(GenerateDocumentPreviewRequest other);
  }

  public interface TypeStage {
    _FinalStage type(@NotNull GenerateDocumentPreviewRequestType type);
  }

  public interface _FinalStage {
    GenerateDocumentPreviewRequest build();

    _FinalStage data(Map<String, Object> data);

    _FinalStage putAllData(Map<String, Object> data);

    _FinalStage data(String key, Object value);

    _FinalStage formatOpts(Optional<GenerateDocumentPreviewRequestFormatOpts> formatOpts);

    _FinalStage formatOpts(GenerateDocumentPreviewRequestFormatOpts formatOpts);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements TemplateIdStage, TypeStage, _FinalStage {
    private String templateId;

    private GenerateDocumentPreviewRequestType type;

    private Optional<GenerateDocumentPreviewRequestFormatOpts> formatOpts = Optional.empty();

    private Map<String, Object> data = new LinkedHashMap<>();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(GenerateDocumentPreviewRequest other) {
      templateId(other.getTemplateId());
      type(other.getType());
      data(other.getData());
      formatOpts(other.getFormatOpts());
      return this;
    }

    @java.lang.Override
    @JsonSetter("templateId")
    public TypeStage templateId(@NotNull String templateId) {
      this.templateId = Objects.requireNonNull(templateId, "templateId must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("type")
    public _FinalStage type(@NotNull GenerateDocumentPreviewRequestType type) {
      this.type = Objects.requireNonNull(type, "type must not be null");
      return this;
    }

    @java.lang.Override
    public _FinalStage formatOpts(GenerateDocumentPreviewRequestFormatOpts formatOpts) {
      this.formatOpts = Optional.ofNullable(formatOpts);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "formatOpts",
        nulls = Nulls.SKIP
    )
    public _FinalStage formatOpts(Optional<GenerateDocumentPreviewRequestFormatOpts> formatOpts) {
      this.formatOpts = formatOpts;
      return this;
    }

    @java.lang.Override
    public _FinalStage data(String key, Object value) {
      this.data.put(key, value);
      return this;
    }

    @java.lang.Override
    public _FinalStage putAllData(Map<String, Object> data) {
      this.data.putAll(data);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "data",
        nulls = Nulls.SKIP
    )
    public _FinalStage data(Map<String, Object> data) {
      this.data.clear();
      this.data.putAll(data);
      return this;
    }

    @java.lang.Override
    public GenerateDocumentPreviewRequest build() {
      return new GenerateDocumentPreviewRequest(templateId, type, data, formatOpts, additionalProperties);
    }
  }
}
