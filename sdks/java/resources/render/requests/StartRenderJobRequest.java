/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.render.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = StartRenderJobRequest.Builder.class
)
public final class StartRenderJobRequest {
  private final Optional<Boolean> shouldWaitForRenderCompletion;

  private final Optional<String> uploadPresignedS3Url;

  private final Map<String, Object> additionalProperties;

  private StartRenderJobRequest(Optional<Boolean> shouldWaitForRenderCompletion,
      Optional<String> uploadPresignedS3Url, Map<String, Object> additionalProperties) {
    this.shouldWaitForRenderCompletion = shouldWaitForRenderCompletion;
    this.uploadPresignedS3Url = uploadPresignedS3Url;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("shouldWaitForRenderCompletion")
  public Optional<Boolean> getShouldWaitForRenderCompletion() {
    return shouldWaitForRenderCompletion;
  }

  @JsonProperty("uploadPresignedS3Url")
  public Optional<String> getUploadPresignedS3Url() {
    return uploadPresignedS3Url;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof StartRenderJobRequest && equalTo((StartRenderJobRequest) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(StartRenderJobRequest other) {
    return shouldWaitForRenderCompletion.equals(other.shouldWaitForRenderCompletion) && uploadPresignedS3Url.equals(other.uploadPresignedS3Url);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.shouldWaitForRenderCompletion, this.uploadPresignedS3Url);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Boolean> shouldWaitForRenderCompletion = Optional.empty();

    private Optional<String> uploadPresignedS3Url = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(StartRenderJobRequest other) {
      shouldWaitForRenderCompletion(other.getShouldWaitForRenderCompletion());
      uploadPresignedS3Url(other.getUploadPresignedS3Url());
      return this;
    }

    @JsonSetter(
        value = "shouldWaitForRenderCompletion",
        nulls = Nulls.SKIP
    )
    public Builder shouldWaitForRenderCompletion(Optional<Boolean> shouldWaitForRenderCompletion) {
      this.shouldWaitForRenderCompletion = shouldWaitForRenderCompletion;
      return this;
    }

    public Builder shouldWaitForRenderCompletion(Boolean shouldWaitForRenderCompletion) {
      this.shouldWaitForRenderCompletion = Optional.ofNullable(shouldWaitForRenderCompletion);
      return this;
    }

    @JsonSetter(
        value = "uploadPresignedS3Url",
        nulls = Nulls.SKIP
    )
    public Builder uploadPresignedS3Url(Optional<String> uploadPresignedS3Url) {
      this.uploadPresignedS3Url = uploadPresignedS3Url;
      return this;
    }

    public Builder uploadPresignedS3Url(String uploadPresignedS3Url) {
      this.uploadPresignedS3Url = Optional.ofNullable(uploadPresignedS3Url);
      return this;
    }

    public StartRenderJobRequest build() {
      return new StartRenderJobRequest(shouldWaitForRenderCompletion, uploadPresignedS3Url, additionalProperties);
    }
  }
}
