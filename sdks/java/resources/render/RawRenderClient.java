/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.render;

import com.fasterxml.jackson.core.JsonProcessingException;
import core.ClientOptions;
import core.MediaTypes;
import core.ObjectMappers;
import core.PogodocApiApiException;
import core.PogodocApiException;
import core.PogodocApiHttpResponse;
import core.QueryStringMapper;
import core.RequestOptions;
import java.io.IOException;
import java.lang.Exception;
import java.lang.Object;
import java.lang.RuntimeException;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import resources.render.requests.GenerateDocumentPreviewRequest;
import resources.render.requests.InitializeRenderJobRequest;
import resources.render.requests.StartImmediateRenderRequest;
import resources.render.requests.StartRenderJobRequest;
import resources.render.types.GenerateDocumentPreviewResponse;
import resources.render.types.GetJobStatusResponse;
import resources.render.types.InitializeRenderJobResponse;
import resources.render.types.StartImmediateRenderResponse;
import resources.render.types.StartRenderJobResponse;

public class RawRenderClient {
  protected final ClientOptions clientOptions;

  public RawRenderClient(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
  }

  /**
   * Creates a new render job with a unique ID, sets up S3 storage for template and data files, and generates presigned upload URLs if needed. Requires subscription check.
   */
  public PogodocApiHttpResponse<InitializeRenderJobResponse> initializeRenderJob(
      InitializeRenderJobRequest request) {
    return initializeRenderJob(request,null);
  }

  /**
   * Creates a new render job with a unique ID, sets up S3 storage for template and data files, and generates presigned upload URLs if needed. Requires subscription check.
   */
  public PogodocApiHttpResponse<InitializeRenderJobResponse> initializeRenderJob(
      InitializeRenderJobRequest request, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("documents/init")
      .build();
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
    }
    catch(JsonProcessingException e) {
      throw new PogodocApiException("Failed to serialize request", e);
    }
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("POST", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    try (Response response = client.newCall(okhttpRequest).execute()) {
      ResponseBody responseBody = response.body();
      if (response.isSuccessful()) {
        return new PogodocApiHttpResponse<>(ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), InitializeRenderJobResponse.class), response);
      }
      String responseBodyString = responseBody != null ? responseBody.string() : "{}";
      throw new PogodocApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
    }
    catch (IOException e) {
      throw new PogodocApiException("Network error executing HTTP request", e);
    }
  }

  /**
   * Takes a previously initialized job, updates its status to in-progress, and triggers the rendering process using Puppeteer. Can optionally wait for render completion.
   */
  public PogodocApiHttpResponse<StartRenderJobResponse> startRenderJob(String jobId) {
    return startRenderJob(jobId,StartRenderJobRequest.builder().build());
  }

  /**
   * Takes a previously initialized job, updates its status to in-progress, and triggers the rendering process using Puppeteer. Can optionally wait for render completion.
   */
  public PogodocApiHttpResponse<StartRenderJobResponse> startRenderJob(String jobId,
      StartRenderJobRequest request) {
    return startRenderJob(jobId,request,null);
  }

  /**
   * Takes a previously initialized job, updates its status to in-progress, and triggers the rendering process using Puppeteer. Can optionally wait for render completion.
   */
  public PogodocApiHttpResponse<StartRenderJobResponse> startRenderJob(String jobId,
      StartRenderJobRequest request, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("documents")
      .addPathSegment(jobId)
      .addPathSegments("render")
      .build();
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
    }
    catch(JsonProcessingException e) {
      throw new PogodocApiException("Failed to serialize request", e);
    }
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("POST", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    try (Response response = client.newCall(okhttpRequest).execute()) {
      ResponseBody responseBody = response.body();
      if (response.isSuccessful()) {
        return new PogodocApiHttpResponse<>(ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), StartRenderJobResponse.class), response);
      }
      String responseBodyString = responseBody != null ? responseBody.string() : "{}";
      throw new PogodocApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
    }
    catch (IOException e) {
      throw new PogodocApiException("Network error executing HTTP request", e);
    }
  }

  /**
   * Generates a preview by creating a single-page render job, processing it immediately, and returning the output URL. Used for template visualization.
   */
  public PogodocApiHttpResponse<GenerateDocumentPreviewResponse> generateDocumentPreview(
      GenerateDocumentPreviewRequest request) {
    return generateDocumentPreview(request,null);
  }

  /**
   * Generates a preview by creating a single-page render job, processing it immediately, and returning the output URL. Used for template visualization.
   */
  public PogodocApiHttpResponse<GenerateDocumentPreviewResponse> generateDocumentPreview(
      GenerateDocumentPreviewRequest request, RequestOptions requestOptions) {
    HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("documents/render-preview");QueryStringMapper.addQueryParameter(httpUrl, "templateId", request.getTemplateId(), false);
      Map<String, Object> properties = new HashMap<>();
      properties.put("type", request.getType());
      properties.put("data", request.getData());
      if (request.getFormatOpts().isPresent()) {
        properties.put("formatOpts", request.getFormatOpts());
      }
      RequestBody body;
      try {
        body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(properties), MediaTypes.APPLICATION_JSON);
      }
      catch(Exception e) {
        throw new RuntimeException(e);
      }
      Request.Builder _requestBuilder = new Request.Builder()
        .url(httpUrl.build())
        .method("POST", body)
        .headers(Headers.of(clientOptions.headers(requestOptions)))
        .addHeader("Content-Type", "application/json")
        .addHeader("Accept", "application/json");
      Request okhttpRequest = _requestBuilder.build();
      OkHttpClient client = clientOptions.httpClient();
      if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
        client = clientOptions.httpClientWithTimeout(requestOptions);
      }
      try (Response response = client.newCall(okhttpRequest).execute()) {
        ResponseBody responseBody = response.body();
        if (response.isSuccessful()) {
          return new PogodocApiHttpResponse<>(ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GenerateDocumentPreviewResponse.class), response);
        }
        String responseBodyString = responseBody != null ? responseBody.string() : "{}";
        throw new PogodocApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
      }
      catch (IOException e) {
        throw new PogodocApiException("Network error executing HTTP request", e);
      }
    }

    /**
     * Combines initialization and rendering in one step. Creates a job, uploads template/data directly, starts rendering, and adds the document to Strapi. Requires subscription check.
     */
    public PogodocApiHttpResponse<StartImmediateRenderResponse> startImmediateRender(
        StartImmediateRenderRequest request) {
      return startImmediateRender(request,null);
    }

    /**
     * Combines initialization and rendering in one step. Creates a job, uploads template/data directly, starts rendering, and adds the document to Strapi. Requires subscription check.
     */
    public PogodocApiHttpResponse<StartImmediateRenderResponse> startImmediateRender(
        StartImmediateRenderRequest request, RequestOptions requestOptions) {
      HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

        .addPathSegments("documents/immediate-render")
        .build();
      RequestBody body;
      try {
        body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
      }
      catch(JsonProcessingException e) {
        throw new PogodocApiException("Failed to serialize request", e);
      }
      Request okhttpRequest = new Request.Builder()
        .url(httpUrl)
        .method("POST", body)
        .headers(Headers.of(clientOptions.headers(requestOptions)))
        .addHeader("Content-Type", "application/json")
        .addHeader("Accept", "application/json")
        .build();
      OkHttpClient client = clientOptions.httpClient();
      if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
        client = clientOptions.httpClientWithTimeout(requestOptions);
      }
      try (Response response = client.newCall(okhttpRequest).execute()) {
        ResponseBody responseBody = response.body();
        if (response.isSuccessful()) {
          return new PogodocApiHttpResponse<>(ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), StartImmediateRenderResponse.class), response);
        }
        String responseBodyString = responseBody != null ? responseBody.string() : "{}";
        throw new PogodocApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
      }
      catch (IOException e) {
        throw new PogodocApiException("Network error executing HTTP request", e);
      }
    }

    /**
     * Fetches detailed job information from S3 storage including job status, template ID, target format, and output details if available.
     */
    public PogodocApiHttpResponse<GetJobStatusResponse> getJobStatus(String jobId) {
      return getJobStatus(jobId,null);
    }

    /**
     * Fetches detailed job information from S3 storage including job status, template ID, target format, and output details if available.
     */
    public PogodocApiHttpResponse<GetJobStatusResponse> getJobStatus(String jobId,
        RequestOptions requestOptions) {
      HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

        .addPathSegments("jobs")
        .addPathSegment(jobId)
        .build();
      Request okhttpRequest = new Request.Builder()
        .url(httpUrl)
        .method("GET", null)
        .headers(Headers.of(clientOptions.headers(requestOptions)))
        .addHeader("Content-Type", "application/json")
        .addHeader("Accept", "application/json")
        .build();
      OkHttpClient client = clientOptions.httpClient();
      if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
        client = clientOptions.httpClientWithTimeout(requestOptions);
      }
      try (Response response = client.newCall(okhttpRequest).execute()) {
        ResponseBody responseBody = response.body();
        if (response.isSuccessful()) {
          return new PogodocApiHttpResponse<>(ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GetJobStatusResponse.class), response);
        }
        String responseBodyString = responseBody != null ? responseBody.string() : "{}";
        throw new PogodocApiApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
      }
      catch (IOException e) {
        throw new PogodocApiException("Network error executing HTTP request", e);
      }
    }
  }
