/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.documents;

import core.ClientOptions;
import core.RequestOptions;
import java.lang.String;
import resources.documents.requests.GenerateDocumentPreviewRequest;
import resources.documents.requests.InitializeRenderJobRequest;
import resources.documents.requests.StartImmediateRenderRequest;
import resources.documents.requests.StartRenderJobRequest;
import resources.documents.types.GenerateDocumentPreviewResponse;
import resources.documents.types.GetJobStatusResponse;
import resources.documents.types.InitializeRenderJobResponse;
import resources.documents.types.StartImmediateRenderResponse;
import resources.documents.types.StartRenderJobResponse;

public class DocumentsClient {
  protected final ClientOptions clientOptions;

  private final RawDocumentsClient rawClient;

  public DocumentsClient(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
    this.rawClient = new RawDocumentsClient(clientOptions);
  }

  /**
   * Get responses with HTTP metadata like headers
   */
  public RawDocumentsClient withRawResponse() {
    return this.rawClient;
  }

  /**
   * Creates a new render job with a unique ID, sets up S3 storage for template and data files, and generates presigned upload URLs if needed. Requires subscription check.
   */
  public InitializeRenderJobResponse initializeRenderJob(InitializeRenderJobRequest request) {
    return this.rawClient.initializeRenderJob(request).body();
  }

  /**
   * Creates a new render job with a unique ID, sets up S3 storage for template and data files, and generates presigned upload URLs if needed. Requires subscription check.
   */
  public InitializeRenderJobResponse initializeRenderJob(InitializeRenderJobRequest request,
      RequestOptions requestOptions) {
    return this.rawClient.initializeRenderJob(request, requestOptions).body();
  }

  /**
   * Takes a previously initialized job, updates its status to in-progress, and triggers the rendering process using Puppeteer. Can optionally wait for render completion.
   */
  public StartRenderJobResponse startRenderJob(String jobId) {
    return this.rawClient.startRenderJob(jobId).body();
  }

  /**
   * Takes a previously initialized job, updates its status to in-progress, and triggers the rendering process using Puppeteer. Can optionally wait for render completion.
   */
  public StartRenderJobResponse startRenderJob(String jobId, StartRenderJobRequest request) {
    return this.rawClient.startRenderJob(jobId, request).body();
  }

  /**
   * Takes a previously initialized job, updates its status to in-progress, and triggers the rendering process using Puppeteer. Can optionally wait for render completion.
   */
  public StartRenderJobResponse startRenderJob(String jobId, StartRenderJobRequest request,
      RequestOptions requestOptions) {
    return this.rawClient.startRenderJob(jobId, request, requestOptions).body();
  }

  /**
   * Generates a preview by creating a single-page render job, processing it immediately, and returning the output URL. Used for template visualization.
   */
  public GenerateDocumentPreviewResponse generateDocumentPreview(
      GenerateDocumentPreviewRequest request) {
    return this.rawClient.generateDocumentPreview(request).body();
  }

  /**
   * Generates a preview by creating a single-page render job, processing it immediately, and returning the output URL. Used for template visualization.
   */
  public GenerateDocumentPreviewResponse generateDocumentPreview(
      GenerateDocumentPreviewRequest request, RequestOptions requestOptions) {
    return this.rawClient.generateDocumentPreview(request, requestOptions).body();
  }

  /**
   * Combines initialization and rendering in one step. Creates a job, uploads template/data directly, starts rendering, and adds the document to Strapi. Requires subscription check.
   */
  public StartImmediateRenderResponse startImmediateRender(StartImmediateRenderRequest request) {
    return this.rawClient.startImmediateRender(request).body();
  }

  /**
   * Combines initialization and rendering in one step. Creates a job, uploads template/data directly, starts rendering, and adds the document to Strapi. Requires subscription check.
   */
  public StartImmediateRenderResponse startImmediateRender(StartImmediateRenderRequest request,
      RequestOptions requestOptions) {
    return this.rawClient.startImmediateRender(request, requestOptions).body();
  }

  /**
   * Fetches detailed job information from S3 storage including job status, template ID, target format, and output details if available.
   */
  public GetJobStatusResponse getJobStatus(String jobId) {
    return this.rawClient.getJobStatus(jobId).body();
  }

  /**
   * Fetches detailed job information from S3 storage including job status, template ID, target format, and output details if available.
   */
  public GetJobStatusResponse getJobStatus(String jobId, RequestOptions requestOptions) {
    return this.rawClient.getJobStatus(jobId, requestOptions).body();
  }
}
