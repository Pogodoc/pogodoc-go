/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.documents.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Double;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = GenerateDocumentPreviewRequestFormatOpts.Builder.class
)
public final class GenerateDocumentPreviewRequestFormatOpts {
  private final Optional<Double> fromPage;

  private final Optional<Double> toPage;

  private final Optional<GenerateDocumentPreviewRequestFormatOptsFormat> format;

  private final Optional<String> waitForSelector;

  private final Map<String, Object> additionalProperties;

  private GenerateDocumentPreviewRequestFormatOpts(Optional<Double> fromPage,
      Optional<Double> toPage, Optional<GenerateDocumentPreviewRequestFormatOptsFormat> format,
      Optional<String> waitForSelector, Map<String, Object> additionalProperties) {
    this.fromPage = fromPage;
    this.toPage = toPage;
    this.format = format;
    this.waitForSelector = waitForSelector;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("fromPage")
  public Optional<Double> getFromPage() {
    return fromPage;
  }

  @JsonProperty("toPage")
  public Optional<Double> getToPage() {
    return toPage;
  }

  @JsonProperty("format")
  public Optional<GenerateDocumentPreviewRequestFormatOptsFormat> getFormat() {
    return format;
  }

  @JsonProperty("waitForSelector")
  public Optional<String> getWaitForSelector() {
    return waitForSelector;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof GenerateDocumentPreviewRequestFormatOpts && equalTo((GenerateDocumentPreviewRequestFormatOpts) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(GenerateDocumentPreviewRequestFormatOpts other) {
    return fromPage.equals(other.fromPage) && toPage.equals(other.toPage) && format.equals(other.format) && waitForSelector.equals(other.waitForSelector);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.fromPage, this.toPage, this.format, this.waitForSelector);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Double> fromPage = Optional.empty();

    private Optional<Double> toPage = Optional.empty();

    private Optional<GenerateDocumentPreviewRequestFormatOptsFormat> format = Optional.empty();

    private Optional<String> waitForSelector = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(GenerateDocumentPreviewRequestFormatOpts other) {
      fromPage(other.getFromPage());
      toPage(other.getToPage());
      format(other.getFormat());
      waitForSelector(other.getWaitForSelector());
      return this;
    }

    @JsonSetter(
        value = "fromPage",
        nulls = Nulls.SKIP
    )
    public Builder fromPage(Optional<Double> fromPage) {
      this.fromPage = fromPage;
      return this;
    }

    public Builder fromPage(Double fromPage) {
      this.fromPage = Optional.ofNullable(fromPage);
      return this;
    }

    @JsonSetter(
        value = "toPage",
        nulls = Nulls.SKIP
    )
    public Builder toPage(Optional<Double> toPage) {
      this.toPage = toPage;
      return this;
    }

    public Builder toPage(Double toPage) {
      this.toPage = Optional.ofNullable(toPage);
      return this;
    }

    @JsonSetter(
        value = "format",
        nulls = Nulls.SKIP
    )
    public Builder format(Optional<GenerateDocumentPreviewRequestFormatOptsFormat> format) {
      this.format = format;
      return this;
    }

    public Builder format(GenerateDocumentPreviewRequestFormatOptsFormat format) {
      this.format = Optional.ofNullable(format);
      return this;
    }

    @JsonSetter(
        value = "waitForSelector",
        nulls = Nulls.SKIP
    )
    public Builder waitForSelector(Optional<String> waitForSelector) {
      this.waitForSelector = waitForSelector;
      return this;
    }

    public Builder waitForSelector(String waitForSelector) {
      this.waitForSelector = Optional.ofNullable(waitForSelector);
      return this;
    }

    public GenerateDocumentPreviewRequestFormatOpts build() {
      return new GenerateDocumentPreviewRequestFormatOpts(fromPage, toPage, format, waitForSelector, additionalProperties);
    }
  }
}
